<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\LJB_F205_V10.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\LJB_F205_V10.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 791]: Last Updated: Thu May 08 17:21:20 2014
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[280]">__user_initial_stackheap</a>
 <LI><a href="#[126]">CPU_IntDis</a>
 <LI><a href="#[2c1]">CPU_IntEn</a>
 <LI><a href="#[12a]">CPU_SR_Save</a>
 <LI><a href="#[12b]">CPU_SR_Restore</a>
 <LI><a href="#[2c2]">CPU_WaitForInt</a>
 <LI><a href="#[2c3]">CPU_WaitForExcept</a>
 <LI><a href="#[1a2]">CPU_CntLeadZeros</a>
 <LI><a href="#[1a8]">CPU_CntTrailZeros</a>
 <LI><a href="#[1ad]">CPU_RevBits</a>
 <LI><a href="#[1b3]">Mem_Copy</a>
 <LI><a href="#[b4]">OS_CPU_SR_Save</a>
 <LI><a href="#[b5]">OS_CPU_SR_Restore</a>
 <LI><a href="#[1f0]">OSStartHighRdy</a>
 <LI><a href="#[1d4]">OSCtxSw</a>
 <LI><a href="#[1ed]">OSIntCtxSw</a>
 <LI><a href="#[19]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">App_NMI_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">App_NMI_ISR</a><BR>
 <LI><a href="#[14]">App_Fault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">App_Fault_ISR</a><BR>
 <LI><a href="#[15]">App_MemFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">App_MemFault_ISR</a><BR>
 <LI><a href="#[16]">App_BusFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">App_BusFault_ISR</a><BR>
 <LI><a href="#[17]">App_UsageFault_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">App_UsageFault_ISR</a><BR>
 <LI><a href="#[18]">App_Spurious_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">App_Spurious_ISR</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[70]">Adc_Tm3CallBack</a> from app_adc.o(.text) referenced from app.o(.text)
 <LI><a href="#[6e]">AppTaskADC</a> from app_adc.o(.text) referenced from app.o(.text)
 <LI><a href="#[6f]">AppTaskI2C1</a> from app_i2c1.o(.text) referenced from app.o(.text)
 <LI><a href="#[71]">AppTaskStart</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[6c]">AppTaskUsart1</a> from app_usart1.o(.text) referenced from app.o(.text)
 <LI><a href="#[6d]">AppTaskUsart6</a> from app_usart6.o(.text) referenced from app.o(.text)
 <LI><a href="#[16]">App_BusFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[14]">App_Fault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[15]">App_MemFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[13]">App_NMI_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[18]">App_Spurious_ISR</a> from cstartup.o(.text) referenced 7 times from cstartup.o(RESET)
 <LI><a href="#[17]">App_UsageFault_ISR</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[14c]">BSP_ADC1_DMA_ISRHandler</a> from bsp_adc.o(.text) referenced from bsp_adc.o(.text)
 <LI><a href="#[2d]">BSP_IntHandlerADC1_2</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[2f]">BSP_IntHandlerCAN1_RX0</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[30]">BSP_IntHandlerCAN1_RX1</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[31]">BSP_IntHandlerCAN1_SCE</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[2e]">BSP_IntHandlerCAN1_TX</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[5b]">BSP_IntHandlerCAN2_RX0</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[5c]">BSP_IntHandlerCAN2_RX1</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[5d]">BSP_IntHandlerCAN2_SCE</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[5a]">BSP_IntHandlerCAN2_TX</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[6a]">BSP_IntHandlerCRYP</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[69]">BSP_IntHandlerDCMI</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[26]">BSP_IntHandlerDMA1_STREAM0</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[27]">BSP_IntHandlerDMA1_STREAM1</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[28]">BSP_IntHandlerDMA1_STREAM2</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[29]">BSP_IntHandlerDMA1_STREAM3</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[2a]">BSP_IntHandlerDMA1_STREAM4</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[2b]">BSP_IntHandlerDMA1_STREAM5</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[2c]">BSP_IntHandlerDMA1_STREAM6</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[4a]">BSP_IntHandlerDMA1_STREAM7</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[53]">BSP_IntHandlerDMA2_STREAM0</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[54]">BSP_IntHandlerDMA2_STREAM1</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[55]">BSP_IntHandlerDMA2_STREAM2</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[56]">BSP_IntHandlerDMA2_STREAM3</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[57]">BSP_IntHandlerDMA2_STREAM4</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[5f]">BSP_IntHandlerDMA2_STREAM5</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[60]">BSP_IntHandlerDMA2_STREAM6</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[61]">BSP_IntHandlerDMA2_STREAM7</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[74]">BSP_IntHandlerDummy</a> from bsp_int.o(.text) referenced from bsp_int.o(.text)
 <LI><a href="#[58]">BSP_IntHandlerETH</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[59]">BSP_IntHandlerETHWakeup</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[21]">BSP_IntHandlerEXTI0</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[22]">BSP_IntHandlerEXTI1</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[43]">BSP_IntHandlerEXTI15_10</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[23]">BSP_IntHandlerEXTI2</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[24]">BSP_IntHandlerEXTI3</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[25]">BSP_IntHandlerEXTI4</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[32]">BSP_IntHandlerEXTI9_5</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1f]">BSP_IntHandlerFLASH</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[4b]">BSP_IntHandlerFSMC</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[6b]">BSP_IntHandlerHASH_RNG</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[3b]">BSP_IntHandlerI2C1_ER</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[3a]">BSP_IntHandlerI2C1_EV</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[3d]">BSP_IntHandlerI2C2_ER</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[3c]">BSP_IntHandlerI2C2_EV</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[64]">BSP_IntHandlerI2C3_ER</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[63]">BSP_IntHandlerI2C3_EV</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[5e]">BSP_IntHandlerOTG</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[68]">BSP_IntHandlerOTG_HS</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[66]">BSP_IntHandlerOTG_HS_EP1_IN</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[65]">BSP_IntHandlerOTG_HS_EP1_OUT</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[67]">BSP_IntHandlerOTG_HS_WKUP</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1c]">BSP_IntHandlerPVD</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[20]">BSP_IntHandlerRCC</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1e]">BSP_IntHandlerRTC</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[44]">BSP_IntHandlerRTCAlarm</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[4c]">BSP_IntHandlerSDIO</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[3e]">BSP_IntHandlerSPI1</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[3f]">BSP_IntHandlerSPI2</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[4e]">BSP_IntHandlerSPI3</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1d]">BSP_IntHandlerTAMPER</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[33]">BSP_IntHandlerTIM1_BRK</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[36]">BSP_IntHandlerTIM1_CC</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[35]">BSP_IntHandlerTIM1_TRG_COM</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[34]">BSP_IntHandlerTIM1_UP</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[37]">BSP_IntHandlerTIM2</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[38]">BSP_IntHandlerTIM3</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[39]">BSP_IntHandlerTIM4</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[4d]">BSP_IntHandlerTIM5</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[51]">BSP_IntHandlerTIM6</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[52]">BSP_IntHandlerTIM7</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[46]">BSP_IntHandlerTIM8_BRK_TIM12</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[49]">BSP_IntHandlerTIM8_CC</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[48]">BSP_IntHandlerTIM8_TRG_COM_TIM14</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[47]">BSP_IntHandlerTIM8_UP_TIM13</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[40]">BSP_IntHandlerUSART1</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[41]">BSP_IntHandlerUSART2</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[42]">BSP_IntHandlerUSART3</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[4f]">BSP_IntHandlerUSART4</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[50]">BSP_IntHandlerUSART5</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[62]">BSP_IntHandlerUSART6</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[45]">BSP_IntHandlerUSBWakeUp</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1b]">BSP_IntHandlerWWDG</a> from bsp_int.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[75]">BSP_Ser_ISR_Handler</a> from bsp_ser.o(.text) referenced from bsp_ser.o(.text)
 <LI><a href="#[185]">BSP_TIM3_ISRHandler</a> from bsp_tm3.o(.text) referenced from bsp_tm3.o(.text)
 <LI><a href="#[4]">NULL_RxHandler</a> from usart_common.o(.text) referenced 8 times from usart_common.o(.data)
 <LI><a href="#[78]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[76]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[19]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1a]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[1de]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[77]">OS_TaskReturn</a> from os_task.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[1da]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[12]">Reset_Handler</a> from cstartup.o(.text) referenced from cstartup.o(RESET)
 <LI><a href="#[72]">SystemInit</a> from system_stm32f2xx.o(.text) referenced from cstartup.o(.text)
 <LI><a href="#[6]">Usart1_Dma_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[c]">Usart1_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[3]">Usart1_RxFrameHandler</a> from app_usart1.o(.text) referenced 2 times from usart_common.o(.data)
 <LI><a href="#[7]">Usart2_Dma_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[d]">Usart2_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[8]">Usart3_Dma_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[e]">Usart3_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[9]">Usart4_Dma_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[f]">Usart4_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[a]">Usart5_Dma_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[10]">Usart5_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[b]">Usart6_Dma_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[11]">Usart6_Isr</a> from bsp_usart.o(.text) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[5]">Usart6_RxFrameHandler</a> from app_usart6.o(.text) referenced 2 times from usart_common.o(.data)
 <LI><a href="#[7c]">__main</a> from __main.o(!!!main) referenced from cstartup.o(.text)
 <LI><a href="#[7b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[79]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[15f]">sEE_I2C_DMA_RX_IRQHandler</a> from bsp_i2c.o(.text) referenced from bsp_i2c.o(.text)
 <LI><a href="#[162]">sEE_I2C_DMA_TX_IRQHandler</a> from bsp_i2c.o(.text) referenced from bsp_i2c.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[292]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[293]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[294]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[295]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[296]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[80]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[273]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[82]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[84]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[87]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[297]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[298]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[88]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8b]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[8e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[90]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[93]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[94]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[96]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[299]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[98]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[9a]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[9c]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[9e]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[29a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[29b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[29c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[29d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[29e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[29f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2a0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[2a1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2a2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2a3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2a4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2a5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2a6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2a7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2a8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2a9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2aa]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2ab]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[2ac]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2ad]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2ae]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2af]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2b0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2b1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2b2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2b3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[7e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2b4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a7]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a9]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2b5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[aa]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2b6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[281]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ad]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2b7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[af]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[23b]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[23c]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[23d]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[23f]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[23e]"></a>App_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>

<P><STRONG><a name="[240]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[241]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[b1]"></a>App_TimeTickHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_hooks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = App_TimeTickHook &rArr; App_TimeTickFunc &rArr; PowOffHandler &rArr; SavePowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[b3]"></a>SavePowOffData</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SavePowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WriteI2C1
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowOffHandler
</UL>

<P><STRONG><a name="[b8]"></a>PowOffHandler</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = PowOffHandler &rArr; SavePowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePowOffData
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickFunc
</UL>

<P><STRONG><a name="[b2]"></a>App_TimeTickFunc</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = App_TimeTickFunc &rArr; PowOffHandler &rArr; SavePowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowOffHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[104]"></a>App_WaitForReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxFrameHandler
</UL>

<P><STRONG><a name="[d1]"></a>TaskMonitor</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[ba]"></a>CheckRecInfo</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = CheckRecInfo &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WriteI2C1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadI2C1
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[bc]"></a>GetParams</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = GetParams &rArr; F205_WriteParams &rArr; F205_EraseSectors &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteParams
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_ReadParams
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_EraseSectors
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[c3]"></a>SetChParams</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetChParams &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_ReadParams
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[c8]"></a>SetAppParams</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[d8]"></a>SetBSPInfo</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>App_InitInfo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = App_InitInfo &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>main</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_InitInfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDisAll
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitInfo
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FeedDog
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_InitInfo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBSPInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b7]"></a>Calc_CRCByte</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, miscfnx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Calc_CRCByte
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChParams
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBoardID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMaintInfo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPowOffData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrepareTxData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckRxFrame
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCWord
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChParams
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParams
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecInfo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePowOffData
</UL>

<P><STRONG><a name="[de]"></a>Calc_CRCByte_Continue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, miscfnx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Calc_CRCByte_Continue
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrepareTxData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckRxFrame
</UL>

<P><STRONG><a name="[dc]"></a>Calc_CRCWord</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, miscfnx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
</UL>

<P><STRONG><a name="[2b8]"></a>GetTimeToMinutes</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, miscfnx.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>GetTimeToSeconds</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, miscfnx.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>Usart_InitInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usart_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>_ErrHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_RxDataHandler
</UL>

<P><STRONG><a name="[dd]"></a>_CheckRxFrame</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usart_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _CheckRxFrame &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte_Continue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_RxDataHandler
</UL>

<P><STRONG><a name="[df]"></a>Usart_RxDataHandler</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, usart_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Usart_RxDataHandler &rArr; _CheckRxFrame &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRxData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitRx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckRxFrame
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ErrHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUsart6
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUsart1
</UL>

<P><STRONG><a name="[e3]"></a>_PrepareTxData</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, usart_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte_Continue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
</UL>

<P><STRONG><a name="[e4]"></a>Usart_TxDataHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usart_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Usart_TxDataHandler &rArr; _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_TxData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnableUsartTx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrepareTxData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChParams
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckParams
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckBoardID
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBoardID
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckMaintInfo
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMaintInfo
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParams
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack110VOffset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack110VRes
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckWriteProtection
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPowOffData
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxFrameHandler
</UL>

<P><STRONG><a name="[4]"></a>NULL_RxHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usart_common.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>F205_EraseSectors</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, f205_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = F205_EraseSectors &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteParams
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParams
</UL>

<P><STRONG><a name="[ea]"></a>F205_ProgramFlash</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, f205_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>

<P><STRONG><a name="[ec]"></a>F205_WriteProtection</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, f205_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = F205_WriteProtection &rArr; FLASH_OB_WRPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Lock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetWRP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteParams
</UL>

<P><STRONG><a name="[bf]"></a>F205_WriteParams</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, f205_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = F205_WriteParams &rArr; F205_EraseSectors &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_EraseSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChParams
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBoardID
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMaintInfo
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParams
</UL>

<P><STRONG><a name="[bd]"></a>F205_ReadParams</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, f205_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = F205_ReadParams
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChParams
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParams
</UL>

<P><STRONG><a name="[b9]"></a>LedHandler</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, app_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LedHandler &rArr; BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickFunc
</UL>

<P><STRONG><a name="[f4]"></a>GetDigitalRes</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, app_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetDigitalRes &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDataHandler
</UL>

<P><STRONG><a name="[fa]"></a>AdcDataHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AdcDataHandler &rArr; GetDigitalRes &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalRes
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskADC
</UL>

<P><STRONG><a name="[fb]"></a>BSP_Check_RestADC1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = BSP_Check_RestADC1 &rArr; BSP_ADC_Init &rArr; ADC_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskADC
</UL>

<P><STRONG><a name="[6e]"></a>AppTaskADC</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = AppTaskADC &rArr; BSP_Check_RestADC1 &rArr; BSP_ADC_Init &rArr; ADC_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Check_RestADC1
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDataHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>SaveAdcData</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, app_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SaveAdcData
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Tm3CallBack
</UL>

<P><STRONG><a name="[70]"></a>Adc_Tm3CallBack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Adc_Tm3CallBack &rArr; SaveAdcData
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAdcData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>GetSampleOffset</STRONG> (Thumb, 84 bytes, Stack size 28 bytes, app_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetSampleOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack110VOffset
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxFrameHandler
</UL>

<P><STRONG><a name="[101]"></a>GetSampleValues</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, app_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetSampleValues &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack110VRes
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxFrameHandler
</UL>

<P><STRONG><a name="[6f]"></a>AppTaskI2C1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = AppTaskI2C1 &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>Test_I2C1</STRONG> (Thumb, 126 bytes, Stack size 96 bytes, app_i2c1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WriteI2C1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadI2C1
</UL>

<P><STRONG><a name="[6c]"></a>AppTaskUsart1</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, app_usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = AppTaskUsart1 &rArr; Usart_RxDataHandler &rArr; _CheckRxFrame &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_RxDataHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>ReportPowOffData</STRONG> (Thumb, 422 bytes, Stack size 56 bytes, app_usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ReportPowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WriteI2C1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadI2C1
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxFrameHandler
</UL>

<P><STRONG><a name="[105]"></a>ReadBoardWorkInfo</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, app_usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBoardWorkInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxFrameHandler
</UL>

<P><STRONG><a name="[3]"></a>Usart1_RxFrameHandler</STRONG> (Thumb, 1796 bytes, Stack size 64 bytes, app_usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Usart1_RxFrameHandler &rArr; ReportPowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBoardWorkInfo
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPowOffData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleValues
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleOffset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WriteI2C1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadI2C1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WaitForReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_common.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>AppTaskUsart6</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = AppTaskUsart6 &rArr; Usart_RxDataHandler &rArr; _CheckRxFrame &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_RxDataHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>AckWriteProtection</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = AckWriteProtection &rArr; Usart_TxDataHandler &rArr; _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[112]"></a>CheckProtectData</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckProtectData
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[108]"></a>Ack110VRes</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Ack110VRes &rArr; Usart_TxDataHandler &rArr; _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleValues
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[109]"></a>Ack110VOffset</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Ack110VOffset &rArr; Usart_TxDataHandler &rArr; _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleOffset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[10a]"></a>UpdateParams</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = UpdateParams &rArr; Usart_TxDataHandler &rArr; _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[10b]"></a>WriteMaintInfo</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = WriteMaintInfo &rArr; F205_WriteParams &rArr; F205_EraseSectors &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteParams
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[10c]"></a>AckMaintInfo</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AckMaintInfo &rArr; Usart_TxDataHandler &rArr; _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[10d]"></a>WriteBoardID</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = WriteBoardID &rArr; F205_WriteParams &rArr; F205_EraseSectors &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteParams
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[10e]"></a>AckBoardID</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = AckBoardID &rArr; Usart_TxDataHandler &rArr; _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[10f]"></a>AckParams</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = AckParams &rArr; Usart_TxDataHandler &rArr; _PrepareTxData &rArr; Calc_CRCByte_Continue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[110]"></a>WriteChParams</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = WriteChParams &rArr; F205_WriteParams &rArr; F205_EraseSectors &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteParams
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc_CRCByte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
</UL>

<P><STRONG><a name="[5]"></a>Usart6_RxFrameHandler</STRONG> (Thumb, 1032 bytes, Stack size 48 bytes, app_usart6.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Usart6_RxFrameHandler &rArr; WriteChParams &rArr; F205_WriteParams &rArr; F205_EraseSectors &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChParams
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckParams
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckBoardID
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBoardID
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckMaintInfo
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMaintInfo
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParams
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack110VOffset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack110VRes
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckProtectData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckWriteProtection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WaitForReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_common.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>App_NMI_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NMI_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_NMI_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>App_Fault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Fault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>App_MemFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MemFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_MemFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>App_BusFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BusFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BusFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>App_UsageFault_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UsageFault_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_UsageFault_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>App_Spurious_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Spurious_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Spurious_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>App_Reserved_ISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cstartup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Reserved_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Reserved_ISR
</UL>

<P><STRONG><a name="[280]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cstartup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d7]"></a>BSP_InitInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSP_InitInfo &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>BSP_InitUsart</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BSP_InitUsart &rArr; BSP_USART_Init &rArr; USART_DMAConfig &rArr; USART_DMACmd
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[da]"></a>BSP_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BSP_Init &rArr; BSP_InitUsart &rArr; BSP_USART_Init &rArr; USART_DMAConfig &rArr; USART_DMACmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tm3_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitI2C1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUsart
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>BSP_RNG_Read</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
</UL>

<P><STRONG><a name="[11f]"></a>BSP_CPU_ClkFreq</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_TickInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[cb]"></a>BSP_CPU_TickInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_CPU_TickInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[2ba]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqSet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[19f]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Get32
</UL>

<P><STRONG><a name="[2bb]"></a>BSP_IntClr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_int.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>BSP_IntDis</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcDis
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
</UL>

<P><STRONG><a name="[d5]"></a>BSP_IntDisAll</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = BSP_IntDisAll
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>BSP_IntEn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntEn &rArr; CPU_IntSrcEn
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcEn
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tm3_Init
</UL>

<P><STRONG><a name="[129]"></a>BSP_IntVectSet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BSP_IntVectSet
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tm3_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntInit
</UL>

<P><STRONG><a name="[12c]"></a>BSP_IntPrioSet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioSet
</UL>

<P><STRONG><a name="[117]"></a>BSP_IntInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BSP_IntInit &rArr; BSP_IntVectSet
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1b]"></a>BSP_IntHandlerWWDG</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerWWDG &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>BSP_IntHandlerPVD</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerPVD &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BSP_IntHandlerTAMPER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTAMPER &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BSP_IntHandlerRTC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRTC &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BSP_IntHandlerFLASH</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerFLASH &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>BSP_IntHandlerRCC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRCC &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BSP_IntHandlerEXTI0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI0 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BSP_IntHandlerEXTI1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI1 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BSP_IntHandlerEXTI2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI2 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>BSP_IntHandlerEXTI3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI3 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BSP_IntHandlerEXTI4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI4 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BSP_IntHandlerDMA1_STREAM0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM0 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>BSP_IntHandlerDMA1_STREAM1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM1 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>BSP_IntHandlerDMA1_STREAM2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM2 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BSP_IntHandlerDMA1_STREAM3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM3 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>BSP_IntHandlerDMA1_STREAM4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM4 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>BSP_IntHandlerDMA1_STREAM5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM5 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BSP_IntHandlerDMA1_STREAM6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM6 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>BSP_IntHandlerADC1_2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerADC1_2 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>BSP_IntHandlerCAN1_TX</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN1_TX &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>BSP_IntHandlerCAN1_RX0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN1_RX0 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>BSP_IntHandlerCAN1_RX1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN1_RX1 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>BSP_IntHandlerCAN1_SCE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN1_SCE &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>BSP_IntHandlerEXTI9_5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI9_5 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BSP_IntHandlerTIM1_BRK</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM1_BRK &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BSP_IntHandlerTIM1_UP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM1_UP &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>BSP_IntHandlerTIM1_TRG_COM</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM1_TRG_COM &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>BSP_IntHandlerTIM1_CC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM1_CC &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>BSP_IntHandlerTIM2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM2 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>BSP_IntHandlerTIM3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM3 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>BSP_IntHandlerTIM4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM4 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>BSP_IntHandlerI2C1_EV</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C1_EV &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>BSP_IntHandlerI2C1_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C1_ER &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>BSP_IntHandlerI2C2_EV</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C2_EV &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>BSP_IntHandlerI2C2_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C2_ER &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>BSP_IntHandlerSPI1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI1 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>BSP_IntHandlerSPI2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI2 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>BSP_IntHandlerUSART1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART1 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>BSP_IntHandlerUSART2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART2 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>BSP_IntHandlerUSART3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART3 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>BSP_IntHandlerEXTI15_10</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerEXTI15_10 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>BSP_IntHandlerRTCAlarm</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerRTCAlarm &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>BSP_IntHandlerUSBWakeUp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSBWakeUp &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>BSP_IntHandlerTIM8_BRK_TIM12</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM8_BRK_TIM12 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>BSP_IntHandlerTIM8_UP_TIM13</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM8_UP_TIM13 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>BSP_IntHandlerTIM8_TRG_COM_TIM14</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM8_TRG_COM_TIM14 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>BSP_IntHandlerTIM8_CC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM8_CC &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>BSP_IntHandlerDMA1_STREAM7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA1_STREAM7 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>BSP_IntHandlerFSMC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerFSMC &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>BSP_IntHandlerSDIO</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSDIO &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>BSP_IntHandlerTIM5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM5 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>BSP_IntHandlerSPI3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerSPI3 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>BSP_IntHandlerUSART4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART4 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>BSP_IntHandlerUSART5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART5 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>BSP_IntHandlerTIM6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM6 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>BSP_IntHandlerTIM7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerTIM7 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>BSP_IntHandlerDMA2_STREAM0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_STREAM0 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>BSP_IntHandlerDMA2_STREAM1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_STREAM1 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>BSP_IntHandlerDMA2_STREAM2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_STREAM2 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>BSP_IntHandlerDMA2_STREAM3</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_STREAM3 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>BSP_IntHandlerDMA2_STREAM4</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_STREAM4 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>BSP_IntHandlerETH</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerETH &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>BSP_IntHandlerETHWakeup</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerETHWakeup &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>BSP_IntHandlerCAN2_TX</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN2_TX &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>BSP_IntHandlerCAN2_RX0</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN2_RX0 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>BSP_IntHandlerCAN2_RX1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN2_RX1 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>BSP_IntHandlerCAN2_SCE</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCAN2_SCE &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>BSP_IntHandlerOTG</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>BSP_IntHandlerDMA2_STREAM5</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_STREAM5 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>BSP_IntHandlerDMA2_STREAM6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_STREAM6 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>BSP_IntHandlerDMA2_STREAM7</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDMA2_STREAM7 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>BSP_IntHandlerUSART6</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerUSART6 &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>BSP_IntHandlerI2C3_EV</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C3_EV &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>BSP_IntHandlerI2C3_ER</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerI2C3_ER &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>BSP_IntHandlerOTG_HS_EP1_OUT</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_HS_EP1_OUT &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>BSP_IntHandlerOTG_HS_EP1_IN</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_HS_EP1_IN &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>BSP_IntHandlerOTG_HS_WKUP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_HS_WKUP &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>BSP_IntHandlerOTG_HS</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerOTG_HS &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>BSP_IntHandlerDCMI</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerDCMI &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>BSP_IntHandlerCRYP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerCRYP &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>BSP_IntHandlerHASH_RNG</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandlerHASH_RNG &rArr; BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>BSP_OS_SemCreate</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bsp_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
</UL>

<P><STRONG><a name="[133]"></a>BSP_OS_SemWait</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BSP_OS_SemWait &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdStr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdByte
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrStr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdByteUnlocked
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
</UL>

<P><STRONG><a name="[134]"></a>BSP_OS_SemPost</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_os.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdStr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdByte
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrStr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
</UL>

<P><STRONG><a name="[136]"></a>BSP_OS_TimeDlyMs</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_os.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[13b]"></a>BSP_Ser_Init</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, bsp_ser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>

<P><STRONG><a name="[145]"></a>BSP_Ser_WrStr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_ser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_WrStr &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>

<P><STRONG><a name="[cd]"></a>BSP_Ser_Printf</STRONG> (Thumb, 40 bytes, Stack size 112 bytes, bsp_ser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_Printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrStr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[148]"></a>BSP_Ser_RdByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_ser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdByteUnlocked
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
</UL>

<P><STRONG><a name="[149]"></a>BSP_Ser_RdStr</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, bsp_ser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsPrint
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdByteUnlocked
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
</UL>

<P><STRONG><a name="[14b]"></a>BSP_Ser_WrByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_ser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
</UL>

<P><STRONG><a name="[14c]"></a>BSP_ADC1_DMA_ISRHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ADC1_DMA_ISRHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_adc.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>ADC1_Config</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC1_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[151]"></a>ADC_DMAConfig</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[154]"></a>ADC_GPIOConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_GPIOConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[fe]"></a>BSP_ADC_Init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = BSP_ADC_Init &rArr; ADC_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIOConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Check_RestADC1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[100]"></a>BSP_ADC_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ADC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Tm3CallBack
</UL>

<P><STRONG><a name="[15f]"></a>sEE_I2C_DMA_RX_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sEE_I2C_DMA_RX_IRQHandler &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.text)
</UL>
<P><STRONG><a name="[163]"></a>sEE_TIMEOUT_UserCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_TX_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>sEE_I2C_DMA_TX_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sEE_I2C_DMA_TX_IRQHandler &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_i2c.o(.text)
</UL>
<P><STRONG><a name="[165]"></a>sEE_LowLevel_Init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = sEE_LowLevel_Init &rArr; BSP_IntEn &rArr; CPU_IntSrcEn
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[168]"></a>sEE_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sEE_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitI2C1
</UL>

<P><STRONG><a name="[11b]"></a>BSP_InitI2C1</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = BSP_InitI2C1 &rArr; sEE_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[16c]"></a>sEE_LowLevel_DMAConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[111]"></a>sEE_ReadBuffer</STRONG> (Thumb, 584 bytes, Stack size 16 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sEE_ReadBuffer &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMALastTransferCmd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DMAConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadI2C1
</UL>

<P><STRONG><a name="[bb]"></a>BSP_ReadI2C1</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = BSP_ReadI2C1 &rArr; sEE_ReadBuffer &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPowOffData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_I2C1
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxFrameHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecInfo
</UL>

<P><STRONG><a name="[176]"></a>sEE_WaitEepromStandbyState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WriteI2C1
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
</UL>

<P><STRONG><a name="[174]"></a>sEE_WritePage</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DMAConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
</UL>

<P><STRONG><a name="[175]"></a>sEE_WriteBuffer</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WriteI2C1
</UL>

<P><STRONG><a name="[b6]"></a>BSP_WriteI2C1</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPowOffData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_I2C1
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_RxFrameHandler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecInfo
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePowOffData
</UL>

<P><STRONG><a name="[177]"></a>sEE_LowLevel_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bsp_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDis
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_DeInit
</UL>

<P><STRONG><a name="[179]"></a>sEE_DeInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
</UL>

<P><STRONG><a name="[e6]"></a>BSP_EnableUsartTx</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bsp_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_Isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart5_Isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4_Isr
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Isr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[118]"></a>BSP_GPIO_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bsp_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnableUsartTx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c6]"></a>BSP_FeedDog</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[17a]"></a>BSP_DetectSD</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[17c]"></a>EXTILine6_Config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bsp_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[17f]"></a>EXTILine7_Config</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bsp_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[180]"></a>BSP_EXTI9_5_ISRHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>

<P><STRONG><a name="[119]"></a>BSP_LED_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[d0]"></a>BSP_LED_Off</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[c7]"></a>BSP_LED_On</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LED_On
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[2bc]"></a>BSP_LED_Toggle</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bsp_led.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>BSP_TIM3_ISRHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_tm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BSP_TIM3_ISRHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_tm3.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>BSP_Tm3_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bsp_tm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BSP_Tm3_Init &rArr; BSP_IntEn &rArr; CPU_IntSrcEn
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[18c]"></a>USART_DMAConfig</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_DMAConfig &rArr; USART_DMACmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[116]"></a>BSP_USART_Init</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = BSP_USART_Init &rArr; USART_DMAConfig &rArr; USART_DMACmd
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WakeUpConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetAddress
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverWakeUpCmd
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUsart
</UL>

<P><STRONG><a name="[e7]"></a>BSP_USART_TxData</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_USART_TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
</UL>

<P><STRONG><a name="[193]"></a>BSP_GetUsartTxStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
</UL>

<P><STRONG><a name="[c]"></a>Usart1_Isr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Usart1_Isr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnableUsartTx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Usart2_Isr</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Usart2_Isr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnableUsartTx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Usart3_Isr</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Usart3_Isr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnableUsartTx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Usart4_Isr</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Usart4_Isr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnableUsartTx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Usart5_Isr</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Usart5_Isr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnableUsartTx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Usart6_Isr</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Usart6_Isr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnableUsartTx
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Usart1_Dma_Isr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart1_Dma_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Usart2_Dma_Isr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart2_Dma_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Usart3_Dma_Isr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart3_Dma_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Usart4_Dma_Isr</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart4_Dma_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Usart5_Dma_Isr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart5_Dma_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Usart6_Dma_Isr</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart6_Dma_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(.text)
</UL>
<P><STRONG><a name="[2bd]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, system_stm32f2xx.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>CPU_NameClr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>

<P><STRONG><a name="[c9]"></a>CPU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = CPU_Init &rArr; CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[19a]"></a>CPU_SW_Exception</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqGet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameGet
</UL>

<P><STRONG><a name="[199]"></a>CPU_NameGet</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Copy_N
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[19c]"></a>CPU_NameSet</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len_N
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Copy_N
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[19e]"></a>CPU_TS_Get32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>

<P><STRONG><a name="[2be]"></a>CPU_TS_Update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpu_core.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>CPU_TS_TmrFreqGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SW_Exception
</UL>

<P><STRONG><a name="[123]"></a>CPU_TS_TmrFreqSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[1a1]"></a>CPU_CntLeadZeros08</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[1a3]"></a>CPU_CntLeadZeros16</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[1a4]"></a>CPU_CntLeadZeros32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[1a5]"></a>CPU_CntLeadZeros64</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros64
</UL>

<P><STRONG><a name="[1a7]"></a>CPU_CntTrailZeros08</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[1a9]"></a>CPU_CntTrailZeros16</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[1aa]"></a>CPU_CntTrailZeros32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros
</UL>

<P><STRONG><a name="[1ab]"></a>CPU_CntTrailZeros64</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cpu_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros64
</UL>

<P><STRONG><a name="[2bf]"></a>CPU_BitBandClr</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>CPU_BitBandSet</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>CPU_IntSrcDis</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDis
</UL>

<P><STRONG><a name="[128]"></a>CPU_IntSrcEn</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CPU_IntSrcEn
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntEn
</UL>

<P><STRONG><a name="[1ac]"></a>CPU_IntSrcPendClr</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[12d]"></a>CPU_IntSrcPrioSet</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RevBits
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
</UL>

<P><STRONG><a name="[1ae]"></a>CPU_IntSrcPrioGet</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_RevBits
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>

<P><STRONG><a name="[126]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDisAll
</UL>

<P><STRONG><a name="[2c1]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioGet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPendClr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameGet
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcEn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcDis
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>

<P><STRONG><a name="[12b]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioGet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPendClr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameGet
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcEn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcDis
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntPrioSet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntVectSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>

<P><STRONG><a name="[2c2]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros32
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros16
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros08
</UL>

<P><STRONG><a name="[1a8]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros32
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros16
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntTrailZeros08
</UL>

<P><STRONG><a name="[1ad]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioGet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntSrcPrioSet
</UL>

<P><STRONG><a name="[2c4]"></a>ASCII_IsAlpha</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>ASCII_IsAlphaNum</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[1cd]"></a>ASCII_IsLower</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[2c5]"></a>ASCII_IsUpper</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>ASCII_IsDig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[2c6]"></a>ASCII_IsDigOct</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>ASCII_IsDigHex</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[2c7]"></a>ASCII_IsBlank</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>ASCII_IsSpace</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[14a]"></a>ASCII_IsPrint</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdStr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32
</UL>

<P><STRONG><a name="[2c8]"></a>ASCII_IsGraph</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>ASCII_IsPunct</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>ASCII_IsCtrl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>ASCII_ToLower</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_CmpIgnoreCase_N
</UL>

<P><STRONG><a name="[1b0]"></a>ASCII_ToUpper</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_Cmp
</UL>

<P><STRONG><a name="[1af]"></a>ASCII_Cmp</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, lib_ascii.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_ToUpper
</UL>

<P><STRONG><a name="[ca]"></a>Mem_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1b1]"></a>Mem_Set</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lib_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>

<P><STRONG><a name="[196]"></a>Mem_Clr</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lib_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[1b2]"></a>Mem_Move</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, lib_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Copy
</UL>

<P><STRONG><a name="[2cb]"></a>Mem_Cmp</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, lib_mem.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>Str_Len_N</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Str_N
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Last_N
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len
</UL>

<P><STRONG><a name="[1b4]"></a>Str_Len</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len_N
</UL>

<P><STRONG><a name="[19b]"></a>Str_Copy_N</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameSet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameGet
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Copy
</UL>

<P><STRONG><a name="[1b5]"></a>Str_Copy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Copy_N
</UL>

<P><STRONG><a name="[1b7]"></a>Str_Cat_N</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cat
</UL>

<P><STRONG><a name="[1b6]"></a>Str_Cat</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cat_N
</UL>

<P><STRONG><a name="[1b9]"></a>Str_Cmp_N</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Str_N
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cmp
</UL>

<P><STRONG><a name="[1b8]"></a>Str_Cmp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cmp_N
</UL>

<P><STRONG><a name="[1ba]"></a>Str_CmpIgnoreCase_N</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_ToLower
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_CmpIgnoreCase
</UL>

<P><STRONG><a name="[1bc]"></a>Str_CmpIgnoreCase</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_CmpIgnoreCase_N
</UL>

<P><STRONG><a name="[1be]"></a>Str_Char_N</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char
</UL>

<P><STRONG><a name="[1bd]"></a>Str_Char</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_N
</UL>

<P><STRONG><a name="[1bf]"></a>Str_Char_Last_N</STRONG> (Thumb, 78 bytes, Stack size 28 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len_N
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Last
</UL>

<P><STRONG><a name="[1c0]"></a>Str_Char_Last</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Last_N
</UL>

<P><STRONG><a name="[1c2]"></a>Str_Char_Replace_N</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Replace
</UL>

<P><STRONG><a name="[1c1]"></a>Str_Char_Replace</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Char_Replace_N
</UL>

<P><STRONG><a name="[1c3]"></a>Str_Str_N</STRONG> (Thumb, 186 bytes, Stack size 52 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len_N
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Cmp_N
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Str
</UL>

<P><STRONG><a name="[1c4]"></a>Str_Str</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Str_N
</UL>

<P><STRONG><a name="[1c6]"></a>Str_FmtNbr_Int32U</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32
</UL>

<P><STRONG><a name="[1c7]"></a>Str_FmtNbr_Int32S</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32
</UL>

<P><STRONG><a name="[1ce]"></a>Str_ParseNbr_Int32U</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[1cf]"></a>Str_ParseNbr_Int32S</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32
</UL>

<P><STRONG><a name="[1b3]"></a>Mem_Copy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lib_mem_a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Move
</UL>

<P><STRONG><a name="[1d1]"></a>OS_StrLen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[1d0]"></a>OSEventNameGet</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[132]"></a>OSEventNameSet</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[1d7]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[1d2]"></a>OS_Sched</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[1d6]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[1d5]"></a>OSEventPendMulti</STRONG> (Thumb, 766 bytes, Stack size 64 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>

<P><STRONG><a name="[1d8]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[1da]"></a>OS_TaskStat</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>OS_TaskIdle</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>OS_MemClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[d9]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>OSIntEnter</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>

<P><STRONG><a name="[130]"></a>OSIntExit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandler
</UL>

<P><STRONG><a name="[1ee]"></a>OSSchedLock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1ef]"></a>OSSchedUnlock</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[db]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>OSStatInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[1f1]"></a>OSTimeTick</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; App_TimeTickHook &rArr; App_TimeTickFunc &rArr; PowOffHandler &rArr; SavePowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[2cc]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1f4]"></a>OS_EventTaskRemove</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[1f3]"></a>OS_EventTaskRdy</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[210]"></a>OS_EventTaskWait</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[20c]"></a>OS_EventWaitListInit</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[226]"></a>OS_MemCopy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[1f5]"></a>OS_TCBInit</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1f8]"></a>OSFlagAccept</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1f9]"></a>OSFlagCreate</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1fb]"></a>OS_FlagUnlink</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[1fc]"></a>OSFlagDel</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1fd]"></a>OSFlagNameGet</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[1fe]"></a>OSFlagNameSet</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ff]"></a>OSFlagPend</STRONG> (Thumb, 698 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[201]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[202]"></a>OSFlagPost</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[203]"></a>OSFlagQuery</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1e7]"></a>OS_FlagInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[204]"></a>OSMemCreate</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[205]"></a>OSMemGet</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[206]"></a>OSMemNameGet</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[207]"></a>OSMemNameSet</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[208]"></a>OSMemPut</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[209]"></a>OSMemQuery</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1e8]"></a>OS_MemInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[20a]"></a>OSQAccept</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[20b]"></a>OSQCreate</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[20d]"></a>OSQDel</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[20e]"></a>OSQFlush</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[20f]"></a>OSQPend</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[211]"></a>OSQPendAbort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[212]"></a>OSQPost</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[213]"></a>OSQPostFront</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[214]"></a>OSQPostOpt</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[215]"></a>OSQQuery</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1e9]"></a>OS_QInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[216]"></a>OSSemAccept</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[11a]"></a>OSSemCreate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemCreate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[217]"></a>OSSemDel</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[e5]"></a>OSSemPend</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[218]"></a>OSSemPendAbort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[135]"></a>OSSemPost</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_Isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart5_Isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4_Isr
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Isr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[219]"></a>OSSemQuery</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[21a]"></a>OSSemSet</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[21b]"></a>OSTaskChangePrio</STRONG> (Thumb, 452 bytes, Stack size 64 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[21c]"></a>OSTaskCreate</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[21e]"></a>OS_TaskStkClr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[c1]"></a>OSTaskCreateExt</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[21f]"></a>OSTaskDel</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[222]"></a>OSTaskDelReq</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[223]"></a>OSTaskNameGet</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[c2]"></a>OSTaskNameSet</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[224]"></a>OSTaskResume</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1d9]"></a>OSTaskStkChk</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[1db]"></a>OSTaskSuspend</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[225]"></a>OSTaskQuery</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[227]"></a>OSTaskRegGet</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[228]"></a>OSTaskRegGetID</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[229]"></a>OSTaskRegSet</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[77]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>OSTimeDly</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_TxDataHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ReadI2C1
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUsart6
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskUsart1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskI2C1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskADC
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[137]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_TimeDlyMs
</UL>

<P><STRONG><a name="[22b]"></a>OSTimeDlyResume</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[22c]"></a>OSTimeGet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[22d]"></a>OSTimeSet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[22e]"></a>OSTmrCreate</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Alloc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[230]"></a>OSTmrDel</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[233]"></a>OSTmrNameGet</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[234]"></a>OSTmrRemainGet</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[235]"></a>OSTmrStateGet</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[236]"></a>OSTmrStart</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[238]"></a>OSTmrStop</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[239]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[1ea]"></a>OSTmr_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ec]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e4]"></a>OSInitHookBegin</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1eb]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1f7]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[221]"></a>OSTaskDelHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1df]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[22a]"></a>OSTaskReturnHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1dc]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[21d]"></a>OSTaskStkInit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[78]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[1f6]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[1f2]"></a>OSTimeTickHook</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; App_TimeTickHook &rArr; App_TimeTickFunc &rArr; PowOffHandler &rArr; SavePowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1a]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; App_TimeTickHook &rArr; App_TimeTickFunc &rArr; PowOffHandler &rArr; SavePowOffData &rArr; BSP_WriteI2C1 &rArr; sEE_WriteBuffer &rArr; sEE_WritePage &rArr; sEE_LowLevel_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_TickInit
</UL>

<P><STRONG><a name="[b4]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPowOffData
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowOffHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePowOffData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[b5]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportPowOffData
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_RxFrameHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowOffHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SavePowOffData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[1f0]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1d4]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1ed]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[19]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cstartup.o(RESET)
</UL>
<P><STRONG><a name="[242]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[14f]"></a>ADC_Init</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[2cd]"></a>ADC_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>ADC_CommonInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[2ce]"></a>ADC_CommonStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[2cf]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 224 bytes, Stack size 20 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[15e]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Start
</UL>

<P><STRONG><a name="[2d4]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConfig
</UL>

<P><STRONG><a name="[159]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>

<P><STRONG><a name="[2db]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>ADC_ITConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Check_RestADC1
</UL>

<P><STRONG><a name="[fd]"></a>ADC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Check_RestADC1
</UL>

<P><STRONG><a name="[2e7]"></a>ADC_GetITStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>DMA_DeInit</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>

<P><STRONG><a name="[152]"></a>DMA_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DMAConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConfig
</UL>

<P><STRONG><a name="[2e9]"></a>DMA_StructInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Start
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_TxData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_TX_IRQHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_RX_IRQHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[2ea]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_TxData
</UL>

<P><STRONG><a name="[2ec]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetUsartTxStatus
</UL>

<P><STRONG><a name="[2f1]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_TX_IRQHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_RX_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>DMA_ClearFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_TX_IRQHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_RX_IRQHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[157]"></a>DMA_ITConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[2f2]"></a>DMA_GetITStatus</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_Dma_Isr
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart5_Dma_Isr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4_Dma_Isr
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Dma_Isr
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Dma_Isr
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Dma_Isr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC1_DMA_ISRHandler
</UL>

<P><STRONG><a name="[2f3]"></a>EXTI_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>EXTI_Init</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine7_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine6_Config
</UL>

<P><STRONG><a name="[2f4]"></a>EXTI_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>EXTI_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI9_5_ISRHandler
</UL>

<P><STRONG><a name="[182]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI9_5_ISRHandler
</UL>

<P><STRONG><a name="[2f8]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>FLASH_InstructionCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>FLASH_InstructionCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>FLASH_DataCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_EraseSectors
</UL>

<P><STRONG><a name="[f3]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteParams
</UL>

<P><STRONG><a name="[245]"></a>FLASH_GetStatus</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[244]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
</UL>

<P><STRONG><a name="[e9]"></a>FLASH_EraseSector</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_EraseSectors
</UL>

<P><STRONG><a name="[246]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[247]"></a>FLASH_ProgramDoubleWord</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[eb]"></a>FLASH_ProgramWord</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_ProgramFlash
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteParams
</UL>

<P><STRONG><a name="[248]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[249]"></a>FLASH_ProgramByte</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[ef]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
</UL>

<P><STRONG><a name="[f2]"></a>FLASH_OB_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
</UL>

<P><STRONG><a name="[f0]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_OB_WRPConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
</UL>

<P><STRONG><a name="[24a]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[24b]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2fe]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>FLASH_OB_Launch</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_OB_Launch &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
</UL>

<P><STRONG><a name="[2ff]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
</UL>

<P><STRONG><a name="[300]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>FLASH_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F205_WriteProtection
</UL>

<P><STRONG><a name="[24c]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[13e]"></a>GPIO_Init</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine7_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine6_Config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIOConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[304]"></a>GPIO_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DetectSD
</UL>

<P><STRONG><a name="[306]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>

<P><STRONG><a name="[183]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>

<P><STRONG><a name="[309]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>GPIO_ToggleBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[178]"></a>I2C_DeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f2xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
</UL>

<P><STRONG><a name="[16a]"></a>I2C_Init</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[30c]"></a>I2C_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>I2C_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[16d]"></a>I2C_GenerateSTART</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[161]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_TX_IRQHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_RX_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[171]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[30d]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>I2C_ARPCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[172]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[316]"></a>I2C_TransmitPEC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>I2C_CalculatePEC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>I2C_GetPEC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>I2C_DMACmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[173]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[31a]"></a>I2C_ReadRegister</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>I2C_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>I2C_CheckEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
</UL>

<P><STRONG><a name="[31c]"></a>I2C_GetLastEvent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f2xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_I2C_DMA_TX_IRQHandler
</UL>

<P><STRONG><a name="[31d]"></a>I2C_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>I2C_GetITStatus</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[24e]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[322]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>RCC_PLLConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>RCC_HCLKConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>RCC_PCLK1Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>

<P><STRONG><a name="[332]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine7_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine6_Config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[11e]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RNG_Read
</UL>

<P><STRONG><a name="[336]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tm3_Init
</UL>

<P><STRONG><a name="[155]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine7_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine6_Config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[24d]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[337]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[243]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[339]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>RCC_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>RCC_GetITStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[342]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f2xx_syscfg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine7_Config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTILine6_Config
</UL>

<P><STRONG><a name="[343]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[188]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tm3_Init
</UL>

<P><STRONG><a name="[346]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tm3_Init
</UL>

<P><STRONG><a name="[347]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>TIM_SetClockDivision</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>TIM_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tm3_Init
</UL>

<P><STRONG><a name="[351]"></a>TIM_OC1Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>TIM_OC2Init</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>TIM_OC3Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>TIM_OC4Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>TIM_OCStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>TIM_SelectOCxM</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>TIM_CCxCmd</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>TIM_CCxNCmd</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[258]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[256]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[254]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[252]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[374]"></a>TIM_ICStructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>TIM_PWMIConfig</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[375]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>TIM_BDTRConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>TIM_SelectCOM</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>TIM_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Tm3_Init
</UL>

<P><STRONG><a name="[37e]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>TIM_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>TIM_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM3_ISRHandler
</UL>

<P><STRONG><a name="[187]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TIM3_ISRHandler
</UL>

<P><STRONG><a name="[381]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>TIM_DMACmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[25c]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[25e]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[260]"></a>TIM_ETRConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[25f]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[261]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[385]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitUsart
</UL>

<P><STRONG><a name="[140]"></a>USART_Init</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[38b]"></a>USART_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>USART_ClockInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
</UL>

<P><STRONG><a name="[38c]"></a>USART_ClockStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>USART_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[38d]"></a>USART_SetPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[38e]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
</UL>

<P><STRONG><a name="[138]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_Isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart5_Isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4_Isr
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Isr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
</UL>

<P><STRONG><a name="[18f]"></a>USART_SetAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[192]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[190]"></a>USART_WakeUpConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[38f]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>USART_LINCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>USART_SmartCardCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>USART_IrDAConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>USART_IrDACmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>USART_DMACmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMAConfig
</UL>

<P><STRONG><a name="[13a]"></a>USART_ITConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdByteUnlocked
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByteUnlocked
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[398]"></a>USART_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>USART_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART_Init
</UL>

<P><STRONG><a name="[399]"></a>USART_GetITStatus</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart6_Isr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart5_Isr
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4_Isr
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart2_Isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Isr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_ISR_Handler
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros64
</UL>

<P><STRONG><a name="[39a]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__c89vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_InitInfo
</UL>

<P><STRONG><a name="[264]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[39b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_InitInfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_InitInfo
</UL>

<P><STRONG><a name="[39c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[39e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[268]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[269]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[26a]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[266]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[89]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[81]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[262]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[263]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[79]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[26d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[91]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[270]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[8d]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[95]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[271]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[8f]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[97]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[83]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[26c]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[26f]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[26b]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3a1]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>_printf_fp_dec_real</STRONG> (Thumb, 626 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[27c]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[99]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[9b]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[27d]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[9d]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[9f]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[26e]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[a8]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[27e]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[a3]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[27b]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[275]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ac]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3a2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3a3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[28f]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[b0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[3a4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[283]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[282]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[284]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[285]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[277]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[278]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[286]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[e1]"></a>_InitRx</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart_common.o(i._InitRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _InitRx
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetRxData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_RxDataHandler
</UL>

<P><STRONG><a name="[e0]"></a>_SetRxData</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, usart_common.o(i._SetRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _SetRxData &rArr; _InitRx
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitRx
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_RxDataHandler
</UL>

<P><STRONG><a name="[27a]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[272]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a6]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[7b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[28d]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChParams
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParams
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleValues
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalRes
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChParams
</UL>

<P><STRONG><a name="[288]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckParams
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleValues
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalRes
</UL>

<P><STRONG><a name="[28b]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChParams
</UL>

<P><STRONG><a name="[3a7]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteChParams
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParams
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleValues
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalRes
</UL>

<P><STRONG><a name="[3a8]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalRes
</UL>

<P><STRONG><a name="[28c]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[291]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckParams
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleValues
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalRes
</UL>

<P><STRONG><a name="[28e]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[28a]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[a1]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3a9]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[289]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDigitalRes
</UL>

<P><STRONG><a name="[290]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[85]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[3aa]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c0]"></a>AppTaskCreate</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = AppTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[ce]"></a>AppEventCreate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[71]"></a>AppTaskStart</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; BSP_Ser_Printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_Printf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FeedDog
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_TickInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAppParams
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChParams
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParams
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecInfo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMonitor
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppEventCreate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>BSP_IntHandlerDummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_int.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bsp_int.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>BSP_IntHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BSP_IntHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerWWDG
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSBWakeUp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART6
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART5
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART4
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART3
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerUSART1
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM8_UP_TIM13
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM8_TRG_COM_TIM14
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM8_CC
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM8_BRK_TIM12
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM7
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM6
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM5
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM4
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM3
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM2
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM1_UP
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM1_TRG_COM
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM1_CC
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTIM1_BRK
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerTAMPER
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI3
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSPI1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerSDIO
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRTCAlarm
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRTC
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerRCC
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerPVD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_HS_WKUP
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_HS_EP1_OUT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_HS_EP1_IN
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG_HS
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerOTG
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C3_EV
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C3_ER
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C2_EV
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C2_ER
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C1_EV
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerI2C1_ER
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerHASH_RNG
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerFSMC
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerFLASH
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI9_5
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI4
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI3
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI2
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI15_10
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI1
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerEXTI0
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerETHWakeup
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerETH
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_STREAM7
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_STREAM6
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_STREAM5
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_STREAM4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_STREAM3
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_STREAM2
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_STREAM1
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA2_STREAM0
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM7
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM6
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM5
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM4
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM3
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM2
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM1
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDMA1_STREAM0
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerDCMI
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCRYP
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN2_TX
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN2_SCE
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN2_RX1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN2_RX0
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN1_TX
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN1_SCE
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN1_RX1
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerCAN1_RX0
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntHandlerADC1_2
</UL>

<P><STRONG><a name="[75]"></a>BSP_Ser_ISR_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_ser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_ISR_Handler &rArr; BSP_OS_SemPost &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_ser.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>BSP_Ser_WrByteUnlocked</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_ser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = BSP_Ser_WrByteUnlocked &rArr; BSP_OS_SemWait &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrByte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdStr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_WrStr
</UL>

<P><STRONG><a name="[147]"></a>BSP_Ser_RdByteUnlocked</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_ser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_OS_SemWait
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdStr
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Ser_RdByte
</UL>

<P><STRONG><a name="[194]"></a>SetSysClock</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[197]"></a>CPU_NameInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = CPU_NameInit &rArr; CPU_NameClr &rArr; Mem_Clr &rArr; Mem_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[198]"></a>CPU_TS_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cpu_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[1c5]"></a>Str_FmtNbr_Int32</STRONG> (Thumb, 518 bytes, Stack size 104 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32S
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_FmtNbr_Int32U
</UL>

<P><STRONG><a name="[1c8]"></a>Str_ParseNbr_Int32</STRONG> (Thumb, 480 bytes, Stack size 96 bytes, lib_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsSpace
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsDigHex
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsDig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsLower
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_IsAlphaNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32S
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_ParseNbr_Int32U
</UL>

<P><STRONG><a name="[1d3]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1dd]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e0]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e1]"></a>OS_InitEventList</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e3]"></a>OS_InitTCBList</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e6]"></a>OS_InitRdyList</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e5]"></a>OS_InitMisc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1fa]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[200]"></a>OS_FlagBlock</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[22f]"></a>OSTmr_Alloc</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[232]"></a>OSTmr_Free</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[231]"></a>OSTmr_Unlink</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[237]"></a>OSTmr_Link</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[76]"></a>OSTmr_Task</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[23a]"></a>OSTmr_InitTask</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_tmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[259]"></a>TI4_Config</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[257]"></a>TI3_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[255]"></a>TI2_Config</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[253]"></a>TI1_Config</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[7a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[274]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
