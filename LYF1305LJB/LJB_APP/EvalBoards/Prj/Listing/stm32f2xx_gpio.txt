; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_gpio.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_gpio.crf ..\BSP\STM32F2xx\src\stm32f2xx_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;119      */
;;;120    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;121    {
000002  4604              MOV      r4,r0
;;;122      /* Check the parameters */
;;;123      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;124    
;;;125      if (GPIOx == GPIOA)
000004  48a1              LDR      r0,|L1.652|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L1.28|
;;;126      {
;;;127        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;128        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00001a  e05e              B        |L1.218|
                  |L1.28|
;;;129      }
;;;130      else if (GPIOx == GPIOB)
00001c  489c              LDR      r0,|L1.656|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L1.52|
;;;131      {
;;;132        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
000022  2101              MOVS     r1,#1
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;133        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000032  e052              B        |L1.218|
                  |L1.52|
;;;134      }
;;;135      else if (GPIOx == GPIOC)
000034  4897              LDR      r0,|L1.660|
000036  4284              CMP      r4,r0
000038  d108              BNE      |L1.76|
;;;136      {
;;;137        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  2004              MOVS     r0,#4
00003e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;138        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
000042  2100              MOVS     r1,#0
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00004a  e046              B        |L1.218|
                  |L1.76|
;;;139      }
;;;140      else if (GPIOx == GPIOD)
00004c  4892              LDR      r0,|L1.664|
00004e  4284              CMP      r4,r0
000050  d108              BNE      |L1.100|
;;;141      {
;;;142        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
000052  2101              MOVS     r1,#1
000054  2008              MOVS     r0,#8
000056  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;143        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
00005a  2100              MOVS     r1,#0
00005c  2008              MOVS     r0,#8
00005e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000062  e03a              B        |L1.218|
                  |L1.100|
;;;144      }
;;;145      else if (GPIOx == GPIOE)
000064  488d              LDR      r0,|L1.668|
000066  4284              CMP      r4,r0
000068  d108              BNE      |L1.124|
;;;146      {
;;;147        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  2010              MOVS     r0,#0x10
00006e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;148        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
000072  2100              MOVS     r1,#0
000074  2010              MOVS     r0,#0x10
000076  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00007a  e02e              B        |L1.218|
                  |L1.124|
;;;149      }
;;;150      else if (GPIOx == GPIOF)
00007c  4888              LDR      r0,|L1.672|
00007e  4284              CMP      r4,r0
000080  d108              BNE      |L1.148|
;;;151      {
;;;152        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
000082  2101              MOVS     r1,#1
000084  2020              MOVS     r0,#0x20
000086  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;153        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  2020              MOVS     r0,#0x20
00008e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000092  e022              B        |L1.218|
                  |L1.148|
;;;154      }
;;;155      else if (GPIOx == GPIOG)
000094  4883              LDR      r0,|L1.676|
000096  4284              CMP      r4,r0
000098  d108              BNE      |L1.172|
;;;156      {
;;;157        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  2040              MOVS     r0,#0x40
00009e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;158        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
0000a2  2100              MOVS     r1,#0
0000a4  2040              MOVS     r0,#0x40
0000a6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000aa  e016              B        |L1.218|
                  |L1.172|
;;;159      }
;;;160      else if (GPIOx == GPIOH)
0000ac  487e              LDR      r0,|L1.680|
0000ae  4284              CMP      r4,r0
0000b0  d108              BNE      |L1.196|
;;;161      {
;;;162        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
0000b2  2101              MOVS     r1,#1
0000b4  2080              MOVS     r0,#0x80
0000b6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;163        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
0000ba  2100              MOVS     r1,#0
0000bc  2080              MOVS     r0,#0x80
0000be  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000c2  e00a              B        |L1.218|
                  |L1.196|
;;;164      }
;;;165      else
;;;166      {
;;;167        if (GPIOx == GPIOI)
0000c4  4879              LDR      r0,|L1.684|
0000c6  4284              CMP      r4,r0
0000c8  d107              BNE      |L1.218|
;;;168        {
;;;169          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
0000ca  2101              MOVS     r1,#1
0000cc  1580              ASRS     r0,r0,#22
0000ce  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;170          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
0000d2  2100              MOVS     r1,#0
0000d4  15a0              ASRS     r0,r4,#22
0000d6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
                  |L1.218|
;;;171        }
;;;172      }
;;;173    }
0000da  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  GPIO_Init PROC
;;;181      */
;;;182    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
0000dc  b5f0              PUSH     {r4-r7,lr}
;;;183    {
0000de  460a              MOV      r2,r1
;;;184      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
0000e0  f04f0100          MOV      r1,#0
0000e4  460b              MOV      r3,r1
0000e6  460c              MOV      r4,r1
;;;185    
;;;186      /* Check the parameters */
;;;187      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;188      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;189      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;190      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;191    
;;;192      /* -------------------------Configure the port pins---------------- */
;;;193      /*-- GPIO Mode Configuration --*/
;;;194      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
0000e8  bf00              NOP      
0000ea  e059              B        |L1.416|
                  |L1.236|
;;;195      {
;;;196        pos = ((uint32_t)0x01) << pinpos;
0000ec  f04f0501          MOV      r5,#1
0000f0  fa05f301          LSL      r3,r5,r1
;;;197        /* Get the port pins position */
;;;198        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
0000f4  6815              LDR      r5,[r2,#0]
0000f6  ea050403          AND      r4,r5,r3
;;;199    
;;;200        if (currentpin == pos)
0000fa  429c              CMP      r4,r3
0000fc  d14e              BNE      |L1.412|
;;;201        {
;;;202          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
0000fe  6805              LDR      r5,[r0,#0]
000100  ea4f0741          LSL      r7,r1,#1
000104  f04f0603          MOV      r6,#3
000108  fa06f607          LSL      r6,r6,r7
00010c  ea250506          BIC      r5,r5,r6
000110  6005              STR      r5,[r0,#0]
;;;203          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
000112  7915              LDRB     r5,[r2,#4]
000114  ea4f0641          LSL      r6,r1,#1
000118  fa05f506          LSL      r5,r5,r6
00011c  6806              LDR      r6,[r0,#0]
00011e  ea450506          ORR      r5,r5,r6
000122  6005              STR      r5,[r0,#0]
;;;204    
;;;205          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
000124  7915              LDRB     r5,[r2,#4]
000126  2d01              CMP      r5,#1
000128  d002              BEQ      |L1.304|
00012a  7915              LDRB     r5,[r2,#4]
00012c  2d02              CMP      r5,#2
00012e  d122              BNE      |L1.374|
                  |L1.304|
;;;206          {
;;;207            /* Check Speed mode parameters */
;;;208            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;209    
;;;210            /* Speed mode configuration */
;;;211            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
000130  6885              LDR      r5,[r0,#8]
000132  ea4f0741          LSL      r7,r1,#1
000136  f04f0603          MOV      r6,#3
00013a  fa06f607          LSL      r6,r6,r7
00013e  ea250506          BIC      r5,r5,r6
000142  6085              STR      r5,[r0,#8]
;;;212            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
000144  7955              LDRB     r5,[r2,#5]
000146  ea4f0641          LSL      r6,r1,#1
00014a  fa05f506          LSL      r5,r5,r6
00014e  6886              LDR      r6,[r0,#8]
000150  ea450506          ORR      r5,r5,r6
000154  6085              STR      r5,[r0,#8]
;;;213    
;;;214            /* Check Output mode parameters */
;;;215            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;216    
;;;217            /* Output mode configuration*/
;;;218            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
000156  6845              LDR      r5,[r0,#4]
000158  f04f0601          MOV      r6,#1
00015c  fa06f601          LSL      r6,r6,r1
000160  ea250506          BIC      r5,r5,r6
000164  6045              STR      r5,[r0,#4]
;;;219            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000166  6845              LDR      r5,[r0,#4]
000168  7996              LDRB     r6,[r2,#6]
00016a  fa06f601          LSL      r6,r6,r1
00016e  b2b6              UXTH     r6,r6
000170  ea450506          ORR      r5,r5,r6
000174  6045              STR      r5,[r0,#4]
                  |L1.374|
;;;220          }
;;;221    
;;;222          /* Pull-up Pull down resistor configuration*/
;;;223          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
000176  68c5              LDR      r5,[r0,#0xc]
000178  ea4f0741          LSL      r7,r1,#1
00017c  f04f0603          MOV      r6,#3
000180  fa06f607          LSL      r6,r6,r7
000184  ea250506          BIC      r5,r5,r6
000188  60c5              STR      r5,[r0,#0xc]
;;;224          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
00018a  79d5              LDRB     r5,[r2,#7]
00018c  ea4f0641          LSL      r6,r1,#1
000190  fa05f506          LSL      r5,r5,r6
000194  68c6              LDR      r6,[r0,#0xc]
000196  ea450506          ORR      r5,r5,r6
00019a  60c5              STR      r5,[r0,#0xc]
                  |L1.412|
00019c  f1010101          ADD      r1,r1,#1              ;194
                  |L1.416|
0001a0  2910              CMP      r1,#0x10              ;194
0001a2  d3a3              BCC      |L1.236|
;;;225        }
;;;226      }
;;;227    }
0001a4  bdf0              POP      {r4-r7,pc}
;;;228    
                          ENDP

                  GPIO_StructInit PROC
;;;233      */
;;;234    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
0001a6  f64f71ff          MOV      r1,#0xffff
;;;235    {
;;;236      /* Reset GPIO init structure parameters values */
;;;237      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
0001aa  6001              STR      r1,[r0,#0]
;;;238      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
0001ac  f04f0100          MOV      r1,#0
0001b0  7101              STRB     r1,[r0,#4]
;;;239      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
0001b2  7141              STRB     r1,[r0,#5]
;;;240      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
0001b4  7181              STRB     r1,[r0,#6]
;;;241      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
0001b6  71c1              STRB     r1,[r0,#7]
;;;242    }
0001b8  4770              BX       lr
;;;243    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;254      */
;;;255    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001ba  f44f3280          MOV      r2,#0x10000
;;;256    {
;;;257      __IO uint32_t tmp = 0x00010000;
;;;258    
;;;259      /* Check the parameters */
;;;260      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;261      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;262    
;;;263      tmp |= GPIO_Pin;
0001be  ea420201          ORR      r2,r2,r1
;;;264      /* Set LCKK bit */
;;;265      GPIOx->LCKR = tmp;
0001c2  61c2              STR      r2,[r0,#0x1c]
;;;266      /* Reset LCKK bit */
;;;267      GPIOx->LCKR =  GPIO_Pin;
0001c4  61c1              STR      r1,[r0,#0x1c]
;;;268      /* Set LCKK bit */
;;;269      GPIOx->LCKR = tmp;
0001c6  61c2              STR      r2,[r0,#0x1c]
;;;270      /* Read LCKK bit*/
;;;271      tmp = GPIOx->LCKR;
0001c8  69c2              LDR      r2,[r0,#0x1c]
;;;272      /* Read LCKK bit*/
;;;273      tmp = GPIOx->LCKR;
0001ca  69c2              LDR      r2,[r0,#0x1c]
;;;274    }
0001cc  4770              BX       lr
;;;275    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;298      */
;;;299    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001ce  4602              MOV      r2,r0
;;;300    {
;;;301      uint8_t bitstatus = 0x00;
0001d0  f04f0000          MOV      r0,#0
;;;302    
;;;303      /* Check the parameters */
;;;304      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;305      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;306    
;;;307      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
0001d4  6913              LDR      r3,[r2,#0x10]
0001d6  420b              TST      r3,r1
0001d8  d002              BEQ      |L1.480|
;;;308      {
;;;309        bitstatus = (uint8_t)Bit_SET;
0001da  f04f0001          MOV      r0,#1
0001de  e001              B        |L1.484|
                  |L1.480|
;;;310      }
;;;311      else
;;;312      {
;;;313        bitstatus = (uint8_t)Bit_RESET;
0001e0  f04f0000          MOV      r0,#0
                  |L1.484|
;;;314      }
;;;315      return bitstatus;
;;;316    }
0001e4  4770              BX       lr
;;;317    
                          ENDP

                  GPIO_ReadInputData PROC
;;;322      */
;;;323    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
0001e6  4601              MOV      r1,r0
;;;324    {
;;;325      /* Check the parameters */
;;;326      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;327    
;;;328      return ((uint16_t)GPIOx->IDR);
0001e8  6908              LDR      r0,[r1,#0x10]
0001ea  b280              UXTH     r0,r0
;;;329    }
0001ec  4770              BX       lr
;;;330    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;337      */
;;;338    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001ee  4602              MOV      r2,r0
;;;339    {
;;;340      uint8_t bitstatus = 0x00;
0001f0  f04f0000          MOV      r0,#0
;;;341    
;;;342      /* Check the parameters */
;;;343      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;344      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;345    
;;;346      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
0001f4  6953              LDR      r3,[r2,#0x14]
0001f6  420b              TST      r3,r1
0001f8  d002              BEQ      |L1.512|
;;;347      {
;;;348        bitstatus = (uint8_t)Bit_SET;
0001fa  f04f0001          MOV      r0,#1
0001fe  e001              B        |L1.516|
                  |L1.512|
;;;349      }
;;;350      else
;;;351      {
;;;352        bitstatus = (uint8_t)Bit_RESET;
000200  f04f0000          MOV      r0,#0
                  |L1.516|
;;;353      }
;;;354      return bitstatus;
;;;355    }
000204  4770              BX       lr
;;;356    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;361      */
;;;362    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000206  4601              MOV      r1,r0
;;;363    {
;;;364      /* Check the parameters */
;;;365      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;366    
;;;367      return ((uint16_t)GPIOx->ODR);
000208  6948              LDR      r0,[r1,#0x14]
00020a  b280              UXTH     r0,r0
;;;368    }
00020c  4770              BX       lr
;;;369    
                          ENDP

                  GPIO_SetBits PROC
;;;379      */
;;;380    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00020e  8301              STRH     r1,[r0,#0x18]
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;384      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;385    
;;;386      GPIOx->BSRRL = GPIO_Pin;
;;;387    }
000210  4770              BX       lr
;;;388    
                          ENDP

                  GPIO_ResetBits PROC
;;;398      */
;;;399    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000212  8341              STRH     r1,[r0,#0x1a]
;;;400    {
;;;401      /* Check the parameters */
;;;402      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;403      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;404    
;;;405      GPIOx->BSRRH = GPIO_Pin;
;;;406    }
000214  4770              BX       lr
;;;407    
                          ENDP

                  GPIO_WriteBit PROC
;;;418      */
;;;419    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000216  b10a              CBZ      r2,|L1.540|
;;;420    {
;;;421      /* Check the parameters */
;;;422      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;423      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;424      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;425    
;;;426      if (BitVal != Bit_RESET)
;;;427      {
;;;428        GPIOx->BSRRL = GPIO_Pin;
000218  8301              STRH     r1,[r0,#0x18]
00021a  e000              B        |L1.542|
                  |L1.540|
;;;429      }
;;;430      else
;;;431      {
;;;432        GPIOx->BSRRH = GPIO_Pin ;
00021c  8341              STRH     r1,[r0,#0x1a]
                  |L1.542|
;;;433      }
;;;434    }
00021e  4770              BX       lr
;;;435    
                          ENDP

                  GPIO_Write PROC
;;;441      */
;;;442    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000220  6141              STR      r1,[r0,#0x14]
;;;443    {
;;;444      /* Check the parameters */
;;;445      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;446    
;;;447      GPIOx->ODR = PortVal;
;;;448    }
000222  4770              BX       lr
;;;449    
                          ENDP

                  GPIO_ToggleBits PROC
;;;455      */
;;;456    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000224  6942              LDR      r2,[r0,#0x14]
;;;457    {
;;;458      /* Check the parameters */
;;;459      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;460    
;;;461      GPIOx->ODR ^= GPIO_Pin;
000226  ea820201          EOR      r2,r2,r1
00022a  6142              STR      r2,[r0,#0x14]
;;;462    }
00022c  4770              BX       lr
;;;463    
                          ENDP

                  GPIO_PinAFConfig PROC
;;;527      */
;;;528    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
00022e  b5f0              PUSH     {r4-r7,lr}
;;;529    {
;;;530      uint32_t temp = 0x00;
000230  f04f0300          MOV      r3,#0
;;;531      uint32_t temp_2 = 0x00;
000234  461c              MOV      r4,r3
;;;532      
;;;533      /* Check the parameters */
;;;534      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;535      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;536      assert_param(IS_GPIO_AF(GPIO_AF));
;;;537      
;;;538      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000236  ea4f7541          LSL      r5,r1,#29
00023a  ea4f65d5          LSR      r5,r5,#27
00023e  fa02f305          LSL      r3,r2,r5
;;;539      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000242  ea4f06e1          ASR      r6,r1,#3
000246  f1000520          ADD      r5,r0,#0x20
00024a  f8555026          LDR      r5,[r5,r6,LSL #2]
00024e  ea4f7641          LSL      r6,r1,#29
000252  ea4f67d6          LSR      r7,r6,#27
000256  f04f060f          MOV      r6,#0xf
00025a  fa06f607          LSL      r6,r6,r7
00025e  ea250506          BIC      r5,r5,r6
000262  ea4f07e1          ASR      r7,r1,#3
000266  f1000620          ADD      r6,r0,#0x20
00026a  f8465027          STR      r5,[r6,r7,LSL #2]
;;;540      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
00026e  ea4f06e1          ASR      r6,r1,#3
000272  f1000520          ADD      r5,r0,#0x20
000276  f8555026          LDR      r5,[r5,r6,LSL #2]
00027a  ea450403          ORR      r4,r5,r3
;;;541      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00027e  ea4f06e1          ASR      r6,r1,#3
000282  f1000520          ADD      r5,r0,#0x20
000286  f8454026          STR      r4,[r5,r6,LSL #2]
;;;542    }
00028a  bdf0              POP      {r4-r7,pc}
;;;543    
                          ENDP

                  |L1.652|
                          DCD      0x40020000
                  |L1.656|
                          DCD      0x40020400
                  |L1.660|
                          DCD      0x40020800
                  |L1.664|
                          DCD      0x40020c00
                  |L1.668|
                          DCD      0x40021000
                  |L1.672|
                          DCD      0x40021400
                  |L1.676|
                          DCD      0x40021800
                  |L1.680|
                          DCD      0x40021c00
                  |L1.684|
                          DCD      0x40022000

;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_gpio.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f2xx_gpio_c_f8e8e39a____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___16_stm32f2xx_gpio_c_f8e8e39a____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f2xx_gpio_c_f8e8e39a____REVSH|
#line 130
|__asm___16_stm32f2xx_gpio_c_f8e8e39a____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
