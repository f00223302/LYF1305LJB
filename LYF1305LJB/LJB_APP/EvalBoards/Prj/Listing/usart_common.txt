; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\usart_common.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\usart_common.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\usart_common.crf ..\App\Usart_Common.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Usart_InitInfo PROC
;;;65     ////////////////////////////////////////////////////////////////////////
;;;66     void Usart_InitInfo(void)
000000  f04f0000          MOV      r0,#0
;;;67     {
;;;68     	uint8_t i;
;;;69     	
;;;70     	for (i = 0; i < COMn; i++){
000004  e00b              B        |L1.30|
                  |L1.6|
;;;71     		
;;;72     		__StartF[i] = 0;
000006  f04f0100          MOV      r1,#0
00000a  4ad0              LDR      r2,|L1.844|
00000c  5411              STRB     r1,[r2,r0]
;;;73     		__DLE[i] = 0;
00000e  4ad0              LDR      r2,|L1.848|
000010  5411              STRB     r1,[r2,r0]
;;;74     		__RxLen[i] = 0;
000012  4ad0              LDR      r2,|L1.852|
000014  f8221010          STRH     r1,[r2,r0,LSL #1]
000018  f1000101          ADD      r1,r0,#1              ;70
00001c  b2c8              UXTB     r0,r1                 ;70
                  |L1.30|
00001e  2806              CMP      r0,#6                 ;70
000020  dbf1              BLT      |L1.6|
;;;75     	}
;;;76     }
000022  4770              BX       lr
;;;77     
                          ENDP

                  _ErrHandler PROC
;;;308    
;;;309    void _ErrHandler(uint8_t COM, uint8_t Err, DATA_STRUCT *Info)
000024  4770              BX       lr
;;;310    {
;;;311    	
;;;312    }
;;;313    
                          ENDP

                  _CheckRxFrame PROC
;;;273    
;;;274    uint8_t _CheckRxFrame(uint8_t COM, DATA_STRUCT *Info)
000026  e92d41f0          PUSH     {r4-r8,lr}
;;;275    {
00002a  4680              MOV      r8,r0
00002c  460c              MOV      r4,r1
;;;276    	uint16_t crc, len;
;;;277    	uint8_t *p;
;;;278    
;;;279    	len = Info->len[1] + ((uint16_t)Info->len[0] << 8);
00002e  7860              LDRB     r0,[r4,#1]
000030  7821              LDRB     r1,[r4,#0]
000032  eb002001          ADD      r0,r0,r1,LSL #8
000036  b285              UXTH     r5,r0
;;;280    	if (__RxLen[COM] != len + 2)
000038  48c6              LDR      r0,|L1.852|
00003a  f8301018          LDRH     r1,[r0,r8,LSL #1]
00003e  f1050002          ADD      r0,r5,#2
000042  4281              CMP      r1,r0
000044  d002              BEQ      |L1.76|
;;;281    		return 3;
000046  2003              MOVS     r0,#3
                  |L1.72|
;;;282    	
;;;283    	p = &(Info->len[0]);
;;;284    	crc = Calc_CRCByte(p, 8);
;;;285    	p = Info->data;
;;;286    	crc = Calc_CRCByte_Continue(p, len - 8, crc);
;;;287    	if ((p[len - 8] != (crc >> 8)) || (p[len - 8 + 1] != (crc & 0xff)))
;;;288    		return 4;
;;;289    
;;;290    	return 0;
;;;291    }
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L1.76|
00004c  4626              MOV      r6,r4                 ;283
00004e  f04f0108          MOV      r1,#8                 ;284
000052  4630              MOV      r0,r6                 ;284
000054  f7fffffe          BL       Calc_CRCByte
000058  4607              MOV      r7,r0                 ;284
00005a  68a6              LDR      r6,[r4,#8]            ;285
00005c  f1a50008          SUB      r0,r5,#8              ;286
000060  b281              UXTH     r1,r0                 ;286
000062  463a              MOV      r2,r7                 ;286
000064  4630              MOV      r0,r6                 ;286
000066  f7fffffe          BL       Calc_CRCByte_Continue
00006a  4607              MOV      r7,r0                 ;286
00006c  f1a50008          SUB      r0,r5,#8              ;287
000070  5c30              LDRB     r0,[r6,r0]            ;287
000072  ebb02f27          CMP      r0,r7,ASR #8          ;287
000076  d104              BNE      |L1.130|
000078  1fe8              SUBS     r0,r5,#7              ;287
00007a  5c30              LDRB     r0,[r6,r0]            ;287
00007c  b2f9              UXTB     r1,r7                 ;287
00007e  4288              CMP      r0,r1                 ;287
000080  d001              BEQ      |L1.134|
                  |L1.130|
000082  2004              MOVS     r0,#4                 ;288
000084  e7e0              B        |L1.72|
                  |L1.134|
000086  2000              MOVS     r0,#0                 ;290
000088  e7de              B        |L1.72|
;;;292    
                          ENDP

                  Usart_RxDataHandler PROC
;;;77     
;;;78     uint8_t Usart_RxDataHandler(uint8_t COM, DATA_STRUCT *Info)
00008a  e92d47f0          PUSH     {r4-r10,lr}
;;;79     {
00008e  4604              MOV      r4,r0
000090  460f              MOV      r7,r1
;;;80     	uint16_t Index1, Index2;
;;;81     	uint8_t ch, err, *p;
;;;82     
;;;83     	Index1 = BSP_Info.UsartRxIndex[COM];
000092  48b1              LDR      r0,|L1.856|
000094  f8309014          LDRH     r9,[r0,r4,LSL #1]
;;;84     	Index2 = AppInfo.UsartRxHandleIndex[COM];
000098  48b0              LDR      r0,|L1.860|
00009a  f8306014          LDRH     r6,[r0,r4,LSL #1]
;;;85     
;;;86     	if (Index1 == Index2)
00009e  45b1              CMP      r9,r6
0000a0  d102              BNE      |L1.168|
;;;87     		return 0;
0000a2  2000              MOVS     r0,#0
                  |L1.164|
;;;88     	
;;;89     	if (Info->data == NULL)
;;;90     		return 2;
;;;91     	
;;;92     	p = BSP_Info.UsartRxBuf[COM];
;;;93     	
;;;94     	while (Index1 != Index2){
;;;95     
;;;96       		AppInfo.UsartNoDataCnt[COM] = 0;
;;;97     
;;;98     		ch = p[Index2++];
;;;99     		Index2 &= BSP_Info.UsartRxBufMask[COM];
;;;100    
;;;101    		if (__StartF[COM]){
;;;102    
;;;103    			if (ch == 0x10){
;;;104    
;;;105    				if (!__DLE[COM])
;;;106    					__DLE[COM] = 0x10;
;;;107    				else{
;;;108    
;;;109    					_SetRxData(COM, ch, Info);
;;;110    					__DLE[COM] = 0;
;;;111    				}
;;;112    			}
;;;113    			else if (__DLE[COM] == 0x10){
;;;114    
;;;115    				switch (ch){
;;;116    
;;;117    					case 0x02:
;;;118    						_InitRx(COM, 1, Info);
;;;119    						break;
;;;120    
;;;121    					case 0x03:
;;;122    						//接收完整帧
;;;123    						err = _CheckRxFrame(COM, Info);
;;;124    						if (!err){
;;;125    
;;;126    							if (AppInfo.UsartRxFlag[COM] < 2)
;;;127    								AppInfo.UsartRxFlag[COM]++;
;;;128    							///处理数据帧
;;;129    							(*Usart_RxFrameHandler[COM])(Info);
;;;130    							_InitRx(COM, 0, Info);
;;;131    							goto _Final_Handle;
;;;132    						}
;;;133    						else
;;;134    							_ErrHandler(COM, err, Info);
;;;135    
;;;136    						_InitRx(COM, 0, Info);
;;;137    						break;
;;;138    					default:
;;;139    						_SetRxData(COM, ch, Info);
;;;140    						break;
;;;141    				}
;;;142    					
;;;143    				__DLE[COM] = 0;
;;;144    			}
;;;145    			else
;;;146    				_SetRxData(COM, ch, Info);
;;;147    		}
;;;148    		else{
;;;149    			if (ch == 0x10)
;;;150    				__DLE[COM] = 0x10;
;;;151    			else{
;;;152    				if ((ch == 0x02) && (__DLE[COM] == 0x10))
;;;153    					_InitRx(COM, 1, Info);
;;;154    				else
;;;155    					__DLE[COM] = 0;
;;;156    			}
;;;157    		}
;;;158    	}
;;;159    
;;;160    _Final_Handle:	
;;;161    	AppInfo.UsartRxHandleIndex[COM] = Index2;
;;;162    	
;;;163    	return 0;
;;;164    }
0000a4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.168|
0000a8  68b8              LDR      r0,[r7,#8]            ;89
0000aa  b908              CBNZ     r0,|L1.176|
0000ac  2002              MOVS     r0,#2                 ;90
0000ae  e7f9              B        |L1.164|
                  |L1.176|
0000b0  48a9              LDR      r0,|L1.856|
0000b2  3830              SUBS     r0,r0,#0x30           ;92
0000b4  f850a024          LDR      r10,[r0,r4,LSL #2]    ;92
0000b8  e08e              B        |L1.472|
                  |L1.186|
0000ba  f04f0100          MOV      r1,#0                 ;96
0000be  48a7              LDR      r0,|L1.860|
0000c0  f1000030          ADD      r0,r0,#0x30           ;96
0000c4  f8401024          STR      r1,[r0,r4,LSL #2]     ;96
0000c8  4630              MOV      r0,r6                 ;98
0000ca  f1060101          ADD      r1,r6,#1              ;98
0000ce  b28e              UXTH     r6,r1                 ;98
0000d0  f81a5000          LDRB     r5,[r10,r0]           ;98
0000d4  48a0              LDR      r0,|L1.856|
0000d6  f1000018          ADD      r0,r0,#0x18           ;99
0000da  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;99
0000de  ea000606          AND      r6,r0,r6              ;99
0000e2  489a              LDR      r0,|L1.844|
0000e4  5d00              LDRB     r0,[r0,r4]            ;101
0000e6  2800              CMP      r0,#0                 ;101
0000e8  d060              BEQ      |L1.428|
0000ea  2d10              CMP      r5,#0x10              ;103
0000ec  d110              BNE      |L1.272|
0000ee  4898              LDR      r0,|L1.848|
0000f0  5d00              LDRB     r0,[r0,r4]            ;105
0000f2  b918              CBNZ     r0,|L1.252|
0000f4  4628              MOV      r0,r5                 ;106
0000f6  4996              LDR      r1,|L1.848|
0000f8  5508              STRB     r0,[r1,r4]            ;106
0000fa  e06d              B        |L1.472|
                  |L1.252|
0000fc  463a              MOV      r2,r7                 ;109
0000fe  4629              MOV      r1,r5                 ;109
000100  4620              MOV      r0,r4                 ;109
000102  f7fffffe          BL       _SetRxData
000106  f04f0000          MOV      r0,#0                 ;110
00010a  4991              LDR      r1,|L1.848|
00010c  5508              STRB     r0,[r1,r4]            ;110
00010e  e063              B        |L1.472|
                  |L1.272|
000110  488f              LDR      r0,|L1.848|
000112  5d00              LDRB     r0,[r0,r4]            ;113
000114  2810              CMP      r0,#0x10              ;113
000116  d143              BNE      |L1.416|
000118  2d02              CMP      r5,#2                 ;115
00011a  d002              BEQ      |L1.290|
00011c  2d03              CMP      r5,#3                 ;115
00011e  d133              BNE      |L1.392|
000120  e005              B        |L1.302|
                  |L1.290|
000122  463a              MOV      r2,r7                 ;118
000124  2101              MOVS     r1,#1                 ;118
000126  4620              MOV      r0,r4                 ;118
000128  f7fffffe          BL       _InitRx
00012c  e032              B        |L1.404|
                  |L1.302|
00012e  4639              MOV      r1,r7                 ;123
000130  4620              MOV      r0,r4                 ;123
000132  f7fffffe          BL       _CheckRxFrame
000136  4680              MOV      r8,r0                 ;123
000138  f1b80f00          CMP      r8,#0                 ;124
00013c  d119              BNE      |L1.370|
00013e  4887              LDR      r0,|L1.860|
000140  3850              SUBS     r0,r0,#0x50           ;126
000142  5d00              LDRB     r0,[r0,r4]            ;126
000144  2802              CMP      r0,#2                 ;126
000146  da09              BGE      |L1.348|
000148  4884              LDR      r0,|L1.860|
00014a  3850              SUBS     r0,r0,#0x50           ;127
00014c  5d00              LDRB     r0,[r0,r4]            ;127
00014e  f1000001          ADD      r0,r0,#1              ;127
000152  b2c1              UXTB     r1,r0                 ;127
000154  4881              LDR      r0,|L1.860|
000156  f1a00050          SUB      r0,r0,#0x50           ;127
00015a  5501              STRB     r1,[r0,r4]            ;127
                  |L1.348|
00015c  4880              LDR      r0,|L1.864|
00015e  f8501024          LDR      r1,[r0,r4,LSL #2]     ;129
000162  4638              MOV      r0,r7                 ;129
000164  4788              BLX      r1                    ;129
000166  463a              MOV      r2,r7                 ;130
000168  2100              MOVS     r1,#0                 ;130
00016a  4620              MOV      r0,r4                 ;130
00016c  f7fffffe          BL       _InitRx
000170  e036              B        |L1.480|
                  |L1.370|
000172  463a              MOV      r2,r7                 ;134
000174  4641              MOV      r1,r8                 ;134
000176  4620              MOV      r0,r4                 ;134
000178  f7fffffe          BL       _ErrHandler
00017c  463a              MOV      r2,r7                 ;136
00017e  2100              MOVS     r1,#0                 ;136
000180  4620              MOV      r0,r4                 ;136
000182  f7fffffe          BL       _InitRx
000186  e005              B        |L1.404|
                  |L1.392|
000188  463a              MOV      r2,r7                 ;139
00018a  4629              MOV      r1,r5                 ;139
00018c  4620              MOV      r0,r4                 ;139
00018e  f7fffffe          BL       _SetRxData
000192  bf00              NOP                            ;140
                  |L1.404|
000194  bf00              NOP                            ;119
000196  f04f0000          MOV      r0,#0                 ;143
00019a  496d              LDR      r1,|L1.848|
00019c  5508              STRB     r0,[r1,r4]            ;143
00019e  e01b              B        |L1.472|
                  |L1.416|
0001a0  463a              MOV      r2,r7                 ;146
0001a2  4629              MOV      r1,r5                 ;146
0001a4  4620              MOV      r0,r4                 ;146
0001a6  f7fffffe          BL       _SetRxData
0001aa  e015              B        |L1.472|
                  |L1.428|
0001ac  2d10              CMP      r5,#0x10              ;149
0001ae  d103              BNE      |L1.440|
0001b0  4628              MOV      r0,r5                 ;150
0001b2  4967              LDR      r1,|L1.848|
0001b4  5508              STRB     r0,[r1,r4]            ;150
0001b6  e00f              B        |L1.472|
                  |L1.440|
0001b8  2d02              CMP      r5,#2                 ;152
0001ba  d109              BNE      |L1.464|
0001bc  4864              LDR      r0,|L1.848|
0001be  5d00              LDRB     r0,[r0,r4]            ;152
0001c0  2810              CMP      r0,#0x10              ;152
0001c2  d105              BNE      |L1.464|
0001c4  463a              MOV      r2,r7                 ;153
0001c6  2101              MOVS     r1,#1                 ;153
0001c8  4620              MOV      r0,r4                 ;153
0001ca  f7fffffe          BL       _InitRx
0001ce  e003              B        |L1.472|
                  |L1.464|
0001d0  f04f0000          MOV      r0,#0                 ;155
0001d4  495e              LDR      r1,|L1.848|
0001d6  5508              STRB     r0,[r1,r4]            ;155
                  |L1.472|
0001d8  45b1              CMP      r9,r6                 ;94
0001da  f47faf6e          BNE      |L1.186|
0001de  bf00              NOP                            ;160
                  |L1.480|
0001e0  485e              LDR      r0,|L1.860|
0001e2  f8206014          STRH     r6,[r0,r4,LSL #1]     ;161
0001e6  2000              MOVS     r0,#0                 ;163
0001e8  e75c              B        |L1.164|
;;;165    
                          ENDP

                  _PrepareTxData PROC
;;;315    
;;;316    uint16_t _PrepareTxData(uint8_t COM, DATA_STRUCT *Info)
0001ea  e92d5ff0          PUSH     {r4-r12,lr}
;;;317    {
0001ee  4683              MOV      r11,r0
0001f0  460c              MOV      r4,r1
;;;318    	uint16_t i, j, crc, len;
;;;319    	uint8_t *p, *p2;
;;;320    
;;;321    	p = BSP_Info.UsartTxBuf[COM];
0001f2  4859              LDR      r0,|L1.856|
0001f4  f1a00018          SUB      r0,r0,#0x18
0001f8  f850602b          LDR      r6,[r0,r11,LSL #2]
;;;322    	
;;;323    	p2 = (uint8_t *)&(Info->len[0]);
0001fc  4627              MOV      r7,r4
;;;324    	len = Info->len[1] + ((uint16_t)Info->len[0] << 8);
0001fe  7860              LDRB     r0,[r4,#1]
000200  7821              LDRB     r1,[r4,#0]
000202  eb002001          ADD      r0,r0,r1,LSL #8
000206  fa1ff980          UXTH     r9,r0
;;;325    	crc = Calc_CRCByte(p2, 8);
00020a  f04f0108          MOV      r1,#8
00020e  4638              MOV      r0,r7
000210  f7fffffe          BL       Calc_CRCByte
000214  4682              MOV      r10,r0
;;;326    	p2 = Info->data;
000216  68a7              LDR      r7,[r4,#8]
;;;327    	crc = Calc_CRCByte_Continue(p2, len - 8, crc);
000218  f1a90008          SUB      r0,r9,#8
00021c  b281              UXTH     r1,r0
00021e  4652              MOV      r2,r10
000220  4638              MOV      r0,r7
000222  f7fffffe          BL       Calc_CRCByte_Continue
000226  4682              MOV      r10,r0
;;;328    	Info->data[len - 8] = crc >> 8;
000228  ea4f212a          ASR      r1,r10,#8
00022c  f1a90008          SUB      r0,r9,#8
000230  68a2              LDR      r2,[r4,#8]
000232  5411              STRB     r1,[r2,r0]
;;;329    	Info->data[len - 8 + 1] = crc & 0xff;
000234  f1a90007          SUB      r0,r9,#7
000238  68a2              LDR      r2,[r4,#8]
00023a  f802a000          STRB     r10,[r2,r0]
;;;330    
;;;331    	p[0] = 0x10;
00023e  f04f0010          MOV      r0,#0x10
000242  7030              STRB     r0,[r6,#0]
;;;332    	p[1] = 0x02;
000244  f04f0002          MOV      r0,#2
000248  7070              STRB     r0,[r6,#1]
;;;333    	j = 2;
00024a  4680              MOV      r8,r0
;;;334    	p2 = (uint8_t *)&(Info->len[0]);
00024c  4627              MOV      r7,r4
;;;335    	for (i = 0; i < 8; i++){
00024e  f04f0500          MOV      r5,#0
000252  e013              B        |L1.636|
                  |L1.596|
;;;336    
;;;337    		p[j++] = p2[i];
000254  5d7a              LDRB     r2,[r7,r5]
000256  4640              MOV      r0,r8
000258  f1080101          ADD      r1,r8,#1
00025c  fa1ff881          UXTH     r8,r1
000260  5432              STRB     r2,[r6,r0]
;;;338    		if (p2[i] == 0x10)
000262  5d78              LDRB     r0,[r7,r5]
000264  2810              CMP      r0,#0x10
000266  d106              BNE      |L1.630|
;;;339    			p[j++] = 0x10;
000268  4602              MOV      r2,r0
00026a  4640              MOV      r0,r8
00026c  f1080101          ADD      r1,r8,#1
000270  fa1ff881          UXTH     r8,r1
000274  5432              STRB     r2,[r6,r0]
                  |L1.630|
000276  f1050001          ADD      r0,r5,#1              ;335
00027a  b285              UXTH     r5,r0                 ;335
                  |L1.636|
00027c  2d08              CMP      r5,#8                 ;335
00027e  dbe9              BLT      |L1.596|
;;;340    	}
;;;341    	p2 = Info->data;
000280  68a7              LDR      r7,[r4,#8]
;;;342    	for (i = 0; i < len - 8 + 2; i++){
000282  f04f0500          MOV      r5,#0
000286  e013              B        |L1.688|
                  |L1.648|
;;;343    
;;;344    		p[j++] = p2[i];
000288  5d7a              LDRB     r2,[r7,r5]
00028a  4640              MOV      r0,r8
00028c  f1080101          ADD      r1,r8,#1
000290  fa1ff881          UXTH     r8,r1
000294  5432              STRB     r2,[r6,r0]
;;;345    		if (p2[i] == 0x10)
000296  5d78              LDRB     r0,[r7,r5]
000298  2810              CMP      r0,#0x10
00029a  d106              BNE      |L1.682|
;;;346    			p[j++] = 0x10;
00029c  4602              MOV      r2,r0
00029e  4640              MOV      r0,r8
0002a0  f1080101          ADD      r1,r8,#1
0002a4  fa1ff881          UXTH     r8,r1
0002a8  5432              STRB     r2,[r6,r0]
                  |L1.682|
0002aa  f1050001          ADD      r0,r5,#1              ;342
0002ae  b285              UXTH     r5,r0                 ;342
                  |L1.688|
0002b0  f1a90006          SUB      r0,r9,#6              ;342
0002b4  42a8              CMP      r0,r5                 ;342
0002b6  dce7              BGT      |L1.648|
;;;347    	}
;;;348    
;;;349    	p[j++] = 0x10;
0002b8  f04f0210          MOV      r2,#0x10
0002bc  4640              MOV      r0,r8
0002be  f1080101          ADD      r1,r8,#1
0002c2  fa1ff881          UXTH     r8,r1
0002c6  5432              STRB     r2,[r6,r0]
;;;350    	p[j++] = 0x03;
0002c8  f04f0203          MOV      r2,#3
0002cc  4640              MOV      r0,r8
0002ce  f1080101          ADD      r1,r8,#1
0002d2  fa1ff881          UXTH     r8,r1
0002d6  5432              STRB     r2,[r6,r0]
;;;351    
;;;352    	return j;
0002d8  4640              MOV      r0,r8
;;;353    }
0002da  e8bd9ff0          POP      {r4-r12,pc}
;;;354    
                          ENDP

                  Usart_TxDataHandler PROC
;;;166    
;;;167    uint8_t Usart_TxDataHandler(uint8_t COM, DATA_STRUCT *Info)
0002de  b5f8              PUSH     {r3-r7,lr}
;;;168    {
0002e0  4604              MOV      r4,r0
0002e2  460d              MOV      r5,r1
;;;169    	uint16_t DataLen;
;;;170    	uint8_t err;
;;;171    	
;;;172    	OSSemPend(Sem_UsartTxRdy[COM], _USART_TIME_OUT[COM], &err);
0002e4  4a1f              LDR      r2,|L1.868|
0002e6  f8521024          LDR      r1,[r2,r4,LSL #2]
0002ea  4a1f              LDR      r2,|L1.872|
0002ec  f8520024          LDR      r0,[r2,r4,LSL #2]
0002f0  466a              MOV      r2,sp
0002f2  f7fffffe          BL       OSSemPend
;;;173    
;;;174    	///错误发生：
;;;175    	if (err)
0002f6  f89d0000          LDRB     r0,[sp,#0]
0002fa  b108              CBZ      r0,|L1.768|
;;;176    		return 1;
0002fc  2001              MOVS     r0,#1
                  |L1.766|
;;;177    	
;;;178    	if (Info->data == NULL)
;;;179    		return 2;
;;;180    
;;;181    	///允许发送：为减少等待时间，提前允许
;;;182    	BSP_EnableUsartTx((COM_TypeDef)COM, ENABLE);
;;;183    
;;;184    	///Added by zhanggong 20140324
;;;185    	OSTimeDly(2);
;;;186    
;;;187    	if (AppInfo.UsartTxFlag[COM] < 2)
;;;188    	{
;;;189    		AppInfo.UsartTxFlag[COM]++;
;;;190    	}
;;;191    
;;;192    	DataLen = _PrepareTxData(COM, Info);
;;;193    
;;;194    	///Enable USART Tx DMA:
;;;195    	BSP_USART_TxData((COM_TypeDef)COM, DataLen);
;;;196    	
;;;197    	return 0;
;;;198    }
0002fe  bdf8              POP      {r3-r7,pc}
                  |L1.768|
000300  68a8              LDR      r0,[r5,#8]            ;178
000302  b908              CBNZ     r0,|L1.776|
000304  2002              MOVS     r0,#2                 ;179
000306  e7fa              B        |L1.766|
                  |L1.776|
000308  2101              MOVS     r1,#1                 ;182
00030a  4620              MOV      r0,r4                 ;182
00030c  f7fffffe          BL       BSP_EnableUsartTx
000310  2002              MOVS     r0,#2                 ;185
000312  f7fffffe          BL       OSTimeDly
000316  4811              LDR      r0,|L1.860|
000318  384a              SUBS     r0,r0,#0x4a           ;187
00031a  5d00              LDRB     r0,[r0,r4]            ;187
00031c  2802              CMP      r0,#2                 ;187
00031e  da09              BGE      |L1.820|
000320  480e              LDR      r0,|L1.860|
000322  384a              SUBS     r0,r0,#0x4a           ;189
000324  5d00              LDRB     r0,[r0,r4]            ;189
000326  f1000001          ADD      r0,r0,#1              ;189
00032a  b2c1              UXTB     r1,r0                 ;189
00032c  480b              LDR      r0,|L1.860|
00032e  f1a0004a          SUB      r0,r0,#0x4a           ;189
000332  5501              STRB     r1,[r0,r4]            ;189
                  |L1.820|
000334  4629              MOV      r1,r5                 ;192
000336  4620              MOV      r0,r4                 ;192
000338  f7fffffe          BL       _PrepareTxData
00033c  4606              MOV      r6,r0                 ;192
00033e  4631              MOV      r1,r6                 ;195
000340  4620              MOV      r0,r4                 ;195
000342  f7fffffe          BL       BSP_USART_TxData
000346  2000              MOVS     r0,#0                 ;197
000348  e7d9              B        |L1.766|
;;;199    
                          ENDP

                  NULL_RxHandler PROC
;;;355    
;;;356    void NULL_RxHandler(DATA_STRUCT *Info)
00034a  4770              BX       lr
;;;357    {
;;;358    	///Nothing todo here
;;;359    }
;;;360    
                          ENDP

                  |L1.844|
                          DCD      __StartF
                  |L1.848|
                          DCD      __DLE
                  |L1.852|
                          DCD      __RxLen
                  |L1.856|
                          DCD      BSP_Info+0x48
                  |L1.860|
                          DCD      AppInfo+0x70
                  |L1.864|
                          DCD      Usart_RxFrameHandler
                  |L1.868|
                          DCD      _USART_TIME_OUT
                  |L1.872|
                          DCD      Sem_UsartTxRdy

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  __RxLen
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _USART_TIME_OUT
                          DCD      0x000001f4
                          DCD      0x000001f4
                          DCD      0x000001f4
                          DCD      0x000001f4
                          DCD      0x000001f4
                          DCD      0x000001f4

                          AREA ||.data||, DATA, ALIGN=2

                  Usart_RxFrameHandler
                          DCD      Usart1_RxFrameHandler
                          DCD      NULL_RxHandler
                          DCD      NULL_RxHandler
                          DCD      NULL_RxHandler
                          DCD      NULL_RxHandler
                          DCD      Usart6_RxFrameHandler
                  __StartF
                          DCD      0x00000000
00001c  0000              DCB      0x00,0x00
                  __DLE
00001e  0000              DCB      0x00,0x00
                          DCD      0x00000000

                          AREA ||i._InitRx||, COMGROUP=_InitRx, CODE, READONLY, ALIGN=2

                  _InitRx PROC
;;;293    
;;;294    __inline void _InitRx(uint8_t COM, uint8_t start, DATA_STRUCT *Info)
000000  b510              PUSH     {r4,lr}
;;;295    {
;;;296    	__DLE[COM] = 0;
000002  f04f0300          MOV      r3,#0
000006  4c09              LDR      r4,|L18.44|
000008  5423              STRB     r3,[r4,r0]
;;;297    	__RxLen[COM] = 0;
00000a  4c09              LDR      r4,|L18.48|
00000c  f8243010          STRH     r3,[r4,r0,LSL #1]
;;;298    	
;;;299    	Info->len[0] = 0;
000010  7013              STRB     r3,[r2,#0]
;;;300    	Info->len[1] = 0;
000012  7053              STRB     r3,[r2,#1]
;;;301    	
;;;302    	if (start)
000014  b121              CBZ      r1,|L18.32|
;;;303    		__StartF[COM] = 1;
000016  f04f0301          MOV      r3,#1
00001a  4c06              LDR      r4,|L18.52|
00001c  5423              STRB     r3,[r4,r0]
00001e  e003              B        |L18.40|
                  |L18.32|
;;;304    	else
;;;305    		__StartF[COM] = 0;
000020  f04f0300          MOV      r3,#0
000024  4c03              LDR      r4,|L18.52|
000026  5423              STRB     r3,[r4,r0]
                  |L18.40|
;;;306    }
000028  bd10              POP      {r4,pc}
;;;307    
                          ENDP

00002a  0000              DCW      0x0000
                  |L18.44|
                          DCD      __DLE
                  |L18.48|
                          DCD      __RxLen
                  |L18.52|
                          DCD      __StartF

                          AREA ||i._SetRxData||, COMGROUP=_SetRxData, CODE, READONLY, ALIGN=2

                  _SetRxData PROC
;;;204    //收到的数据处理：从DataLen域开始存储数据
;;;205    __inline void _SetRxData(uint8_t COM, uint8_t Data, DATA_STRUCT *Info)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;206    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;207    	uint16_t len;
;;;208    
;;;209    	switch (__RxLen[COM]){
00000a  483f              LDR      r0,|L25.264|
00000c  f8300016          LDRH     r0,[r0,r6,LSL #1]
000010  2808              CMP      r0,#8
000012  d242              BCS      |L25.154|
000014  e8dff000          TBB      [pc,r0]
000018  04061d1f          DCB      0x04,0x06,0x1d,0x1f
00001c  28343d3f          DCB      0x28,0x34,0x3d,0x3f
;;;210    
;;;211    		case 0:
;;;212    			Info->len[0] = Data;
000020  7025              STRB     r5,[r4,#0]
;;;213    			break;
000022  e042              B        |L25.170|
;;;214    		case 1:
;;;215    			Info->len[1] = Data;
000024  7065              STRB     r5,[r4,#1]
;;;216    			len = Info->len[1] + ((uint16_t)Info->len[0] << 8);
000026  7860              LDRB     r0,[r4,#1]
000028  7821              LDRB     r1,[r4,#0]
00002a  eb002001          ADD      r0,r0,r1,LSL #8
00002e  b287              UXTH     r7,r0
;;;217    			if ((len > BSP_Info.UsartRxBufMask[COM] + 1 + 6) || (len < 8)){
000030  4836              LDR      r0,|L25.268|
000032  f8300016          LDRH     r0,[r0,r6,LSL #1]
000036  f1000007          ADD      r0,r0,#7
00003a  42b8              CMP      r0,r7
00003c  db01              BLT      |L25.66|
00003e  2f08              CMP      r7,#8
000040  da06              BGE      |L25.80|
                  |L25.66|
;;;218    
;;;219    				_InitRx(COM, 0, Info);
000042  4622              MOV      r2,r4
000044  2100              MOVS     r1,#0
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       _InitRx
                  |L25.76|
;;;220    				return;
;;;221    			}
;;;222    			break;
;;;223    		case 2:	///源地址：
;;;224    			
;;;225    			Info->src = Data;
;;;226    			break;
;;;227    		case 3: ///源地址长度：
;;;228    			if (Data != 0){
;;;229    
;;;230    				_InitRx(COM, 0, Info);
;;;231    				return;
;;;232    			}
;;;233    			Info->src_len = Data;
;;;234    			break;
;;;235    		case 4:	///目的地址：必须是本板地址
;;;236    			if (Data != AppInfo.BdAddr){
;;;237    
;;;238    				_InitRx(COM, 0, Info);
;;;239    				return;
;;;240    			}
;;;241    			Info->dst = Data;
;;;242    			break;
;;;243    		case 5:///目的地址长度
;;;244    			if (Data != 0){
;;;245    
;;;246    				_InitRx(COM, 0, Info);
;;;247    				return;
;;;248    			}
;;;249    			Info->dst_len = Data;
;;;250    			break;
;;;251    		case 6:///业务类型
;;;252    			Info->type = Data;
;;;253    			break;
;;;254    		case 7:
;;;255    			
;;;256    			Info->cmd = Data;
;;;257    			break;
;;;258    		default://赋值
;;;259    			Info->data[__RxLen[COM] - 8] = Data;
;;;260    			break;
;;;261    	}
;;;262    
;;;263    	__RxLen[COM]++;
;;;264    	if (__RxLen[COM] > BSP_Info.UsartRxBufMask[COM] + 1)
;;;265    		_InitRx(COM, 0, Info);
;;;266    
;;;267    	if (__RxLen[COM] > 1){
;;;268    
;;;269    		if (__RxLen[COM] > Info->len[1] + ((uint16_t)Info->len[0] << 8) + 2)//数据太多，帧还未结束：丢弃
;;;270    			_InitRx(COM, 0, Info);
;;;271    	}
;;;272    }
00004c  e8bd81f0          POP      {r4-r8,pc}
                  |L25.80|
000050  e02b              B        |L25.170|
000052  70a5              STRB     r5,[r4,#2]            ;225
000054  e029              B        |L25.170|
000056  b12d              CBZ      r5,|L25.100|
000058  4622              MOV      r2,r4                 ;230
00005a  2100              MOVS     r1,#0                 ;230
00005c  4630              MOV      r0,r6                 ;230
00005e  f7fffffe          BL       _InitRx
000062  e7f3              B        |L25.76|
                  |L25.100|
000064  70e5              STRB     r5,[r4,#3]            ;233
000066  e020              B        |L25.170|
000068  4829              LDR      r0,|L25.272|
00006a  7800              LDRB     r0,[r0,#0]            ;236  ; AppInfo
00006c  42a8              CMP      r0,r5                 ;236
00006e  d005              BEQ      |L25.124|
000070  4622              MOV      r2,r4                 ;238
000072  2100              MOVS     r1,#0                 ;238
000074  4630              MOV      r0,r6                 ;238
000076  f7fffffe          BL       _InitRx
00007a  e7e7              B        |L25.76|
                  |L25.124|
00007c  7125              STRB     r5,[r4,#4]            ;241
00007e  e014              B        |L25.170|
000080  b12d              CBZ      r5,|L25.142|
000082  4622              MOV      r2,r4                 ;246
000084  2100              MOVS     r1,#0                 ;246
000086  4630              MOV      r0,r6                 ;246
000088  f7fffffe          BL       _InitRx
00008c  e7de              B        |L25.76|
                  |L25.142|
00008e  7165              STRB     r5,[r4,#5]            ;249
000090  e00b              B        |L25.170|
000092  71a5              STRB     r5,[r4,#6]            ;252
000094  e009              B        |L25.170|
000096  71e5              STRB     r5,[r4,#7]            ;256
000098  e007              B        |L25.170|
                  |L25.154|
00009a  481b              LDR      r0,|L25.264|
00009c  f8300016          LDRH     r0,[r0,r6,LSL #1]     ;259
0000a0  f1a00008          SUB      r0,r0,#8              ;259
0000a4  68a1              LDR      r1,[r4,#8]            ;259
0000a6  540d              STRB     r5,[r1,r0]            ;259
0000a8  bf00              NOP                            ;260
                  |L25.170|
0000aa  bf00              NOP                            ;213
0000ac  4816              LDR      r0,|L25.264|
0000ae  f8300016          LDRH     r0,[r0,r6,LSL #1]     ;263
0000b2  f1000001          ADD      r0,r0,#1              ;263
0000b6  4914              LDR      r1,|L25.264|
0000b8  f8210016          STRH     r0,[r1,r6,LSL #1]     ;263
0000bc  4608              MOV      r0,r1                 ;264
0000be  f8301016          LDRH     r1,[r0,r6,LSL #1]     ;264
0000c2  4812              LDR      r0,|L25.268|
0000c4  f8300016          LDRH     r0,[r0,r6,LSL #1]     ;264
0000c8  f1000001          ADD      r0,r0,#1              ;264
0000cc  4281              CMP      r1,r0                 ;264
0000ce  dd04              BLE      |L25.218|
0000d0  4622              MOV      r2,r4                 ;265
0000d2  2100              MOVS     r1,#0                 ;265
0000d4  4630              MOV      r0,r6                 ;265
0000d6  f7fffffe          BL       _InitRx
                  |L25.218|
0000da  480b              LDR      r0,|L25.264|
0000dc  f8300016          LDRH     r0,[r0,r6,LSL #1]     ;267
0000e0  2801              CMP      r0,#1                 ;267
0000e2  dd0e              BLE      |L25.258|
0000e4  7860              LDRB     r0,[r4,#1]            ;269
0000e6  7821              LDRB     r1,[r4,#0]            ;269
0000e8  eb002001          ADD      r0,r0,r1,LSL #8       ;269
0000ec  1c80              ADDS     r0,r0,#2              ;269
0000ee  4906              LDR      r1,|L25.264|
0000f0  f8311016          LDRH     r1,[r1,r6,LSL #1]     ;269
0000f4  4288              CMP      r0,r1                 ;269
0000f6  da04              BGE      |L25.258|
0000f8  4622              MOV      r2,r4                 ;270
0000fa  2100              MOVS     r1,#0                 ;270
0000fc  4630              MOV      r0,r6                 ;270
0000fe  f7fffffe          BL       _InitRx
                  |L25.258|
000102  bf00              NOP      
000104  e7a2              B        |L25.76|
;;;273    
                          ENDP

000106  0000              DCW      0x0000
                  |L25.264|
                          DCD      __RxLen
                  |L25.268|
                          DCD      BSP_Info+0x60
                  |L25.272|
                          DCD      AppInfo

;*** Start embedded assembler ***

#line 1 "..\\App\\Usart_Common.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_Usart_Common_c_ec620700____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___14_Usart_Common_c_ec620700____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_Usart_Common_c_ec620700____REVSH|
#line 130
|__asm___14_Usart_Common_c_ec620700____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
