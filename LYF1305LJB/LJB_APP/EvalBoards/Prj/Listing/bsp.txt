; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\bsp.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\bsp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\bsp.crf ..\BSP\bsp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BSP_InitInfo PROC
;;;191    ///初始化 BSP_Info 结构
;;;192    void BSP_InitInfo(void)
000000  b510              PUSH     {r4,lr}
;;;193    {
;;;194    	memset(&BSP_Info, 0, sizeof(BSP_INFO));
000002  f44f719a          MOV      r1,#0x134
000006  485f              LDR      r0,|L1.388|
000008  f7fffffe          BL       __aeabi_memclr4
;;;195    }
00000c  bd10              POP      {r4,pc}
;;;196    
                          ENDP

                  BSP_InitUsart PROC
;;;462    /////////////////////////////////////////////////////////////////////////////////////
;;;463    void BSP_InitUsart(COM_TypeDef COM, uint8_t MultiMode, uint8_t Addr)
00000e  b57f              PUSH     {r0-r6,lr}
;;;464    {
000010  4604              MOV      r4,r0
000012  460d              MOV      r5,r1
000014  4616              MOV      r6,r2
;;;465    	USART_InitTypeDef USART_InitStructure;
;;;466    		
;;;467    	USART_InitStructure.USART_BaudRate = USART_BaudRate[COM];
000016  485c              LDR      r0,|L1.392|
000018  f8500024          LDR      r0,[r0,r4,LSL #2]
00001c  9000              STR      r0,[sp,#0]
;;;468    	if (MultiMode)
00001e  b125              CBZ      r5,|L1.42|
;;;469    		USART_InitStructure.USART_WordLength = USART_WordLength_9b;
000020  f44f5080          MOV      r0,#0x1000
000024  f8ad0004          STRH     r0,[sp,#4]
000028  e003              B        |L1.50|
                  |L1.42|
;;;470    	else
;;;471    		USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00002a  f04f0000          MOV      r0,#0
00002e  f8ad0004          STRH     r0,[sp,#4]
                  |L1.50|
;;;472    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000032  f04f0000          MOV      r0,#0
000036  f8ad0006          STRH     r0,[sp,#6]
;;;473    	USART_InitStructure.USART_Parity = USART_Parity_No;
00003a  f8ad0008          STRH     r0,[sp,#8]
;;;474    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00003e  f8ad000c          STRH     r0,[sp,#0xc]
;;;475    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000042  f04f000c          MOV      r0,#0xc
000046  f8ad000a          STRH     r0,[sp,#0xa]
;;;476    	///首先恢复复位缺省态
;;;477    	USART_DeInit(COM_USART[COM]);
00004a  4950              LDR      r1,|L1.396|
00004c  f8510024          LDR      r0,[r1,r4,LSL #2]
000050  f7fffffe          BL       USART_DeInit
;;;478    	///设置串口
;;;479      	BSP_USART_Init(COM, &USART_InitStructure, MultiMode, Addr);
000054  4633              MOV      r3,r6
000056  462a              MOV      r2,r5
000058  4669              MOV      r1,sp
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       BSP_USART_Init
;;;480    }
000060  bd7f              POP      {r0-r6,pc}
;;;481    
                          ENDP

                  BSP_Init PROC
;;;222    
;;;223    void  BSP_Init (void)
000062  b510              PUSH     {r4,lr}
;;;224    {
;;;225    
;;;226        /* At this stage the microcontroller clock setting is already configured,
;;;227           this is done through SystemInit() function which is called from startup
;;;228           file (startup_stm32f2xx.s) before to branch to application main.
;;;229           To reconfigure the default setting of SystemInit() function, refer to
;;;230           system_stm32f2xx.c file
;;;231         */	
;;;232    #if APP_SRAM_ENABLE
;;;233    	BSP_SRAM_Init();//此处为记录板上的，我没有，不需要，已屏蔽
;;;234    #endif
;;;235    	
;;;236    	///Disable all Initerrupts
;;;237    	BSP_IntInit();
000064  f7fffffe          BL       BSP_IntInit
;;;238    
;;;239    	///Initialize the other I/Os for external dog, USART Tx control and board address
;;;240      	BSP_GPIO_Init();
000068  f7fffffe          BL       BSP_GPIO_Init
;;;241    
;;;242    	/* Initialize the I/Os for the LED      controls.       */
;;;243    	BSP_LED_Init();
00006c  f7fffffe          BL       BSP_LED_Init
;;;244    
;;;245    #if APP_ADC_ENABLE
;;;246    	///Initialize ADC
;;;247    	if (BSP_Info.ADCBuf[0] != NULL)
000070  4844              LDR      r0,|L1.388|
000072  6840              LDR      r0,[r0,#4]  ; BSP_Info
000074  b120              CBZ      r0,|L1.128|
;;;248    		BSP_ADC_Init(BSP_Info.ADCBuf[0]);
000076  4943              LDR      r1,|L1.388|
000078  6848              LDR      r0,[r1,#4]  ; BSP_Info
00007a  f7fffffe          BL       BSP_ADC_Init
00007e  e005              B        |L1.140|
                  |L1.128|
;;;249    	else
;;;250    		BSP_Info.Error |= BSP_ERROR_ADC_BUF_EMPTY; 
000080  4840              LDR      r0,|L1.388|
000082  6800              LDR      r0,[r0,#0]  ; BSP_Info
000084  f0400001          ORR      r0,r0,#1
000088  493e              LDR      r1,|L1.388|
00008a  6008              STR      r0,[r1,#0]  ; BSP_Info
                  |L1.140|
;;;251    #endif
;;;252    	
;;;253    #if APP_DAC_ENABLE
;;;254    	///Init DAC
;;;255    	if (BSP_Info.DACBuf[0] != NULL)
;;;256    		BSP_DAC_Init(BSP_Info.DACBuf[0]);
;;;257    	else
;;;258    		BSP_Info.Error |= BSP_ERROR_DAC_BUF_EMPTY;
;;;259    #endif
;;;260    
;;;261    #if APP_USART_1_ENABLE
;;;262    	Sem_UsartTxRdy[COM1] = OSSemCreate(1);
00008c  2001              MOVS     r0,#1
00008e  f7fffffe          BL       OSSemCreate
000092  493f              LDR      r1,|L1.400|
000094  6008              STR      r0,[r1,#0]  ; Sem_UsartTxRdy
;;;263    	#if defined USART_1_MULTI_COMMUNICATION
;;;264    		BSP_InitUsart(COM1, 1, USART_1_MULTI_COMMUNICATION_ADDRESS);
;;;265    	#else
;;;266    		BSP_InitUsart(COM1, 0, 0);
000096  2200              MOVS     r2,#0
000098  4611              MOV      r1,r2
00009a  4610              MOV      r0,r2
00009c  f7fffffe          BL       BSP_InitUsart
;;;267    	#endif
;;;268    #endif
;;;269    
;;;270    #if APP_USART_2_ENABLE
;;;271    	Sem_UsartTxRdy[COM2] = OSSemCreate(1);
;;;272    	#if defined USART_2_MULTI_COMMUNICATION
;;;273    		BSP_InitUsart(COM2, 1, USART_2_MULTI_COMMUNICATION_ADDRESS);
;;;274    	#else
;;;275    		BSP_InitUsart(COM2, 0, 0);
;;;276    	#endif
;;;277    #endif	
;;;278    
;;;279    #if APP_USART_3_ENABLE
;;;280    	Sem_UsartTxRdy[COM3] = OSSemCreate(1);
;;;281    	#if defined USART_3_MULTI_COMMUNICATION
;;;282    		BSP_InitUsart(COM3, 1, USART_3_MULTI_COMMUNICATION_ADDRESS);
;;;283    	#else
;;;284    		BSP_InitUsart(COM3, 0, 0);
;;;285    	#endif
;;;286    #endif
;;;287    
;;;288    #if APP_USART_4_ENABLE
;;;289    	Sem_UsartTxRdy[COM4] = OSSemCreate(1);
;;;290    	#if defined USART_4_MULTI_COMMUNICATION
;;;291    		BSP_InitUsart(COM4, 1, USART_4_MULTI_COMMUNICATION_ADDRESS);
;;;292    	#else
;;;293    		BSP_InitUsart(COM4, 0, 0);
;;;294    	#endif
;;;295    #endif	
;;;296    	
;;;297    #if APP_USART_5_ENABLE
;;;298    	Sem_UsartTxRdy[COM5] = OSSemCreate(1);
;;;299    	#if defined USART_5_MULTI_COMMUNICATION
;;;300    		BSP_InitUsart(COM5, 1, USART_5_MULTI_COMMUNICATION_ADDRESS);
;;;301    	#else
;;;302    		BSP_InitUsart(COM5, 0, 0);
;;;303    	#endif
;;;304    #endif	
;;;305    
;;;306    #if APP_USART_6_ENABLE
;;;307    	Sem_UsartTxRdy[COM6] = OSSemCreate(1);
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       OSSemCreate
0000a6  493a              LDR      r1,|L1.400|
0000a8  6148              STR      r0,[r1,#0x14]  ; Sem_UsartTxRdy
;;;308    	#if defined USART_6_MULTI_COMMUNICATION
;;;309    		BSP_InitUsart(COM6, 1, USART_6_MULTI_COMMUNICATION_ADDRESS);
;;;310    	#else
;;;311    		BSP_InitUsart(COM6, 0, 0);
0000aa  2200              MOVS     r2,#0
0000ac  4611              MOV      r1,r2
0000ae  2005              MOVS     r0,#5
0000b0  f7fffffe          BL       BSP_InitUsart
;;;312    	#endif
;;;313    #endif		
;;;314    	
;;;315    #if APP_I2C_1_ENABLE
;;;316    	BSP_InitI2C1();
0000b4  f7fffffe          BL       BSP_InitI2C1
;;;317    #endif
;;;318    
;;;319    #if APP_SPI_1_ENABLE
;;;320    	BSP_InitSPI1();
;;;321    #endif
;;;322    
;;;323    
;;;324    #if APP_RTC_ENABLE
;;;325    	BSP_InitRTC();
;;;326    #endif
;;;327    
;;;328    #if APP_CAN_1_ENABLE
;;;329    	///BSP_InitCan(CAN_1, );
;;;330    #endif
;;;331    
;;;332    #if APP_CAN_2_ENABLE
;;;333    	///BSP_InitCan();
;;;334    #endif
;;;335    
;;;336    #if APP_SD_ENABLE
;;;337    	BSP_InitSD();
;;;338    #endif
;;;339    
;;;340    #if APP_USB_HOST_ENABLE
;;;341    	BSP_InitUSB();
;;;342    #endif
;;;343    
;;;344    #if APP_ADC_ENABLE
;;;345    	///Timer3 for ADC:
;;;346    	BSP_Tm3_Init();	
0000b8  f7fffffe          BL       BSP_Tm3_Init
;;;347    #endif
;;;348    }
0000bc  bd10              POP      {r4,pc}
;;;349    
                          ENDP

                  BSP_RNG_Read PROC
;;;367    
;;;368    CPU_INT32U  BSP_RNG_Read (void)
0000be  b510              PUSH     {r4,lr}
;;;369    {
;;;370        CPU_INT32U  rng_val;
;;;371    
;;;372    
;;;373        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE);         /* Enable RNG clock.                                    */
0000c0  2101              MOVS     r1,#1
0000c2  2040              MOVS     r0,#0x40
0000c4  f7fffffe          BL       RCC_AHB2PeriphClockCmd
;;;374    
;;;375        RNG_REG->CR |= RNG_CR_IE;                                   /* Enable RNG ISR.                                      */
0000c8  4832              LDR      r0,|L1.404|
0000ca  6800              LDR      r0,[r0,#0]
0000cc  f0400008          ORR      r0,r0,#8
0000d0  4930              LDR      r1,|L1.404|
0000d2  6008              STR      r0,[r1,#0]
;;;376        RNG_REG->CR |= RNG_CR_RNGEN;                                /* Enable LFSR & err detector.                          */
0000d4  4608              MOV      r0,r1
0000d6  6800              LDR      r0,[r0,#0]
0000d8  f0400004          ORR      r0,r0,#4
0000dc  6008              STR      r0,[r1,#0]
;;;377    
;;;378        while ((RNG_REG->SR & RNG_SR_DRDY) == 0) {
0000de  bf00              NOP      
                  |L1.224|
0000e0  482c              LDR      r0,|L1.404|
0000e2  1d00              ADDS     r0,r0,#4
0000e4  6800              LDR      r0,[r0,#0]
0000e6  f0100f01          TST      r0,#1
0000ea  d0f9              BEQ      |L1.224|
;;;379                ;
;;;380        }
;;;381        rng_val = (CPU_INT32U)RNG_REG->DR;                          /* Save RNG data reg.                                   */
0000ec  482a              LDR      r0,|L1.408|
0000ee  6804              LDR      r4,[r0,#0]
;;;382    
;;;383        RNG_REG->CR &= ~RNG_CR_IE;                                  /* Disable RNG ISR.                                     */
0000f0  4828              LDR      r0,|L1.404|
0000f2  6800              LDR      r0,[r0,#0]
0000f4  f0200008          BIC      r0,r0,#8
0000f8  4926              LDR      r1,|L1.404|
0000fa  6008              STR      r0,[r1,#0]
;;;384        RNG_REG->CR &= ~RNG_CR_RNGEN;                               /* Disable LFSR & err detector.                         */
0000fc  4608              MOV      r0,r1
0000fe  6800              LDR      r0,[r0,#0]
000100  f0200004          BIC      r0,r0,#4
000104  6008              STR      r0,[r1,#0]
;;;385        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, DISABLE);        /* Disable RNG clock.                                   */
000106  f04f0100          MOV      r1,#0
00010a  f04f0040          MOV      r0,#0x40
00010e  f7fffffe          BL       RCC_AHB2PeriphClockCmd
;;;386    
;;;387        return (rng_val);                                           /* Return rand value.                                   */
000112  4620              MOV      r0,r4
;;;388    }
000114  bd10              POP      {r4,pc}
;;;389    
                          ENDP

                  BSP_CPU_ClkFreq PROC
;;;406    
;;;407    CPU_INT32U  BSP_CPU_ClkFreq (void)
000116  b51f              PUSH     {r0-r4,lr}
;;;408    {
;;;409        RCC_ClocksTypeDef  rcc_clocks;
;;;410    
;;;411    
;;;412        RCC_GetClocksFreq(&rcc_clocks);
000118  4668              MOV      r0,sp
00011a  f7fffffe          BL       RCC_GetClocksFreq
;;;413        return ((CPU_INT32U)rcc_clocks.HCLK_Frequency);
00011e  9801              LDR      r0,[sp,#4]
;;;414    }
000120  b004              ADD      sp,sp,#0x10
000122  bd10              POP      {r4,pc}
;;;415    
                          ENDP

                  BSP_CPU_TickInit PROC
;;;432    
;;;433    void  BSP_CPU_TickInit  (void)
000124  b570              PUSH     {r4-r6,lr}
;;;434    {
;;;435        CPU_INT32U  cpu_clk_freq;
;;;436        CPU_INT32U  cnts;
;;;437    
;;;438    
;;;439        cpu_clk_freq = BSP_CPU_ClkFreq();                           /* Determine SysTick reference freq.                    */
000126  f7fffffe          BL       BSP_CPU_ClkFreq
00012a  4604              MOV      r4,r0
;;;440    #if (OS_VERSION >= 30000u)
;;;441        cnts         = (cpu_clk_freq / OSCfg_TickRate_Hz);          /* Determine nbr SysTick increments                     */
;;;442    #else
;;;443        cnts         = (cpu_clk_freq / OS_TICKS_PER_SEC);
00012c  f44f707a          MOV      r0,#0x3e8
000130  fbb4f5f0          UDIV     r5,r4,r0
;;;444    #endif
;;;445        OS_CPU_SysTickInit(cnts);                                   /* Initialize the SysTick.                            */
000134  4628              MOV      r0,r5
000136  f7fffffe          BL       OS_CPU_SysTickInit
;;;446    }
00013a  bd70              POP      {r4-r6,pc}
;;;447    
                          ENDP

                  Delay PROC
;;;449    
;;;450    void Delay(uint32_t dlyTm)
00013c  f04f0100          MOV      r1,#0
;;;451    {
;;;452    	uint32_t i;
;;;453    
;;;454    	for (i = 0; i < dlyTm; i++){
000140  e002              B        |L1.328|
                  |L1.322|
;;;455    		__NOP();
000142  bf00              NOP      
000144  f1010101          ADD      r1,r1,#1              ;454
                  |L1.328|
000148  4281              CMP      r1,r0                 ;454
00014a  d3fa              BCC      |L1.322|
;;;456    	}
;;;457    }
00014c  4770              BX       lr
;;;458    
                          ENDP

                  CPU_TS_TmrInit PROC
;;;539    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;540    void  CPU_TS_TmrInit (void)
00014e  b510              PUSH     {r4,lr}
;;;541    {
;;;542        CPU_INT32U  cpu_clk_freq_hz;
;;;543    
;;;544    
;;;545        DEM_CR         |= (CPU_INT32U)DEM_CR_TRCENA;                /* Enable Cortex-M3's DWT CYCCNT reg.                   */
000150  4812              LDR      r0,|L1.412|
000152  6800              LDR      r0,[r0,#0]
000154  f0407080          ORR      r0,r0,#0x1000000
000158  4910              LDR      r1,|L1.412|
00015a  6008              STR      r0,[r1,#0]
;;;546        DWT_CYCCNT      = (CPU_INT32U)0u;
00015c  f04f0000          MOV      r0,#0
000160  490f              LDR      r1,|L1.416|
000162  6048              STR      r0,[r1,#4]
;;;547        DWT_CR         |= (CPU_INT32U)DWT_CR_CYCCNTENA;
000164  4608              MOV      r0,r1
000166  6800              LDR      r0,[r0,#0]
000168  f0400001          ORR      r0,r0,#1
00016c  6008              STR      r0,[r1,#0]
;;;548    
;;;549        cpu_clk_freq_hz = BSP_CPU_ClkFreq();
00016e  f7fffffe          BL       BSP_CPU_ClkFreq
000172  4604              MOV      r4,r0
;;;550        CPU_TS_TmrFreqSet(cpu_clk_freq_hz);
000174  4620              MOV      r0,r4
000176  f7fffffe          BL       CPU_TS_TmrFreqSet
;;;551    }
00017a  bd10              POP      {r4,pc}
;;;552    #endif
                          ENDP

                  CPU_TS_TmrRd PROC
;;;638    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;639    CPU_TS_TMR  CPU_TS_TmrRd (void)
00017c  4808              LDR      r0,|L1.416|
;;;640    {
;;;641        return ((CPU_TS_TMR)DWT_CYCCNT);
00017e  6840              LDR      r0,[r0,#4]
;;;642    }
000180  4770              BX       lr
;;;643    #endif
                          ENDP

000182  0000              DCW      0x0000
                  |L1.388|
                          DCD      BSP_Info
                  |L1.392|
                          DCD      USART_BaudRate
                  |L1.396|
                          DCD      COM_USART
                  |L1.400|
                          DCD      Sem_UsartTxRdy
                  |L1.404|
                          DCD      0x50060800
                  |L1.408|
                          DCD      0x50060808
                  |L1.412|
                          DCD      0xe000edfc
                  |L1.416|
                          DCD      0xe0001000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BSP_Info
                          %        308

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  USART_BaudRate
                          DCD      0x0001c200
                          DCD      0x0001c200
                          DCD      0x0001c200
                          DCD      0x0001c200
                          DCD      0x0001c200
                          DCD      0x0001c200

;*** Start embedded assembler ***

#line 1 "..\\BSP\\bsp.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_bsp_c_7fed3042____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___5_bsp_c_7fed3042____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_bsp_c_7fed3042____REVSH|
#line 130
|__asm___5_bsp_c_7fed3042____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
