; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\app.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\app.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\app.crf ..\App\app.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SavePowOffData PROC
;;;1757   
;;;1758   void SavePowOffData()
000000  b57f              PUSH     {r0-r6,lr}
;;;1759   {
;;;1760   #if OS_CRITICAL_METHOD == 3
;;;1761       OS_CPU_SR  cpu_sr = 0;
000002  f04f0600          MOV      r6,#0
;;;1762   #endif
;;;1763   
;;;1764       uint8_t Buf[16], i;
;;;1765       uint16_t Addr; //Crc;
;;;1766   
;;;1767       OS_ENTER_CRITICAL();
000006  f7fffffe          BL       OS_CPU_SR_Save
00000a  4606              MOV      r6,r0
;;;1768   
;;;1769       ///全局变量，锁定 I2C 操作：
;;;1770       g_I2C_RdyF = 0;
00000c  f04f0000          MOV      r0,#0
000010  49fe              LDR      r1,|L1.1036|
000012  7008              STRB     r0,[r1,#0]
;;;1771   
;;;1772       OS_EXIT_CRITICAL();
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       OS_CPU_SR_Restore
;;;1773   
;;;1774       for (i = 0; i < 4; i++)
00001a  f04f0400          MOV      r4,#0
00001e  e006              B        |L1.46|
                  |L1.32|
;;;1775       {
;;;1776           Buf[i] = LJBPosInfo.SysTime[i];
000020  48fb              LDR      r0,|L1.1040|
000022  5d00              LDRB     r0,[r0,r4]
000024  f80d0004          STRB     r0,[sp,r4]
000028  f1040001          ADD      r0,r4,#1              ;1774
00002c  b2c4              UXTB     r4,r0                 ;1774
                  |L1.46|
00002e  2c04              CMP      r4,#4                 ;1774
000030  dbf6              BLT      |L1.32|
;;;1777       }
;;;1778   
;;;1779       for (i = 0; i < 3; i++)
000032  f04f0400          MOV      r4,#0
000036  e009              B        |L1.76|
                  |L1.56|
;;;1780       {
;;;1781           Buf[4 + i] = LJBPosInfo.Dist[i];
000038  48f5              LDR      r0,|L1.1040|
00003a  1d40              ADDS     r0,r0,#5
00003c  5d01              LDRB     r1,[r0,r4]
00003e  f1040004          ADD      r0,r4,#4
000042  f80d1000          STRB     r1,[sp,r0]
000046  f1040001          ADD      r0,r4,#1              ;1779
00004a  b2c4              UXTB     r4,r0                 ;1779
                  |L1.76|
00004c  2c03              CMP      r4,#3                 ;1779
00004e  dbf3              BLT      |L1.56|
;;;1782       }
;;;1783   
;;;1784       for (i = 0; i < 9; i++)
000050  f04f0400          MOV      r4,#0
000054  e009              B        |L1.106|
                  |L1.86|
;;;1785       {
;;;1786           Buf[7 + i]  = LJBPosInfo.D110V[i];
000056  48ee              LDR      r0,|L1.1040|
000058  3008              ADDS     r0,r0,#8
00005a  5d01              LDRB     r1,[r0,r4]
00005c  f1040007          ADD      r0,r4,#7
000060  f80d1000          STRB     r1,[sp,r0]
000064  f1040001          ADD      r0,r4,#1              ;1784
000068  b2c4              UXTB     r4,r0                 ;1784
                  |L1.106|
00006a  2c09              CMP      r4,#9                 ;1784
00006c  dbf3              BLT      |L1.86|
;;;1787       }
;;;1788   
;;;1789       Addr = (uint16_t)RecInfo.NextIndex << 4;
00006e  48e9              LDR      r0,|L1.1044|
000070  7900              LDRB     r0,[r0,#4]  ; RecInfo
000072  ea4f1500          LSL      r5,r0,#4
;;;1790   
;;;1791       //FLASH_WP_DISABLE;
;;;1792       //sEE_WriteBuffer((uint8_t *)&(Buf[0]), Addr, sizeof(Buf));
;;;1793       //FLASH_WP_ENABLE;
;;;1794   
;;;1795       BSP_WriteI2C1((uint8_t *)&(Buf[0]), Addr, sizeof(Buf));
000076  f04f0210          MOV      r2,#0x10
00007a  4629              MOV      r1,r5
00007c  4668              MOV      r0,sp
00007e  f7fffffe          BL       BSP_WriteI2C1
;;;1796   
;;;1797   
;;;1798       RecInfo.NextIndex++;
000082  48e4              LDR      r0,|L1.1044|
000084  7900              LDRB     r0,[r0,#4]  ; RecInfo
000086  f1000001          ADD      r0,r0,#1
00008a  49e2              LDR      r1,|L1.1044|
00008c  7108              STRB     r0,[r1,#4]
;;;1799   
;;;1800       if (RecInfo.NextIndex > REC_SIZE)
00008e  4608              MOV      r0,r1
000090  7900              LDRB     r0,[r0,#4]  ; RecInfo
000092  281f              CMP      r0,#0x1f
000094  dd02              BLE      |L1.156|
;;;1801       {
;;;1802           RecInfo.NextIndex = 1;
000096  f04f0001          MOV      r0,#1
00009a  7108              STRB     r0,[r1,#4]
                  |L1.156|
;;;1803       }
;;;1804   
;;;1805       RecInfo.TotNewRec++;
00009c  48dd              LDR      r0,|L1.1044|
00009e  7940              LDRB     r0,[r0,#5]  ; RecInfo
0000a0  f1000001          ADD      r0,r0,#1
0000a4  49db              LDR      r1,|L1.1044|
0000a6  7148              STRB     r0,[r1,#5]
;;;1806   
;;;1807       if (RecInfo.TotNewRec > REC_SIZE)
0000a8  4608              MOV      r0,r1
0000aa  7940              LDRB     r0,[r0,#5]  ; RecInfo
0000ac  281f              CMP      r0,#0x1f
0000ae  dd02              BLE      |L1.182|
;;;1808       {
;;;1809           RecInfo.TotNewRec = REC_SIZE;
0000b0  f04f001f          MOV      r0,#0x1f
0000b4  7148              STRB     r0,[r1,#5]
                  |L1.182|
;;;1810       }
;;;1811   
;;;1812       RecInfo.Crc = Calc_CRCByte((uint8_t *)&(RecInfo.Flag[0]), 6);
0000b6  2106              MOVS     r1,#6
0000b8  48d6              LDR      r0,|L1.1044|
0000ba  f7fffffe          BL       Calc_CRCByte
0000be  49d5              LDR      r1,|L1.1044|
0000c0  80c8              STRH     r0,[r1,#6]
;;;1813   
;;;1814       RecInfo.Bk_NextIndex = RecInfo.NextIndex;
0000c2  4608              MOV      r0,r1
0000c4  7900              LDRB     r0,[r0,#4]  ; RecInfo
0000c6  7308              STRB     r0,[r1,#0xc]
;;;1815       RecInfo.Bk_TotNewRec = RecInfo.TotNewRec;
0000c8  4608              MOV      r0,r1
0000ca  7940              LDRB     r0,[r0,#5]  ; RecInfo
0000cc  7348              STRB     r0,[r1,#0xd]
;;;1816       RecInfo.Bk_Crc = RecInfo.Crc;
0000ce  4608              MOV      r0,r1
0000d0  88c0              LDRH     r0,[r0,#6]  ; RecInfo
0000d2  81c8              STRH     r0,[r1,#0xe]
;;;1817   
;;;1818       Addr = 0;
0000d4  f04f0500          MOV      r5,#0
;;;1819   
;;;1820       //FLASH_WP_DISABLE;
;;;1821       //sEE_WriteBuffer((uint8_t *)&(RecInfo.Flag[0]), Addr, sizeof(REC_INFO));
;;;1822       //FLASH_WP_ENABLE;
;;;1823   
;;;1824       BSP_WriteI2C1((uint8_t *)&(RecInfo.Flag[0]), Addr, sizeof(REC_INFO));
0000d8  f04f0210          MOV      r2,#0x10
0000dc  4629              MOV      r1,r5
0000de  48cd              LDR      r0,|L1.1044|
0000e0  f7fffffe          BL       BSP_WriteI2C1
;;;1825   
;;;1826   
;;;1827       OS_ENTER_CRITICAL();
0000e4  f7fffffe          BL       OS_CPU_SR_Save
0000e8  4606              MOV      r6,r0
;;;1828   
;;;1829       ///全局变量，解锁 I2C 操作：
;;;1830       g_I2C_RdyF = 1;
0000ea  f04f0001          MOV      r0,#1
0000ee  49c7              LDR      r1,|L1.1036|
0000f0  7008              STRB     r0,[r1,#0]
;;;1831   
;;;1832       OS_EXIT_CRITICAL();
0000f2  4630              MOV      r0,r6
0000f4  f7fffffe          BL       OS_CPU_SR_Restore
;;;1833   
;;;1834   }
0000f8  bd7f              POP      {r0-r6,pc}
;;;1835   
                          ENDP

                  PowOffHandler PROC
;;;1839   //掉电后总共记录1秒钟数据。其中，每隔100ms多记录1条数据。
;;;1840   void PowOffHandler(void)
0000fa  b570              PUSH     {r4-r6,lr}
;;;1841   {
;;;1842   #if OS_CRITICAL_METHOD == 3
;;;1843       OS_CPU_SR  cpu_sr = 0;
0000fc  f04f0400          MOV      r4,#0
;;;1844   #endif
;;;1845   
;;;1846       uint8_t D110VIndex;
;;;1847   
;;;1848       D110VIndex = D110VCnt[4];
000100  48c5              LDR      r0,|L1.1048|
000102  7905              LDRB     r5,[r0,#4]  ; D110VCnt
;;;1849   
;;;1850       //LJBPosInfo.D110V[PosIndex] = D110VADBuf[4][PosIndex];//D110VADBuf[4][D110VCnt[4]];
;;;1851   
;;;1852       //LJBPosInfo.D110V[PosIndex] = D110VADBuf[4][D110VCnt[4]];//UserInf.D110V
;;;1853   
;;;1854       PosIndex++;
000104  48c5              LDR      r0,|L1.1052|
000106  7800              LDRB     r0,[r0,#0]  ; PosIndex
000108  f1000001          ADD      r0,r0,#1
00010c  49c3              LDR      r1,|L1.1052|
00010e  7008              STRB     r0,[r1,#0]
;;;1855   
;;;1856       if (PosIndex == 9)                              //掉电1s计时到
000110  4608              MOV      r0,r1
000112  7800              LDRB     r0,[r0,#0]  ; PosIndex
000114  2809              CMP      r0,#9
000116  d13f              BNE      |L1.408|
;;;1857       {
;;;1858           // 清110V电源掉电计数
;;;1859   
;;;1860   #if 0
;;;1861           for (PosIndex = 0; PosIndex < 10; PosIndex ++)
;;;1862           {
;;;1863               LJBPosInfo.D110V[PosIndex] = D110VADBuf[4][PosIndex];
;;;1864           }
;;;1865   #endif
;;;1866   
;;;1867   #if 1
;;;1868           OS_ENTER_CRITICAL();
000118  f7fffffe          BL       OS_CPU_SR_Save
00011c  4604              MOV      r4,r0
;;;1869   
;;;1870           for (PosIndex = 10; PosIndex > 0; PosIndex --)
00011e  f04f000a          MOV      r0,#0xa
000122  49be              LDR      r1,|L1.1052|
000124  7008              STRB     r0,[r1,#0]
000126  e018              B        |L1.346|
                  |L1.296|
;;;1871           {
;;;1872               LJBPosInfo.D110V[PosIndex - 1] = D110VADBuf[4][(PosIndex + D110VIndex) % 10];
000128  48bc              LDR      r0,|L1.1052|
00012a  7800              LDRB     r0,[r0,#0]  ; PosIndex
00012c  4428              ADD      r0,r0,r5
00012e  f04f010a          MOV      r1,#0xa
000132  fb90f2f1          SDIV     r2,r0,r1
000136  fb010112          MLS      r1,r1,r2,r0
00013a  48b9              LDR      r0,|L1.1056|
00013c  5c42              LDRB     r2,[r0,r1]
00013e  48b7              LDR      r0,|L1.1052|
000140  7800              LDRB     r0,[r0,#0]  ; PosIndex
000142  f1a00001          SUB      r0,r0,#1
000146  49b2              LDR      r1,|L1.1040|
000148  f1010108          ADD      r1,r1,#8
00014c  540a              STRB     r2,[r1,r0]
00014e  48b3              LDR      r0,|L1.1052|
000150  7800              LDRB     r0,[r0,#0]            ;1870  ; PosIndex
000152  f1a00001          SUB      r0,r0,#1              ;1870
000156  49b1              LDR      r1,|L1.1052|
000158  7008              STRB     r0,[r1,#0]            ;1870
                  |L1.346|
00015a  48b0              LDR      r0,|L1.1052|
00015c  7800              LDRB     r0,[r0,#0]            ;1870  ; PosIndex
00015e  2800              CMP      r0,#0                 ;1870
000160  dce2              BGT      |L1.296|
;;;1873           }
;;;1874   
;;;1875           OS_EXIT_CRITICAL();
000162  4620              MOV      r0,r4
000164  f7fffffe          BL       OS_CPU_SR_Restore
;;;1876   
;;;1877   #endif
;;;1878   
;;;1879   
;;;1880           PosIndex = 0;
000168  f04f0000          MOV      r0,#0
00016c  49ab              LDR      r1,|L1.1052|
00016e  7008              STRB     r0,[r1,#0]
;;;1881   
;;;1882           if ((g_I2C_RdyF == 1)&&(g_changed == 1))                            //I2C空闲
000170  48a6              LDR      r0,|L1.1036|
000172  7800              LDRB     r0,[r0,#0]  ; g_I2C_RdyF
000174  2801              CMP      r0,#1
000176  d105              BNE      |L1.388|
000178  48aa              LDR      r0,|L1.1060|
00017a  7800              LDRB     r0,[r0,#0]  ; g_changed
00017c  2801              CMP      r0,#1
00017e  d101              BNE      |L1.388|
;;;1883           {
;;;1884               SavePowOffData();                       //记录1s内每隔100ms采集的掉电数，共10帧数据
000180  f7fffffe          BL       SavePowOffData
                  |L1.388|
;;;1885           }
;;;1886   
;;;1887           g_changed = 0;                                // 不再记录掉电信息
000184  f04f0000          MOV      r0,#0
000188  49a6              LDR      r1,|L1.1060|
00018a  7008              STRB     r0,[r1,#0]
;;;1888           UserInf.PowOffFlag &= (~POW_OFF_FLG);       // 清110V电源掉电标志
00018c  48a6              LDR      r0,|L1.1064|
00018e  7b00              LDRB     r0,[r0,#0xc]  ; UserInf
000190  f0200001          BIC      r0,r0,#1
000194  49a4              LDR      r1,|L1.1064|
000196  7308              STRB     r0,[r1,#0xc]
                  |L1.408|
;;;1889       }
;;;1890   }
000198  bd70              POP      {r4-r6,pc}
;;;1891   
                          ENDP

                  App_TimeTickFunc PROC
;;;334    ///Tick 调用函数
;;;335    void App_TimeTickFunc(void)
00019a  b510              PUSH     {r4,lr}
;;;336    {
;;;337        if (AppInfo.RdyFlag)
00019c  48a3              LDR      r0,|L1.1068|
00019e  7f00              LDRB     r0,[r0,#0x1c]  ; AppInfo
0001a0  2800              CMP      r0,#0
0001a2  d07d              BEQ      |L1.672|
;;;338        {
;;;339    
;;;340    #if APP_USART_1_ENABLE
;;;341            AppInfo.UsartNoDataCnt[COM1]++;
0001a4  48a1              LDR      r0,|L1.1068|
0001a6  f8d000a0          LDR      r0,[r0,#0xa0]  ; AppInfo
0001aa  f1000001          ADD      r0,r0,#1
0001ae  499f              LDR      r1,|L1.1068|
0001b0  f8c100a0          STR      r0,[r1,#0xa0]  ; AppInfo
;;;342    #endif
;;;343    #if APP_USART_2_ENABLE
;;;344            AppInfo.UsartNoDataCnt[COM2]++;
;;;345    #endif
;;;346    #if APP_USART_3_ENABLE
;;;347            AppInfo.UsartNoDataCnt[COM3]++;
;;;348    #endif
;;;349    #if APP_USART_4_ENABLE
;;;350            AppInfo.UsartNoDataCnt[COM4]++;
;;;351    #endif
;;;352    #if APP_USART_5_ENABLE
;;;353            AppInfo.UsartNoDataCnt[COM5]++;
;;;354    #endif
;;;355    #if APP_USART_6_ENABLE
;;;356            AppInfo.UsartNoDataCnt[COM6]++;
0001b4  4608              MOV      r0,r1
0001b6  f8d000b4          LDR      r0,[r0,#0xb4]
0001ba  f1000001          ADD      r0,r0,#1
0001be  f8c100b4          STR      r0,[r1,#0xb4]
;;;357    #endif
;;;358    
;;;359            Tm10ms++;
0001c2  489b              LDR      r0,|L1.1072|
0001c4  8800              LDRH     r0,[r0,#0]  ; Tm10ms
0001c6  f1000001          ADD      r0,r0,#1
0001ca  4999              LDR      r1,|L1.1072|
0001cc  8008              STRH     r0,[r1,#0]
;;;360    
;;;361    
;;;362            //掉电处理
;;;363    
;;;364    #if 0
;;;365            PowOffTm++;
;;;366    
;;;367            if (UserInf.PowOffFlag)       // 掉电
;;;368            {
;;;369                CompexInCnt = 0;
;;;370                CompCnt++;
;;;371    
;;;372                if (CompCnt >= 5)
;;;373                {
;;;374                    CompCnt = 0;
;;;375                    //   ADC10Data = ADC10Temp >> 2;
;;;376    
;;;377                    if (V110Ready)
;;;378                    {
;;;379                        V110Ready = 0;
;;;380    
;;;381                        if (!PowF) ///if (TimeUsed && (!PowF))  //TimeUsed待确认是否删除
;;;382                        {
;;;383                            PowF = 1;
;;;384                            PowOffTm = 0;
;;;385                        }
;;;386                    }
;;;387                }
;;;388            }
;;;389            else
;;;390            {
;;;391                CompCnt = 0;
;;;392                CompexInCnt++;
;;;393    
;;;394                if (CompexInCnt >= 5)//100)
;;;395                {
;;;396                    //   ADC10Data = ADC10Temp >> 2;
;;;397                    CompexInCnt = 0;
;;;398                    V110Ready = 1;
;;;399                }
;;;400            }
;;;401    
;;;402    
;;;403            //5ms定时处理
;;;404    
;;;405            if (Tm10ms == 5)
;;;406            {
;;;407                if(UserInf.PowOffFlag)
;;;408                {
;;;409                    //PowOffHandler();          // 掉电数据处理
;;;410                }
;;;411    
;;;412                //Usart6_TxDeal();     //待修改完善
;;;413            }
;;;414    #endif
;;;415    
;;;416            /*************************************************************/
;;;417    //此处参照智能传感器
;;;418    
;;;419            if (Tm10ms == 10)
0001ce  4608              MOV      r0,r1
0001d0  8800              LDRH     r0,[r0,#0]  ; Tm10ms
0001d2  280a              CMP      r0,#0xa
0001d4  d117              BNE      |L1.518|
;;;420            {
;;;421                if (AppInfo.NowTime[0] == 0xffffffff)
0001d6  4895              LDR      r0,|L1.1068|
0001d8  f8d00120          LDR      r0,[r0,#0x120]  ; AppInfo
0001dc  1c40              ADDS     r0,r0,#1
0001de  d10a              BNE      |L1.502|
;;;422                {
;;;423                    AppInfo.NowTime[0] = 0;
0001e0  4992              LDR      r1,|L1.1068|
0001e2  f8c10120          STR      r0,[r1,#0x120]  ; AppInfo
;;;424                    AppInfo.NowTime[1]++;
0001e6  4608              MOV      r0,r1
0001e8  f8d00124          LDR      r0,[r0,#0x124]
0001ec  f1000001          ADD      r0,r0,#1
0001f0  f8c10124          STR      r0,[r1,#0x124]
0001f4  e007              B        |L1.518|
                  |L1.502|
;;;425                }
;;;426                else
;;;427                {
;;;428                    AppInfo.NowTime[0]++;
0001f6  488d              LDR      r0,|L1.1068|
0001f8  f8d00120          LDR      r0,[r0,#0x120]  ; AppInfo
0001fc  f1000001          ADD      r0,r0,#1
000200  498a              LDR      r1,|L1.1068|
000202  f8c10120          STR      r0,[r1,#0x120]  ; AppInfo
                  |L1.518|
;;;429                }
;;;430            }
;;;431    
;;;432            /*************************************************************/
;;;433    
;;;434            if (Tm10ms == 50)
000206  488a              LDR      r0,|L1.1072|
000208  8800              LDRH     r0,[r0,#0]  ; Tm10ms
00020a  2832              CMP      r0,#0x32
00020c  d17d              BNE      |L1.778|
;;;435            {
;;;436                Tm10ms = 0;  //这里清零对掉电计时是否有影响，待确认
00020e  f04f0000          MOV      r0,#0
000212  4987              LDR      r1,|L1.1072|
000214  8008              STRH     r0,[r1,#0]
;;;437    
;;;438                D110VADBuf[4][D110VCnt[4]] = UserInf.D110V;
000216  4884              LDR      r0,|L1.1064|
000218  79c1              LDRB     r1,[r0,#7]  ; UserInf
00021a  487f              LDR      r0,|L1.1048|
00021c  7902              LDRB     r2,[r0,#4]  ; D110VCnt
00021e  4880              LDR      r0,|L1.1056|
000220  5481              STRB     r1,[r0,r2]
;;;439    
;;;440    
;;;441                if(UserInf.PowOffFlag)// 进入掉电处理
000222  4881              LDR      r0,|L1.1064|
000224  7b00              LDRB     r0,[r0,#0xc]  ; UserInf
000226  b138              CBZ      r0,|L1.568|
;;;442                {
;;;443                    D110VADBuf[4][D110VCnt[4]] = UserInf.D110V;
000228  487f              LDR      r0,|L1.1064|
00022a  79c1              LDRB     r1,[r0,#7]  ; UserInf
00022c  487a              LDR      r0,|L1.1048|
00022e  7902              LDRB     r2,[r0,#4]  ; D110VCnt
000230  487b              LDR      r0,|L1.1056|
000232  5481              STRB     r1,[r0,r2]
;;;444    
;;;445                    PowOffHandler();
000234  f7fffffe          BL       PowOffHandler
                  |L1.568|
;;;446                }
;;;447    
;;;448    
;;;449                if(D110VCnt[4] > 8)
000238  4877              LDR      r0,|L1.1048|
00023a  7900              LDRB     r0,[r0,#4]  ; D110VCnt
00023c  2808              CMP      r0,#8
00023e  dd04              BLE      |L1.586|
;;;450                {
;;;451                    D110VCnt[4] = 0;
000240  f04f0000          MOV      r0,#0
000244  4974              LDR      r1,|L1.1048|
000246  7108              STRB     r0,[r1,#4]
000248  e005              B        |L1.598|
                  |L1.586|
;;;452                }
;;;453                else
;;;454                {
;;;455                    D110VCnt[4] ++;
00024a  4873              LDR      r0,|L1.1048|
00024c  7900              LDRB     r0,[r0,#4]  ; D110VCnt
00024e  f1000001          ADD      r0,r0,#1
000252  4971              LDR      r1,|L1.1048|
000254  7108              STRB     r0,[r1,#4]
                  |L1.598|
;;;456                }
;;;457    
;;;458    
;;;459                D110VADBuf[0][D110VCnt[0]] = UserInf.ID110V;
000256  4874              LDR      r0,|L1.1064|
000258  7a00              LDRB     r0,[r0,#8]  ; UserInf
00025a  496f              LDR      r1,|L1.1048|
00025c  7809              LDRB     r1,[r1,#0]  ; D110VCnt
00025e  4a70              LDR      r2,|L1.1056|
000260  3a28              SUBS     r2,r2,#0x28
000262  5450              STRB     r0,[r2,r1]
;;;460    
;;;461                if(D110VCnt[0] > 8)
000264  486c              LDR      r0,|L1.1048|
000266  7800              LDRB     r0,[r0,#0]  ; D110VCnt
000268  2808              CMP      r0,#8
00026a  dd04              BLE      |L1.630|
;;;462                {
;;;463                    D110VCnt[0] = 0;
00026c  f04f0000          MOV      r0,#0
000270  4969              LDR      r1,|L1.1048|
000272  7008              STRB     r0,[r1,#0]
000274  e005              B        |L1.642|
                  |L1.630|
;;;464                }
;;;465                else
;;;466                {
;;;467                    D110VCnt[0] ++;
000276  4868              LDR      r0,|L1.1048|
000278  7800              LDRB     r0,[r0,#0]  ; D110VCnt
00027a  f1000001          ADD      r0,r0,#1
00027e  4966              LDR      r1,|L1.1048|
000280  7008              STRB     r0,[r1,#0]
                  |L1.642|
;;;468                }
;;;469    
;;;470                D110VADBuf[1][D110VCnt[1]] = UserInf.IID110V;
000282  4869              LDR      r0,|L1.1064|
000284  7a41              LDRB     r1,[r0,#9]  ; UserInf
000286  4864              LDR      r0,|L1.1048|
000288  7842              LDRB     r2,[r0,#1]  ; D110VCnt
00028a  4865              LDR      r0,|L1.1056|
00028c  381e              SUBS     r0,r0,#0x1e
00028e  5481              STRB     r1,[r0,r2]
;;;471    
;;;472                if(D110VCnt[1] > 8)
000290  4861              LDR      r0,|L1.1048|
000292  7840              LDRB     r0,[r0,#1]  ; D110VCnt
000294  2808              CMP      r0,#8
000296  dd06              BLE      |L1.678|
;;;473                {
;;;474                    D110VCnt[1] = 0;
000298  f04f0000          MOV      r0,#0
00029c  495e              LDR      r1,|L1.1048|
00029e  e000              B        |L1.674|
                  |L1.672|
0002a0  e035              B        |L1.782|
                  |L1.674|
0002a2  7048              STRB     r0,[r1,#1]
0002a4  e005              B        |L1.690|
                  |L1.678|
;;;475                }
;;;476                else
;;;477                {
;;;478                    D110VCnt[1] ++;
0002a6  485c              LDR      r0,|L1.1048|
0002a8  7840              LDRB     r0,[r0,#1]  ; D110VCnt
0002aa  f1000001          ADD      r0,r0,#1
0002ae  495a              LDR      r1,|L1.1048|
0002b0  7048              STRB     r0,[r1,#1]
                  |L1.690|
;;;479                }
;;;480    
;;;481                D110VADBuf[2][D110VCnt[2]] = UserInf.CSID;
0002b2  485d              LDR      r0,|L1.1064|
0002b4  7a81              LDRB     r1,[r0,#0xa]  ; UserInf
0002b6  4858              LDR      r0,|L1.1048|
0002b8  7882              LDRB     r2,[r0,#2]  ; D110VCnt
0002ba  4859              LDR      r0,|L1.1056|
0002bc  3814              SUBS     r0,r0,#0x14
0002be  5481              STRB     r1,[r0,r2]
;;;482    
;;;483                if(D110VCnt[2] > 8)
0002c0  4855              LDR      r0,|L1.1048|
0002c2  7880              LDRB     r0,[r0,#2]  ; D110VCnt
0002c4  2808              CMP      r0,#8
0002c6  dd04              BLE      |L1.722|
;;;484                {
;;;485                    D110VCnt[2] = 0;
0002c8  f04f0000          MOV      r0,#0
0002cc  4952              LDR      r1,|L1.1048|
0002ce  7088              STRB     r0,[r1,#2]
0002d0  e005              B        |L1.734|
                  |L1.722|
;;;486                }
;;;487                else
;;;488                {
;;;489                    D110VCnt[2] ++;
0002d2  4851              LDR      r0,|L1.1048|
0002d4  7880              LDRB     r0,[r0,#2]  ; D110VCnt
0002d6  f1000001          ADD      r0,r0,#1
0002da  494f              LDR      r1,|L1.1048|
0002dc  7088              STRB     r0,[r1,#2]
                  |L1.734|
;;;490                }
;;;491    
;;;492                D110VADBuf[3][D110VCnt[3]] = UserInf.CSIID;
0002de  4852              LDR      r0,|L1.1064|
0002e0  7ac1              LDRB     r1,[r0,#0xb]  ; UserInf
0002e2  484d              LDR      r0,|L1.1048|
0002e4  78c2              LDRB     r2,[r0,#3]  ; D110VCnt
0002e6  484e              LDR      r0,|L1.1056|
0002e8  380a              SUBS     r0,r0,#0xa
0002ea  5481              STRB     r1,[r0,r2]
;;;493    
;;;494                if(D110VCnt[3] > 8)
0002ec  484a              LDR      r0,|L1.1048|
0002ee  78c0              LDRB     r0,[r0,#3]  ; D110VCnt
0002f0  2808              CMP      r0,#8
0002f2  dd04              BLE      |L1.766|
;;;495                {
;;;496                    D110VCnt[3] = 0;
0002f4  f04f0000          MOV      r0,#0
0002f8  4947              LDR      r1,|L1.1048|
0002fa  70c8              STRB     r0,[r1,#3]
0002fc  e005              B        |L1.778|
                  |L1.766|
;;;497                }
;;;498                else
;;;499                {
;;;500                    D110VCnt[3] ++;
0002fe  4846              LDR      r0,|L1.1048|
000300  78c0              LDRB     r0,[r0,#3]  ; D110VCnt
000302  f1000001          ADD      r0,r0,#1
000306  4944              LDR      r1,|L1.1048|
000308  70c8              STRB     r0,[r1,#3]
                  |L1.778|
;;;501                }
;;;502    
;;;503            }
;;;504    
;;;505            LedHandler();
00030a  f7fffffe          BL       LedHandler
                  |L1.782|
;;;506        }
;;;507    }
00030e  bd10              POP      {r4,pc}
;;;508    
                          ENDP

                  App_WaitForReset PROC
;;;509    void App_WaitForReset(void)
000310  f04f0001          MOV      r0,#1
;;;510    {
;;;511        AppInfo.ResetF = 1;
000314  4945              LDR      r1,|L1.1068|
000316  70c8              STRB     r0,[r1,#3]
;;;512    }
000318  4770              BX       lr
;;;513    
                          ENDP

                  TaskMonitor PROC
;;;1254   */
;;;1255   void TaskMonitor(void)
00031a  4846              LDR      r0,|L1.1076|
;;;1256   {
;;;1257       ///判断其他任务运行状态
;;;1258       WkTime++;
00031c  8800              LDRH     r0,[r0,#0]  ; WkTime
00031e  f1000001          ADD      r0,r0,#1
000322  4944              LDR      r1,|L1.1076|
000324  8008              STRH     r0,[r1,#0]
;;;1259       if (WkTime >= 250) ///5s
000326  4608              MOV      r0,r1
000328  8800              LDRH     r0,[r0,#0]  ; WkTime
00032a  28fa              CMP      r0,#0xfa
00032c  db1d              BLT      |L1.874|
;;;1260       {
;;;1261   
;;;1262   #if APP_USART_1_ENABLE
;;;1263           if (AppInfo.TaskUsartCnt[COM1] < 10)
00032e  483f              LDR      r0,|L1.1068|
000330  f8b00094          LDRH     r0,[r0,#0x94]  ; AppInfo
000334  280a              CMP      r0,#0xa
000336  da03              BGE      |L1.832|
;;;1264           {
;;;1265               AppInfo.ResetF = 1;
000338  f04f0001          MOV      r0,#1
00033c  493b              LDR      r1,|L1.1068|
00033e  70c8              STRB     r0,[r1,#3]
                  |L1.832|
;;;1266           }
;;;1267   #endif
;;;1268   
;;;1269   #if APP_USART_2_ENABLE
;;;1270           if (AppInfo.TaskUsartCnt[COM2] < 10)
;;;1271               AppInfo.ResetF = 1;
;;;1272   #endif
;;;1273   
;;;1274   #if APP_USART_3_ENABLE
;;;1275   
;;;1276           if (AppInfo.TaskUsartCnt[COM3] < 10)
;;;1277               AppInfo.ResetF = 1;
;;;1278   #endif
;;;1279   
;;;1280   #if APP_USART_4_ENABLE
;;;1281           if (AppInfo.TaskUsartCnt[COM4] < 10)
;;;1282               AppInfo.ResetF = 1;
;;;1283   #endif
;;;1284   
;;;1285   #if APP_USART_5_ENABLE
;;;1286           if (AppInfo.TaskUsartCnt[COM5] < 10)
;;;1287               AppInfo.ResetF = 1;
;;;1288   #endif
;;;1289   
;;;1290   #if APP_USART_6_ENABLE
;;;1291           if (AppInfo.TaskUsartCnt[COM6] < 10)
000340  483a              LDR      r0,|L1.1068|
000342  f8b0009e          LDRH     r0,[r0,#0x9e]
000346  280a              CMP      r0,#0xa
000348  da03              BGE      |L1.850|
;;;1292           {
;;;1293               AppInfo.ResetF = 1;
00034a  f04f0001          MOV      r0,#1
00034e  4937              LDR      r1,|L1.1068|
000350  70c8              STRB     r0,[r1,#3]
                  |L1.850|
;;;1294           }
;;;1295   #endif
;;;1296   
;;;1297           AppInfo.TaskUsartCnt[COM1] = 0;
000352  f04f0000          MOV      r0,#0
000356  4935              LDR      r1,|L1.1068|
000358  f8a10094          STRH     r0,[r1,#0x94]
;;;1298   
;;;1299   #if 0
;;;1300           AppInfo.TaskUsartCnt[COM2] = 0;
;;;1301           AppInfo.TaskUsartCnt[COM3] = 0;
;;;1302           AppInfo.TaskUsartCnt[COM4] = 0;
;;;1303           AppInfo.TaskUsartCnt[COM5] = 0;
;;;1304   #endif
;;;1305   
;;;1306           AppInfo.TaskUsartCnt[COM6] = 0;
00035c  4601              MOV      r1,r0
00035e  4833              LDR      r0,|L1.1068|
000360  f8a0109e          STRH     r1,[r0,#0x9e]
;;;1307   
;;;1308           WkTime = 0;
000364  4608              MOV      r0,r1
000366  4933              LDR      r1,|L1.1076|
000368  8008              STRH     r0,[r1,#0]
                  |L1.874|
;;;1309       }
;;;1310   }
00036a  4770              BX       lr
;;;1311   
                          ENDP

                  CheckRecInfo PROC
;;;1659   
;;;1660   void CheckRecInfo(void)
00036c  e92d4ff8          PUSH     {r3-r11,lr}
;;;1661   {
;;;1662       uint16_t  cnt, temp;
;;;1663       uint8_t i, *ptr, OK1 = 0, OK2 = 0, *P1, *P2;
000370  f04f0900          MOV      r9,#0
000374  46ca              MOV      r10,r9
;;;1664   
;;;1665       cnt = sizeof(RecInfo);
000376  f04f0010          MOV      r0,#0x10
00037a  9000              STR      r0,[sp,#0]
;;;1666   
;;;1667       ptr = (uint8_t *)&(RecInfo.Flag[0]);
00037c  f8df8094          LDR      r8,|L1.1044|
;;;1668   
;;;1669       //读取通过I2C记录在EEPROM里的标志数据
;;;1670       //sEE_ReadBuffer(ptr, 0, &cnt);
;;;1671   
;;;1672       BSP_ReadI2C1(ptr, 0, &cnt);
000380  466a              MOV      r2,sp
000382  f04f0100          MOV      r1,#0
000386  4640              MOV      r0,r8
000388  f7fffffe          BL       BSP_ReadI2C1
;;;1673   
;;;1674       if ((RecInfo.Flag[0] == 0x61) && (RecInfo.Flag[1] == 0x62) && \
00038c  4640              MOV      r0,r8
00038e  7800              LDRB     r0,[r0,#0]  ; RecInfo
000390  2861              CMP      r0,#0x61
000392  d11e              BNE      |L1.978|
000394  4640              MOV      r0,r8
000396  7840              LDRB     r0,[r0,#1]  ; RecInfo
000398  2862              CMP      r0,#0x62
00039a  d11a              BNE      |L1.978|
;;;1675           (RecInfo.Flag[2] == 0x52) && (RecInfo.Flag[3] == 0x51))
00039c  4640              MOV      r0,r8
00039e  7880              LDRB     r0,[r0,#2]  ; RecInfo
0003a0  2852              CMP      r0,#0x52
0003a2  d116              BNE      |L1.978|
0003a4  4640              MOV      r0,r8
0003a6  78c0              LDRB     r0,[r0,#3]  ; RecInfo
0003a8  2851              CMP      r0,#0x51
0003aa  d112              BNE      |L1.978|
;;;1676       {
;;;1677           if ((RecInfo.NextIndex < REC_SIZE + 1) && (RecInfo.NextIndex > 0))
0003ac  4640              MOV      r0,r8
0003ae  7900              LDRB     r0,[r0,#4]  ; RecInfo
0003b0  2820              CMP      r0,#0x20
0003b2  da0e              BGE      |L1.978|
0003b4  4640              MOV      r0,r8
0003b6  7900              LDRB     r0,[r0,#4]  ; RecInfo
0003b8  2800              CMP      r0,#0
0003ba  dd0a              BLE      |L1.978|
;;;1678           {
;;;1679               temp = Calc_CRCByte((uint8_t *)&(RecInfo.Flag[0]), 6);
0003bc  2106              MOVS     r1,#6
0003be  4640              MOV      r0,r8
0003c0  f7fffffe          BL       Calc_CRCByte
0003c4  4607              MOV      r7,r0
;;;1680   
;;;1681               if (temp == RecInfo.Crc)
0003c6  4640              MOV      r0,r8
0003c8  88c0              LDRH     r0,[r0,#6]  ; RecInfo
0003ca  42b8              CMP      r0,r7
0003cc  d101              BNE      |L1.978|
;;;1682               {
;;;1683                   OK1 = 1;
0003ce  f04f0901          MOV      r9,#1
                  |L1.978|
;;;1684               }
;;;1685           }
;;;1686       }
;;;1687       if ((RecInfo.Bk_Flag[0] == 0x61) && (RecInfo.Bk_Flag[1] == 0x62) && \
0003d2  4810              LDR      r0,|L1.1044|
0003d4  7a00              LDRB     r0,[r0,#8]  ; RecInfo
0003d6  2861              CMP      r0,#0x61
0003d8  d137              BNE      |L1.1098|
0003da  480e              LDR      r0,|L1.1044|
0003dc  7a40              LDRB     r0,[r0,#9]
0003de  2862              CMP      r0,#0x62
0003e0  d133              BNE      |L1.1098|
;;;1688           (RecInfo.Bk_Flag[2] == 0x52) && (RecInfo.Bk_Flag[3] == 0x51))
0003e2  480c              LDR      r0,|L1.1044|
0003e4  7a80              LDRB     r0,[r0,#0xa]
0003e6  2852              CMP      r0,#0x52
0003e8  d12f              BNE      |L1.1098|
0003ea  480a              LDR      r0,|L1.1044|
0003ec  7ac0              LDRB     r0,[r0,#0xb]
0003ee  2851              CMP      r0,#0x51
0003f0  d12b              BNE      |L1.1098|
;;;1689       {
;;;1690           if ((RecInfo.Bk_NextIndex < REC_SIZE + 1) && (RecInfo.Bk_NextIndex > 0))
0003f2  4808              LDR      r0,|L1.1044|
0003f4  7b00              LDRB     r0,[r0,#0xc]  ; RecInfo
0003f6  2820              CMP      r0,#0x20
0003f8  da27              BGE      |L1.1098|
0003fa  4806              LDR      r0,|L1.1044|
0003fc  7b00              LDRB     r0,[r0,#0xc]  ; RecInfo
0003fe  2800              CMP      r0,#0
000400  dd23              BLE      |L1.1098|
;;;1691           {
;;;1692               temp = Calc_CRCByte((uint8_t *)&(RecInfo.Bk_Flag[0]), 6);
000402  2106              MOVS     r1,#6
000404  4803              LDR      r0,|L1.1044|
000406  3008              ADDS     r0,r0,#8
000408  e016              B        |L1.1080|
00040a  0000              DCW      0x0000
                  |L1.1036|
                          DCD      g_I2C_RdyF
                  |L1.1040|
                          DCD      LJBPosInfo
                  |L1.1044|
                          DCD      RecInfo
                  |L1.1048|
                          DCD      D110VCnt
                  |L1.1052|
                          DCD      PosIndex
                  |L1.1056|
                          DCD      D110VADBuf+0x28
                  |L1.1060|
                          DCD      g_changed
                  |L1.1064|
                          DCD      UserInf
                  |L1.1068|
                          DCD      AppInfo
                  |L1.1072|
                          DCD      Tm10ms
                  |L1.1076|
                          DCD      WkTime
                  |L1.1080|
000438  f7fffffe          BL       Calc_CRCByte
00043c  4607              MOV      r7,r0
;;;1693   
;;;1694               if (temp == RecInfo.Bk_Crc)
00043e  48fe              LDR      r0,|L1.2104|
000440  89c0              LDRH     r0,[r0,#0xe]  ; RecInfo
000442  42b8              CMP      r0,r7
000444  d101              BNE      |L1.1098|
;;;1695               {
;;;1696                   OK2 = 1;
000446  f04f0a01          MOV      r10,#1
                  |L1.1098|
;;;1697               }
;;;1698           }
;;;1699       }
;;;1700   
;;;1701       P1 = (uint8_t *)&(RecInfo.Flag[0]);
00044a  4dfb              LDR      r5,|L1.2104|
;;;1702       P2 = (uint8_t *)&(RecInfo.Bk_Flag[0]);
00044c  f1050608          ADD      r6,r5,#8
;;;1703   
;;;1704       if (OK1)
000450  f1b90f00          CMP      r9,#0
000454  d012              BEQ      |L1.1148|
;;;1705       {
;;;1706           for (i = 0; i < 8; i++)
000456  f04f0400          MOV      r4,#0
00045a  e006              B        |L1.1130|
                  |L1.1116|
;;;1707           {
;;;1708               *P2++ = *P1++;
00045c  f8150b01          LDRB     r0,[r5],#1
000460  f8060b01          STRB     r0,[r6],#1
000464  f1040001          ADD      r0,r4,#1              ;1706
000468  b2c4              UXTB     r4,r0                 ;1706
                  |L1.1130|
00046a  2c08              CMP      r4,#8                 ;1706
00046c  dbf6              BLT      |L1.1116|
;;;1709           }
;;;1710   
;;;1711           //FLASH_WP_DISABLE;
;;;1712           //sEE_WriteBuffer((uint8_t *)&(RecInfo.Bk_Flag[0]), 8, 8);
;;;1713   
;;;1714           BSP_WriteI2C1((uint8_t *)&(RecInfo.Bk_Flag[0]), 8, 8);
00046e  2208              MOVS     r2,#8
000470  4611              MOV      r1,r2
000472  48f1              LDR      r0,|L1.2104|
000474  3008              ADDS     r0,r0,#8
000476  f7fffffe          BL       BSP_WriteI2C1
00047a  e040              B        |L1.1278|
                  |L1.1148|
;;;1715   
;;;1716           //FLASH_WP_ENABLE;
;;;1717       }
;;;1718       else if (OK2)
00047c  f1ba0f00          CMP      r10,#0
000480  d012              BEQ      |L1.1192|
;;;1719       {
;;;1720           for (i = 0; i < 8; i++)
000482  f04f0400          MOV      r4,#0
000486  e006              B        |L1.1174|
                  |L1.1160|
;;;1721           {
;;;1722               *P1++ = *P2++;
000488  f8160b01          LDRB     r0,[r6],#1
00048c  f8050b01          STRB     r0,[r5],#1
000490  f1040001          ADD      r0,r4,#1              ;1720
000494  b2c4              UXTB     r4,r0                 ;1720
                  |L1.1174|
000496  2c08              CMP      r4,#8                 ;1720
000498  dbf6              BLT      |L1.1160|
;;;1723           }
;;;1724   
;;;1725           //FLASH_WP_DISABLE;
;;;1726           //sEE_WriteBuffer((uint8_t *)&(RecInfo.Flag[0]), 0, 8);
;;;1727           BSP_WriteI2C1((uint8_t *)&(RecInfo.Bk_Flag[0]), 0, 8);
00049a  2208              MOVS     r2,#8
00049c  2100              MOVS     r1,#0
00049e  48e6              LDR      r0,|L1.2104|
0004a0  3008              ADDS     r0,r0,#8
0004a2  f7fffffe          BL       BSP_WriteI2C1
0004a6  e02a              B        |L1.1278|
                  |L1.1192|
;;;1728           //FLASH_WP_ENABLE;
;;;1729       }
;;;1730       else
;;;1731       {
;;;1732           RecInfo.Flag[0] = 0x61;
0004a8  f04f0061          MOV      r0,#0x61
0004ac  49e2              LDR      r1,|L1.2104|
0004ae  7008              STRB     r0,[r1,#0]
;;;1733           RecInfo.Flag[1] = 0x62;
0004b0  f04f0062          MOV      r0,#0x62
0004b4  7048              STRB     r0,[r1,#1]
;;;1734           RecInfo.Flag[2] = 0x52;
0004b6  f04f0052          MOV      r0,#0x52
0004ba  7088              STRB     r0,[r1,#2]
;;;1735           RecInfo.Flag[3] = 0x51;
0004bc  f04f0051          MOV      r0,#0x51
0004c0  70c8              STRB     r0,[r1,#3]
;;;1736   
;;;1737           RecInfo.NextIndex = 1;
0004c2  f04f0001          MOV      r0,#1
0004c6  7108              STRB     r0,[r1,#4]
;;;1738           RecInfo.TotNewRec = 0;
0004c8  f04f0000          MOV      r0,#0
0004cc  7148              STRB     r0,[r1,#5]
;;;1739   
;;;1740           RecInfo.Crc = Calc_CRCByte((uint8_t *)&(RecInfo.Flag[0]), 6);
0004ce  f04f0106          MOV      r1,#6
0004d2  48d9              LDR      r0,|L1.2104|
0004d4  f7fffffe          BL       Calc_CRCByte
0004d8  49d7              LDR      r1,|L1.2104|
0004da  80c8              STRH     r0,[r1,#6]
;;;1741   
;;;1742           for (i = 0; i < 8; i++)
0004dc  f04f0400          MOV      r4,#0
0004e0  e006              B        |L1.1264|
                  |L1.1250|
;;;1743           {
;;;1744               *P2++ = *P1++;
0004e2  f8150b01          LDRB     r0,[r5],#1
0004e6  f8060b01          STRB     r0,[r6],#1
0004ea  f1040001          ADD      r0,r4,#1              ;1742
0004ee  b2c4              UXTB     r4,r0                 ;1742
                  |L1.1264|
0004f0  2c08              CMP      r4,#8                 ;1742
0004f2  dbf6              BLT      |L1.1250|
;;;1745           }
;;;1746   
;;;1747           //FLASH_WP_DISABLE;
;;;1748           //sEE_WriteBuffer((uint8_t *)&(RecInfo.Flag[0]), 0, 16);
;;;1749           //FLASH_WP_ENABLE;
;;;1750   
;;;1751           BSP_WriteI2C1((uint8_t *)&(RecInfo.Flag[0]), 0, 16);
0004f4  2210              MOVS     r2,#0x10
0004f6  2100              MOVS     r1,#0
0004f8  48cf              LDR      r0,|L1.2104|
0004fa  f7fffffe          BL       BSP_WriteI2C1
                  |L1.1278|
;;;1752       }
;;;1753   }
0004fe  e8bd8ff8          POP      {r3-r11,pc}
;;;1754   
                          ENDP

                  GetParams PROC
;;;1316   */
;;;1317   void GetParams(void)
000502  e92d41f0          PUSH     {r4-r8,lr}
;;;1318   {
;;;1319       uint8_t err = 0;
000506  f04f0500          MOV      r5,#0
;;;1320       uint16_t crc, tmp;
;;;1321       uint32_t addr;
;;;1322   
;;;1323       F205_ReadParams(PARAMS_ADDRESS, &(ParamBuf[0]), sizeof(ParamBuf));
00050a  f44f7280          MOV      r2,#0x100
00050e  49cb              LDR      r1,|L1.2108|
000510  48cb              LDR      r0,|L1.2112|
000512  f7fffffe          BL       F205_ReadParams
;;;1324       crc = Calc_CRCByte(ParamBuf + 16, 14);
000516  210e              MOVS     r1,#0xe
000518  48c8              LDR      r0,|L1.2108|
00051a  3010              ADDS     r0,r0,#0x10
00051c  f7fffffe          BL       Calc_CRCByte
000520  4604              MOV      r4,r0
;;;1325       tmp = ((uint16_t)ParamBuf[30] << 8) + ParamBuf[31];
000522  48c6              LDR      r0,|L1.2108|
000524  7fc0              LDRB     r0,[r0,#0x1f]  ; ParamBuf
000526  49c5              LDR      r1,|L1.2108|
000528  7f89              LDRB     r1,[r1,#0x1e]  ; ParamBuf
00052a  eb002001          ADD      r0,r0,r1,LSL #8
00052e  b287              UXTH     r7,r0
;;;1326       if ((crc != tmp) || (ParamBuf[16] != 0x71) || (ParamBuf[17] != 0x61) || \
000530  42bc              CMP      r4,r7
000532  d126              BNE      |L1.1410|
000534  48c1              LDR      r0,|L1.2108|
000536  7c00              LDRB     r0,[r0,#0x10]  ; ParamBuf
000538  2871              CMP      r0,#0x71
00053a  d122              BNE      |L1.1410|
00053c  48bf              LDR      r0,|L1.2108|
00053e  7c40              LDRB     r0,[r0,#0x11]  ; ParamBuf
000540  2861              CMP      r0,#0x61
000542  d11e              BNE      |L1.1410|
;;;1327           (ParamBuf[18] != 0x42) || (ParamBuf[19] != 0x55)|| \
000544  48bd              LDR      r0,|L1.2108|
000546  7c80              LDRB     r0,[r0,#0x12]  ; ParamBuf
000548  2842              CMP      r0,#0x42
00054a  d11a              BNE      |L1.1410|
00054c  48bb              LDR      r0,|L1.2108|
00054e  7cc0              LDRB     r0,[r0,#0x13]  ; ParamBuf
000550  2855              CMP      r0,#0x55
000552  d116              BNE      |L1.1410|
;;;1328           (ParamBuf[20] != APP_SOFT_VER_MAIN) || (ParamBuf[21] != APP_SOFT_VER_SUB) || \
000554  48b9              LDR      r0,|L1.2108|
000556  7d00              LDRB     r0,[r0,#0x14]  ; ParamBuf
000558  2810              CMP      r0,#0x10
00055a  d112              BNE      |L1.1410|
00055c  48b7              LDR      r0,|L1.2108|
00055e  7d40              LDRB     r0,[r0,#0x15]  ; ParamBuf
000560  b978              CBNZ     r0,|L1.1410|
;;;1329           (ParamBuf[22] != 0x20) || (ParamBuf[23] != APP_SOFT_VER_YEAR) || \
000562  48b6              LDR      r0,|L1.2108|
000564  7d80              LDRB     r0,[r0,#0x16]  ; ParamBuf
000566  2820              CMP      r0,#0x20
000568  d10b              BNE      |L1.1410|
00056a  48b4              LDR      r0,|L1.2108|
00056c  7dc0              LDRB     r0,[r0,#0x17]  ; ParamBuf
00056e  2813              CMP      r0,#0x13
000570  d107              BNE      |L1.1410|
;;;1330           (ParamBuf[24] != APP_SOFT_VER_MONTH) || (ParamBuf[25] != APP_SOFT_VER_DATE))
000572  48b2              LDR      r0,|L1.2108|
000574  7e00              LDRB     r0,[r0,#0x18]  ; ParamBuf
000576  2810              CMP      r0,#0x10
000578  d103              BNE      |L1.1410|
00057a  48b0              LDR      r0,|L1.2108|
00057c  7e40              LDRB     r0,[r0,#0x19]  ; ParamBuf
00057e  2810              CMP      r0,#0x10
000580  d031              BEQ      |L1.1510|
                  |L1.1410|
;;;1331       {
;;;1332   
;;;1333           ParamBuf[16] = 0x71;
000582  f04f0071          MOV      r0,#0x71
000586  49ad              LDR      r1,|L1.2108|
000588  7408              STRB     r0,[r1,#0x10]
;;;1334           ParamBuf[17] = 0x61;
00058a  f04f0061          MOV      r0,#0x61
00058e  7448              STRB     r0,[r1,#0x11]
;;;1335           ParamBuf[18] = 0x42;
000590  f04f0042          MOV      r0,#0x42
000594  7488              STRB     r0,[r1,#0x12]
;;;1336           ParamBuf[19] = 0x55;
000596  f04f0055          MOV      r0,#0x55
00059a  74c8              STRB     r0,[r1,#0x13]
;;;1337   
;;;1338           ParamBuf[20] = APP_SOFT_VER_MAIN;
00059c  f04f0010          MOV      r0,#0x10
0005a0  7508              STRB     r0,[r1,#0x14]
;;;1339           ParamBuf[21] = APP_SOFT_VER_SUB;
0005a2  f04f0000          MOV      r0,#0
0005a6  7548              STRB     r0,[r1,#0x15]
;;;1340           ParamBuf[22] = 0x20;
0005a8  f04f0020          MOV      r0,#0x20
0005ac  7588              STRB     r0,[r1,#0x16]
;;;1341           ParamBuf[23] = APP_SOFT_VER_YEAR;
0005ae  f04f0013          MOV      r0,#0x13
0005b2  75c8              STRB     r0,[r1,#0x17]
;;;1342           ParamBuf[24] = APP_SOFT_VER_MONTH;
0005b4  f04f0010          MOV      r0,#0x10
0005b8  7608              STRB     r0,[r1,#0x18]
;;;1343           ParamBuf[25] = APP_SOFT_VER_DATE;
0005ba  7648              STRB     r0,[r1,#0x19]
;;;1344   
;;;1345           ParamBuf[26] = 0;
0005bc  f04f0000          MOV      r0,#0
0005c0  7688              STRB     r0,[r1,#0x1a]
;;;1346           ParamBuf[27] = 0;
0005c2  76c8              STRB     r0,[r1,#0x1b]
;;;1347           ParamBuf[28] = 0;
0005c4  7708              STRB     r0,[r1,#0x1c]
;;;1348           ParamBuf[29] = 0;
0005c6  7748              STRB     r0,[r1,#0x1d]
;;;1349           crc = Calc_CRCByte(ParamBuf + 16, 14);
0005c8  f04f010e          MOV      r1,#0xe
0005cc  489b              LDR      r0,|L1.2108|
0005ce  f1000010          ADD      r0,r0,#0x10
0005d2  f7fffffe          BL       Calc_CRCByte
0005d6  4604              MOV      r4,r0
;;;1350           ParamBuf[30] = crc >> 8;
0005d8  ea4f2024          ASR      r0,r4,#8
0005dc  4997              LDR      r1,|L1.2108|
0005de  7788              STRB     r0,[r1,#0x1e]
;;;1351           ParamBuf[31] = crc & 0xff;
0005e0  77cc              STRB     r4,[r1,#0x1f]
;;;1352   
;;;1353           err = 1;
0005e2  f04f0501          MOV      r5,#1
                  |L1.1510|
;;;1354       }
;;;1355   
;;;1356       if (err)
0005e6  b175              CBZ      r5,|L1.1542|
;;;1357       {
;;;1358   
;;;1359           err = F205_EraseSectors(PARAMS_START_SECTOR, PARAMS_END_SECTOR);
0005e8  2110              MOVS     r1,#0x10
0005ea  4608              MOV      r0,r1
0005ec  f7fffffe          BL       F205_EraseSectors
0005f0  4605              MOV      r5,r0
;;;1360   
;;;1361           if (!err)
0005f2  b945              CBNZ     r5,|L1.1542|
;;;1362           {
;;;1363   
;;;1364               addr = PARAMS_ADDRESS;
0005f4  4e92              LDR      r6,|L1.2112|
;;;1365               err = F205_WriteParams(addr, &(ParamBuf[0]), sizeof(ParamBuf));
0005f6  f44f7280          MOV      r2,#0x100
0005fa  4990              LDR      r1,|L1.2108|
0005fc  4630              MOV      r0,r6
0005fe  f7fffffe          BL       F205_WriteParams
000602  4605              MOV      r5,r0
;;;1366               if (err)
000604  bf00              NOP      
                  |L1.1542|
;;;1367               {
;;;1368               }
;;;1369           }
;;;1370       }
;;;1371   }
000606  e8bd81f0          POP      {r4-r8,pc}
;;;1372   
                          ENDP

                  AppTaskCreate PROC
;;;810    
;;;811    static  void  AppTaskCreate (void)
00060a  b500              PUSH     {lr}
;;;812    {
00060c  b087              SUB      sp,sp,#0x1c
;;;813    #if (OS_TASK_NAME_EN > 0)
;;;814        CPU_INT08U  err;
;;;815    #endif
;;;816    
;;;817        ///////////////////////////////////////////////////////////////////////////////////////////
;;;818        ///                             Create USART TASK
;;;819        ///////////////////////////////////////////////////////////////////////////////////////////
;;;820    #if APP_USART_1_ENABLE
;;;821        OSTaskCreateExt((void (*)(void *)) AppTaskUsart1,            ///Create the Usart task
00060e  2003              MOVS     r0,#3
000610  2100              MOVS     r1,#0
000612  f44f6280          MOV      r2,#0x400
000616  4b8b              LDR      r3,|L1.2116|
000618  e9cd3201          STRD     r3,r2,[sp,#4]
00061c  e9cd1003          STRD     r1,r0,[sp,#0xc]
000620  2015              MOVS     r0,#0x15
000622  4603              MOV      r3,r0
000624  4a88              LDR      r2,|L1.2120|
000626  9000              STR      r0,[sp,#0]
000628  4888              LDR      r0,|L1.2124|
00062a  f7fffffe          BL       OSTaskCreateExt
;;;822                        (void           *) 0,
;;;823                        (OS_STK         *)&AppTaskUsartStk_1[APP_TASK_USART_1_STK_SIZE - 1],
;;;824                        (INT8U           ) APP_TASK_USART_1_PRIO,
;;;825                        (INT16U          ) APP_TASK_USART_1_PRIO,
;;;826                        (OS_STK         *)&AppTaskUsartStk_1[0],
;;;827                        (INT32U          ) APP_TASK_USART_1_STK_SIZE,
;;;828                        (void           *) 0,
;;;829                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;830    
;;;831    #if (OS_TASK_NAME_EN > 0)
;;;832        OSTaskNameSet(APP_TASK_USART_1_PRIO, (unsigned char *)"Usart1", &err);
00062e  aa06              ADD      r2,sp,#0x18
000630  a187              ADR      r1,|L1.2128|
000632  2015              MOVS     r0,#0x15
000634  f7fffffe          BL       OSTaskNameSet
;;;833    #endif
;;;834    #endif
;;;835    
;;;836    #if APP_USART_2_ENABLE
;;;837        OSTaskCreateExt((void (*)(void *)) AppTaskUsart2,            ///Create the Usart task
;;;838                        (void           *) 0,
;;;839                        (OS_STK         *)&AppTaskUsartStk_1[APP_TASK_USART_2_STK_SIZE - 1],
;;;840                        (INT8U           ) APP_TASK_USART_2_PRIO,
;;;841                        (INT16U          ) APP_TASK_USART_2_PRIO,
;;;842                        (OS_STK         *)&AppTaskUsartStk_2[0],
;;;843                        (INT32U          ) APP_TASK_USART_2_STK_SIZE,
;;;844                        (void           *) 0,
;;;845                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;846    
;;;847    #if (OS_TASK_NAME_EN > 0)
;;;848        OSTaskNameSet(APP_TASK_USART_2_PRIO, (unsigned char *)"Usart2", &err);
;;;849    #endif
;;;850    #endif
;;;851    
;;;852    #if APP_USART_3_ENABLE
;;;853        OSTaskCreateExt((void (*)(void *)) AppTaskUsart3,            ///Create the Usart task
;;;854                        (void           *) 0,
;;;855                        (OS_STK         *)&AppTaskUsartStk_3[APP_TASK_USART_3_STK_SIZE - 1],
;;;856                        (INT8U           ) APP_TASK_USART_3_PRIO,
;;;857                        (INT16U          ) APP_TASK_USART_3_PRIO,
;;;858                        (OS_STK         *)&AppTaskUsartStk_3[0],
;;;859                        (INT32U          ) APP_TASK_USART_3_STK_SIZE,
;;;860                        (void           *) 0,
;;;861                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;862    
;;;863    #if (OS_TASK_NAME_EN > 0)
;;;864        OSTaskNameSet(APP_TASK_USART_3_PRIO, (unsigned char *)"Usart3", &err);
;;;865    #endif
;;;866    #endif
;;;867    
;;;868    #if APP_USART_4_ENABLE
;;;869        OSTaskCreateExt((void (*)(void *)) AppTaskUsart4,            ///Create the Usart task
;;;870                        (void           *) 0,
;;;871                        (OS_STK         *)&AppTaskUsartStk_4[APP_TASK_USART_4_STK_SIZE - 1],
;;;872                        (INT8U           ) APP_TASK_USART_4_PRIO,
;;;873                        (INT16U          ) APP_TASK_USART_4_PRIO,
;;;874                        (OS_STK         *)&AppTaskUsartStk_4[0],
;;;875                        (INT32U          ) APP_TASK_USART_4_STK_SIZE,
;;;876                        (void           *) 0,
;;;877                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;878    
;;;879    #if (OS_TASK_NAME_EN > 0)
;;;880        OSTaskNameSet(APP_TASK_USART_4_PRIO, (unsigned char *)"Usart4", &err);
;;;881    #endif
;;;882    #endif
;;;883    
;;;884    #if APP_USART_5_ENABLE
;;;885        OSTaskCreateExt((void (*)(void *)) AppTaskUsart5,            ///Create the Usart task
;;;886                        (void           *) 0,
;;;887                        (OS_STK         *)&AppTaskUsartStk_5[APP_TASK_USART_5_STK_SIZE - 1],
;;;888                        (INT8U           ) APP_TASK_USART_5_PRIO,
;;;889                        (INT16U          ) APP_TASK_USART_5_PRIO,
;;;890                        (OS_STK         *)&AppTaskUsartStk_5[0],
;;;891                        (INT32U          ) APP_TASK_USART_5_STK_SIZE,
;;;892                        (void           *) 0,
;;;893                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;894    
;;;895    #if (OS_TASK_NAME_EN > 0)
;;;896        OSTaskNameSet(APP_TASK_USART_5_PRIO, (unsigned char *)"Usart5", &err);
;;;897    #endif
;;;898    #endif
;;;899    
;;;900    #if APP_USART_6_ENABLE
;;;901        OSTaskCreateExt((void (*)(void *)) AppTaskUsart6,            ///Create the Usart task
000638  2003              MOVS     r0,#3
00063a  2100              MOVS     r1,#0
00063c  f44f7200          MOV      r2,#0x200
000640  4b85              LDR      r3,|L1.2136|
000642  e9cd3201          STRD     r3,r2,[sp,#4]
000646  e9cd1003          STRD     r1,r0,[sp,#0xc]
00064a  201a              MOVS     r0,#0x1a
00064c  4603              MOV      r3,r0
00064e  4a83              LDR      r2,|L1.2140|
000650  9000              STR      r0,[sp,#0]
000652  4883              LDR      r0,|L1.2144|
000654  f7fffffe          BL       OSTaskCreateExt
;;;902                        (void           *) 0,
;;;903                        (OS_STK         *)&AppTaskUsartStk_6[APP_TASK_USART_6_STK_SIZE - 1],
;;;904                        (INT8U           ) APP_TASK_USART_6_PRIO,
;;;905                        (INT16U          ) APP_TASK_USART_6_PRIO,
;;;906                        (OS_STK         *)&AppTaskUsartStk_6[0],
;;;907                        (INT32U          ) APP_TASK_USART_6_STK_SIZE,
;;;908                        (void           *) 0,
;;;909                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;910    
;;;911    #if (OS_TASK_NAME_EN > 0)
;;;912        OSTaskNameSet(APP_TASK_USART_6_PRIO, (unsigned char *)"Usart6", &err);
000658  aa06              ADD      r2,sp,#0x18
00065a  a182              ADR      r1,|L1.2148|
00065c  201a              MOVS     r0,#0x1a
00065e  f7fffffe          BL       OSTaskNameSet
;;;913    #endif
;;;914    #endif
;;;915    
;;;916    
;;;917    ///////////////////////////////////////////////////////////////////////////////////////////
;;;918    ///                             Create ADC TASK
;;;919    ///////////////////////////////////////////////////////////////////////////////////////////
;;;920    #if APP_ADC_ENABLE
;;;921        OSTaskCreateExt((void (*)(void *)) AppTaskADC,            ///Create the ADC task
000662  2003              MOVS     r0,#3
000664  2100              MOVS     r1,#0
000666  f44f7200          MOV      r2,#0x200
00066a  4b80              LDR      r3,|L1.2156|
00066c  e9cd3201          STRD     r3,r2,[sp,#4]
000670  e9cd1003          STRD     r1,r0,[sp,#0xc]
000674  200b              MOVS     r0,#0xb
000676  4603              MOV      r3,r0
000678  4a7d              LDR      r2,|L1.2160|
00067a  9000              STR      r0,[sp,#0]
00067c  487d              LDR      r0,|L1.2164|
00067e  f7fffffe          BL       OSTaskCreateExt
;;;922                        (void           *) 0,
;;;923                        (OS_STK         *)&AppTaskADCStk[APP_TASK_ADC_STK_SIZE - 1],
;;;924                        (INT8U           ) APP_TASK_ADC_PRIO,
;;;925                        (INT16U          ) APP_TASK_ADC_PRIO,
;;;926                        (OS_STK         *)&AppTaskADCStk[0],
;;;927                        (INT32U          ) APP_TASK_ADC_STK_SIZE,
;;;928                        (void           *) 0,
;;;929                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;930    
;;;931    #if (OS_TASK_NAME_EN > 0)
;;;932        OSTaskNameSet(APP_TASK_ADC_PRIO, (unsigned char *)"ADC", &err);
000682  aa06              ADD      r2,sp,#0x18
000684  a17c              ADR      r1,|L1.2168|
000686  200b              MOVS     r0,#0xb
000688  f7fffffe          BL       OSTaskNameSet
;;;933    #endif
;;;934    #endif
;;;935    
;;;936    ///////////////////////////////////////////////////////////////////////////////////////////
;;;937    ///                             Create DAC TASK
;;;938    ///////////////////////////////////////////////////////////////////////////////////////////
;;;939    #if APP_DAC_ENABLE
;;;940        OSTaskCreateExt((void (*)(void *)) AppTaskDAC,            ///Create the DAC task
;;;941                        (void           *) 0,
;;;942                        (OS_STK         *)&AppTaskDACStk[APP_TASK_DAC_STK_SIZE - 1],
;;;943                        (INT8U           ) APP_TASK_DAC_PRIO,
;;;944                        (INT16U          ) APP_TASK_DAC_PRIO,
;;;945                        (OS_STK         *)&AppTaskDACStk[0],
;;;946                        (INT32U          ) APP_TASK_DAC_STK_SIZE,
;;;947                        (void           *) 0,
;;;948                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;949    
;;;950    #if (OS_TASK_NAME_EN > 0)
;;;951        OSTaskNameSet(APP_TASK_DAC_PRIO, (unsigned char *)"DAC", &err);
;;;952    #endif
;;;953    #endif
;;;954    
;;;955    ///////////////////////////////////////////////////////////////////////////////////////////
;;;956    ///                             Create RTC TASK
;;;957    ///////////////////////////////////////////////////////////////////////////////////////////
;;;958    #if APP_RTC_ENABLE
;;;959        OSTaskCreateExt((void (*)(void *)) AppTaskRTC,            ///Create the RTC task
;;;960                        (void           *) 0,
;;;961                        (OS_STK         *)&AppTaskADCStk[APP_TASK_RTC_STK_SIZE - 1],
;;;962                        (INT8U           ) APP_TASK_RTC_PRIO,
;;;963                        (INT16U          ) APP_TASK_RTC_PRIO,
;;;964                        (OS_STK         *)&AppTaskRTCStk[0],
;;;965                        (INT32U          ) APP_TASK_RTC_STK_SIZE,
;;;966                        (void           *) 0,
;;;967                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;968    
;;;969    #if (OS_TASK_NAME_EN > 0)
;;;970        OSTaskNameSet(APP_TASK_RTC_PRIO, (unsigned char *)"RTC", &err);
;;;971    #endif
;;;972    #endif
;;;973    
;;;974    ///////////////////////////////////////////////////////////////////////////////////////////
;;;975    ///                             Create I2C TASK
;;;976    ///////////////////////////////////////////////////////////////////////////////////////////
;;;977    #if APP_I2C_1_ENABLE
;;;978        OSTaskCreateExt((void (*)(void *)) AppTaskI2C1,            ///Create the I2C_1 task
00068c  2003              MOVS     r0,#3
00068e  2100              MOVS     r1,#0
000690  f44f7200          MOV      r2,#0x200
000694  4b79              LDR      r3,|L1.2172|
000696  e9cd3201          STRD     r3,r2,[sp,#4]
00069a  e9cd1003          STRD     r1,r0,[sp,#0xc]
00069e  201b              MOVS     r0,#0x1b
0006a0  4603              MOV      r3,r0
0006a2  4a77              LDR      r2,|L1.2176|
0006a4  9000              STR      r0,[sp,#0]
0006a6  4877              LDR      r0,|L1.2180|
0006a8  f7fffffe          BL       OSTaskCreateExt
;;;979                        (void           *) 0,
;;;980                        (OS_STK         *)&AppTaskI2C1Stk[APP_TASK_I2C_1_STK_SIZE - 1],
;;;981                        (INT8U           ) APP_TASK_I2C_1_PRIO,
;;;982                        (INT16U          ) APP_TASK_I2C_1_PRIO,
;;;983                        (OS_STK         *)&AppTaskI2C1Stk[0],
;;;984                        (INT32U          ) APP_TASK_I2C_1_STK_SIZE,
;;;985                        (void           *) 0,
;;;986                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;987    
;;;988    #if (OS_TASK_NAME_EN > 0)
;;;989        OSTaskNameSet(APP_TASK_I2C_1_PRIO, (unsigned char *)"I2C_1", &err);
0006ac  aa06              ADD      r2,sp,#0x18
0006ae  a176              ADR      r1,|L1.2184|
0006b0  201b              MOVS     r0,#0x1b
0006b2  f7fffffe          BL       OSTaskNameSet
;;;990    #endif
;;;991    #endif
;;;992    
;;;993    ///////////////////////////////////////////////////////////////////////////////////////////
;;;994    ///                             Create SPI TASK
;;;995    ///////////////////////////////////////////////////////////////////////////////////////////
;;;996    #if APP_SPI_1_ENABLE
;;;997        OSTaskCreateExt((void (*)(void *)) AppTaskSPI1,            ///Create the SPI_1 task
;;;998                        (void           *) 0,
;;;999                        (OS_STK         *)&AppTaskSPI1Stk[APP_TASK_SPI_1_STK_SIZE - 1],
;;;1000                       (INT8U           ) APP_TASK_SPI_1_PRIO,
;;;1001                       (INT16U          ) APP_TASK_SPI_1_PRIO,
;;;1002                       (OS_STK         *)&AppTaskSPI1Stk[0],
;;;1003                       (INT32U          ) APP_TASK_SPI_1_STK_SIZE,
;;;1004                       (void           *) 0,
;;;1005                       (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;1006   
;;;1007   #if (OS_TASK_NAME_EN > 0)
;;;1008       OSTaskNameSet(APP_TASK_SPI_1_PRIO, (unsigned char *)"SPI_1", &err);
;;;1009   #endif
;;;1010   #endif
;;;1011   
;;;1012   ///////////////////////////////////////////////////////////////////////////////////////////
;;;1013   ///                             Create CAN TASK
;;;1014   ///////////////////////////////////////////////////////////////////////////////////////////
;;;1015   #if APP_CAN_1_ENABLE
;;;1016       OSTaskCreateExt((void (*)(void *)) AppTaskCAN1,            ///Create the CAN_1 task
;;;1017                       (void           *) 0,
;;;1018                       (OS_STK         *)&AppTaskCAN1Stk[APP_TASK_CAN_1_STK_SIZE - 1],
;;;1019                       (INT8U           ) APP_TASK_CAN_1_PRIO,
;;;1020                       (INT16U          ) APP_TASK_CAN_1_PRIO,
;;;1021                       (OS_STK         *)&AppTaskCAN1Stk[0],
;;;1022                       (INT32U          ) APP_TASK_CAN_1_STK_SIZE,
;;;1023                       (void           *) 0,
;;;1024                       (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;1025   
;;;1026   #if (OS_TASK_NAME_EN > 0)
;;;1027       OSTaskNameSet(APP_TASK_CAN_1_PRIO, (unsigned char *)"CAN_1", &err);
;;;1028   #endif
;;;1029   #endif
;;;1030   
;;;1031   
;;;1032   #if APP_CAN_2_ENABLE
;;;1033       OSTaskCreateExt((void (*)(void *)) AppTaskCAN2,            ///Create the CAN_2 task
;;;1034                       (void           *) 0,
;;;1035                       (OS_STK         *)&AppTaskCAN2Stk[APP_TASK_CAN_2_STK_SIZE - 1],
;;;1036                       (INT8U           ) APP_TASK_CAN_2_PRIO,
;;;1037                       (INT16U          ) APP_TASK_CAN_2_PRIO,
;;;1038                       (OS_STK         *)&AppTaskCAN2Stk[0],
;;;1039                       (INT32U          ) APP_TASK_CAN_2_STK_SIZE,
;;;1040                       (void           *) 0,
;;;1041                       (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;1042   
;;;1043   #if (OS_TASK_NAME_EN > 0)
;;;1044       OSTaskNameSet(APP_TASK_CAN_2_PRIO, (unsigned char *)"CAN_2", &err);
;;;1045   #endif
;;;1046   #endif
;;;1047   
;;;1048   ///////////////////////////////////////////////////////////////////////////////////////////
;;;1049   ///                             Create USB TASK
;;;1050   ///////////////////////////////////////////////////////////////////////////////////////////
;;;1051   #if APP_USB_ENABLE
;;;1052       OSTaskCreateExt((void (*)(void *)) AppTaskUSB,            ///Create the USB task
;;;1053                       (void           *) 0,
;;;1054                       (OS_STK         *)&AppTaskUSBStk[APP_TASK_USB_STK_SIZE - 1],
;;;1055                       (INT8U           ) APP_TASK_USB_PRIO,
;;;1056                       (INT16U          ) APP_TASK_USB_PRIO,
;;;1057                       (OS_STK         *)&AppTaskUSBStk[0],
;;;1058                       (INT32U          ) APP_TASK_USB_STK_SIZE,
;;;1059                       (void           *) 0,
;;;1060                       (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;1061   
;;;1062   #if (OS_TASK_NAME_EN > 0)
;;;1063       OSTaskNameSet(APP_TASK_USB_PRIO, (unsigned char *)"USB", &err);
;;;1064   #endif
;;;1065   #endif
;;;1066   
;;;1067   ///////////////////////////////////////////////////////////////////////////////////////////
;;;1068   ///                             Create SD TASK
;;;1069   ///////////////////////////////////////////////////////////////////////////////////////////
;;;1070   #if APP_SD_ENABLE
;;;1071       OSTaskCreateExt((void (*)(void *)) AppTaskSD,            ///Create the SD task
;;;1072                       (void           *) 0,
;;;1073                       (OS_STK         *)&AppTaskADCStk[APP_TASK_SD_STK_SIZE - 1],
;;;1074                       (INT8U           ) APP_TASK_SD_PRIO,
;;;1075                       (INT16U          ) APP_TASK_SD_PRIO,
;;;1076                       (OS_STK         *)&AppTaskSDStk[0],
;;;1077                       (INT32U          ) APP_TASK_SD_STK_SIZE,
;;;1078                       (void           *) 0,
;;;1079                       (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;1080   
;;;1081   #if (OS_TASK_NAME_EN > 0)
;;;1082       OSTaskNameSet(APP_TASK_SD_PRIO, (unsigned char *)"SD", &err);
;;;1083   #endif
;;;1084   #endif
;;;1085   }
0006b6  b007              ADD      sp,sp,#0x1c
0006b8  bd00              POP      {pc}
;;;1086   
                          ENDP

                  AppEventCreate PROC
;;;779    
;;;780    static  void  AppEventCreate (void)
0006ba  4770              BX       lr
;;;781    {
;;;782    #if APP_SD_ENABLE
;;;783    #if defined JLB_CPU_MAIN
;;;784        Sem_WriteSD = OSSemCreate(0);
;;;785    #endif
;;;786        Sem_SD = OSSemCreate(0);
;;;787    #endif
;;;788    
;;;789    #if APP_RTC_ENABLE
;;;790        Sem_RtcAlarm = OSSemCreate(0);
;;;791    #endif
;;;792    }
;;;793    
                          ENDP

                  SetChParams PROC
;;;1485   */
;;;1486   void SetChParams(void)
0006bc  e92d41f0          PUSH     {r4-r8,lr}
;;;1487   {
;;;1488       uint8_t i;
;;;1489   //    uint8_t err = 0;
;;;1490       uint16_t crc, tmp; //data
;;;1491       uint16_t cnt = 30;
0006c0  f04f061e          MOV      r6,#0x1e
;;;1492       //uint32_t addr;
;;;1493   
;;;1494       F205_ReadParams(PARAMS_ADDRESS, &(ParamBuf[0]), sizeof(ParamBuf));
0006c4  f44f7280          MOV      r2,#0x100
0006c8  495c              LDR      r1,|L1.2108|
0006ca  485d              LDR      r0,|L1.2112|
0006cc  f7fffffe          BL       F205_ReadParams
;;;1495   
;;;1496       crc = Calc_CRCByte(ParamBuf + 32, cnt);
0006d0  4631              MOV      r1,r6
0006d2  485a              LDR      r0,|L1.2108|
0006d4  3020              ADDS     r0,r0,#0x20
0006d6  f7fffffe          BL       Calc_CRCByte
0006da  4607              MOV      r7,r0
;;;1497   
;;;1498       tmp = ((uint16_t)ParamBuf[32 + cnt] << 8) + ParamBuf[33 + cnt];
0006dc  f1060021          ADD      r0,r6,#0x21
0006e0  4956              LDR      r1,|L1.2108|
0006e2  5c09              LDRB     r1,[r1,r0]
0006e4  f1060020          ADD      r0,r6,#0x20
0006e8  4a54              LDR      r2,|L1.2108|
0006ea  5c10              LDRB     r0,[r2,r0]
0006ec  eb012000          ADD      r0,r1,r0,LSL #8
0006f0  b285              UXTH     r5,r0
;;;1499   
;;;1500       if (crc != tmp)
0006f2  42af              CMP      r7,r5
0006f4  d012              BEQ      |L1.1820|
;;;1501       {
;;;1502           for (i = 0; i < CHANNEL_COUNT_LIMIT; i++)
0006f6  f04f0400          MOV      r4,#0
0006fa  e00c              B        |L1.1814|
                  |L1.1788|
;;;1503           {
;;;1504               ///设置通道偏置
;;;1505               AppInfo.AdcOffset[i] = 0;
0006fc  f04f0100          MOV      r1,#0
000700  4863              LDR      r0,|L1.2192|
000702  f8201014          STRH     r1,[r0,r4,LSL #1]
;;;1506   
;;;1507               ///设置通道系数
;;;1508               AppInfo.AdcRatio[i] = (float)ANALOG_CHANNEL_RATIO_110V_DEFAULT / SAMPLE_RATIO_CONSTANT;
000706  4963              LDR      r1,|L1.2196|
000708  f100000c          ADD      r0,r0,#0xc
00070c  f8401024          STR      r1,[r0,r4,LSL #2]
000710  f1040001          ADD      r0,r4,#1              ;1502
000714  b2c4              UXTB     r4,r0                 ;1502
                  |L1.1814|
000716  2c05              CMP      r4,#5                 ;1502
000718  dbf0              BLT      |L1.1788|
00071a  e053              B        |L1.1988|
                  |L1.1820|
;;;1509           }
;;;1510       }
;;;1511       else
;;;1512       {
;;;1513           for (i = 0; i < CHANNEL_COUNT_LIMIT; i++)
00071c  f04f0400          MOV      r4,#0
000720  e04e              B        |L1.1984|
                  |L1.1826|
;;;1514           {
;;;1515               AppInfo.AdcOffset[i] = ((uint16_t)ParamBuf[36 + (i << 2) + 1] << 8) + ParamBuf[36 + (i << 2) + 0];
000722  f04f0024          MOV      r0,#0x24
000726  eb000084          ADD      r0,r0,r4,LSL #2
00072a  4944              LDR      r1,|L1.2108|
00072c  5c09              LDRB     r1,[r1,r0]
00072e  f04f0024          MOV      r0,#0x24
000732  eb000084          ADD      r0,r0,r4,LSL #2
000736  f1000001          ADD      r0,r0,#1
00073a  4a40              LDR      r2,|L1.2108|
00073c  5c10              LDRB     r0,[r2,r0]
00073e  eb012000          ADD      r0,r1,r0,LSL #8
000742  b281              UXTH     r1,r0
000744  4852              LDR      r0,|L1.2192|
000746  f8201014          STRH     r1,[r0,r4,LSL #1]
;;;1516   
;;;1517   	    tmp = (((uint16_t)ParamBuf[36 + (i << 2) + 3] << 8) + ParamBuf[36 + (i << 2) + 2]) ;
00074a  f04f0024          MOV      r0,#0x24
00074e  eb000084          ADD      r0,r0,r4,LSL #2
000752  f1000002          ADD      r0,r0,#2
000756  4611              MOV      r1,r2
000758  5c09              LDRB     r1,[r1,r0]
00075a  f04f0024          MOV      r0,#0x24
00075e  eb000084          ADD      r0,r0,r4,LSL #2
000762  f1000003          ADD      r0,r0,#3
000766  5c10              LDRB     r0,[r2,r0]
000768  eb012000          ADD      r0,r1,r0,LSL #8
00076c  b285              UXTH     r5,r0
;;;1518   					
;;;1519               if ((tmp > 1200) || (tmp < 900))
00076e  f5b56f96          CMP      r5,#0x4b0
000772  dc02              BGT      |L1.1914|
000774  f5b57f61          CMP      r5,#0x384
000778  da06              BGE      |L1.1928|
                  |L1.1914|
;;;1520               {
;;;1521                   AppInfo.AdcRatio[i] = (float)ANALOG_CHANNEL_RATIO_110V_DEFAULT / SAMPLE_RATIO_CONSTANT;
00077a  4946              LDR      r1,|L1.2196|
00077c  4844              LDR      r0,|L1.2192|
00077e  f100000c          ADD      r0,r0,#0xc
000782  f8401024          STR      r1,[r0,r4,LSL #2]
000786  e018              B        |L1.1978|
                  |L1.1928|
;;;1522               }
;;;1523               else
;;;1524               {
;;;1525   	         AppInfo.AdcRatio[i] = (float)(((uint16_t)ParamBuf[36 + (i << 2) + 3] << 8) + ParamBuf[36 + (i << 2) + 2]) / SAMPLE_RATIO_CONSTANT;
000788  2124              MOVS     r1,#0x24
00078a  eb010184          ADD      r1,r1,r4,LSL #2
00078e  1c89              ADDS     r1,r1,#2
000790  4a2a              LDR      r2,|L1.2108|
000792  5c52              LDRB     r2,[r2,r1]
000794  2124              MOVS     r1,#0x24
000796  eb010184          ADD      r1,r1,r4,LSL #2
00079a  1cc9              ADDS     r1,r1,#3
00079c  4b27              LDR      r3,|L1.2108|
00079e  5c59              LDRB     r1,[r3,r1]
0007a0  eb022001          ADD      r0,r2,r1,LSL #8
0007a4  f7fffffe          BL       __aeabi_i2f
0007a8  4680              MOV      r8,r0
0007aa  f04f4187          MOV      r1,#0x43800000
0007ae  f7fffffe          BL       __aeabi_fdiv
0007b2  4937              LDR      r1,|L1.2192|
0007b4  310c              ADDS     r1,r1,#0xc
0007b6  f8410024          STR      r0,[r1,r4,LSL #2]
                  |L1.1978|
0007ba  f1040001          ADD      r0,r4,#1              ;1513
0007be  b2c4              UXTB     r4,r0                 ;1513
                  |L1.1984|
0007c0  2c05              CMP      r4,#5                 ;1513
0007c2  dbae              BLT      |L1.1826|
                  |L1.1988|
;;;1526               }
;;;1527           }
;;;1528       }
;;;1529   
;;;1530   #if 0
;;;1531       uint8_t i;
;;;1532       //int16_t *p;
;;;1533   //  uint16_t tmp;
;;;1534       uint16_t data;
;;;1535   
;;;1536       ///设置通道偏置
;;;1537       for (i = 0; i < CHANNEL_COUNT_LIMIT; i++)
;;;1538       {
;;;1539           data = CalibrationInfo[i][1];
;;;1540           data <<= 8;
;;;1541           data |= CalibrationInfo[i][0];
;;;1542   
;;;1543           if (data > 2000)
;;;1544           {
;;;1545               data = 0;
;;;1546           }
;;;1547   
;;;1548           AppInfo.AdcOffset[i] = data;
;;;1549       }
;;;1550   
;;;1551       ///设置通道系数
;;;1552       for (i = 0; i < CHANNEL_COUNT_LIMIT; i++)
;;;1553       {
;;;1554           data = CalibrationInfo[i][3];
;;;1555           data <<= 8;
;;;1556           data |= CalibrationInfo[i][2];
;;;1557   
;;;1558           if ((data > 40960) || (data < 1024))
;;;1559           {
;;;1560               data = ANALOG_CHANNEL_RATIO_110V_DEFAULT;
;;;1561           }
;;;1562   
;;;1563           AppInfo.AdcRatio[i] = (float)data / 256;
;;;1564       }
;;;1565   #endif
;;;1566   
;;;1567   }
0007c4  e8bd81f0          POP      {r4-r8,pc}
;;;1568   
                          ENDP

                  SetAppParams PROC
;;;1474   */
;;;1475   void SetAppParams(void)
0007c8  f04f0050          MOV      r0,#0x50
;;;1476   {
;;;1477       AppInfo.BdAddr = 0x50;      ///板地址
0007cc  4930              LDR      r1,|L1.2192|
0007ce  f1a101fc          SUB      r1,r1,#0xfc
0007d2  7008              STRB     r0,[r1,#0]
;;;1478       AppInfo.AnalogChCnt = 5;    ///模拟通道数
0007d4  f04f0005          MOV      r0,#5
0007d8  f881011c          STRB     r0,[r1,#0x11c]
;;;1479   }
0007dc  4770              BX       lr
;;;1480   
                          ENDP

                  AppTaskStart PROC
;;;609    
;;;610    static  void  AppTaskStart (void *p_arg)
0007de  f7fffffe          BL       BSP_FeedDog
;;;611    {
;;;612    
;;;613        (void)p_arg;
;;;614    
;;;615        BSP_FeedDog();
;;;616    
;;;617        ///点亮所有灯：
;;;618        BSP_LED_On(LED_ALL);
0007e2  200f              MOVS     r0,#0xf
0007e4  f7fffffe          BL       BSP_LED_On
;;;619    
;;;620        SetAppParams();
0007e8  f7fffffe          BL       SetAppParams
;;;621    
;;;622        ///Modifiled 20140328
;;;623        SetChParams();
0007ec  f7fffffe          BL       SetChParams
;;;624    
;;;625        BSP_FeedDog();
0007f0  f7fffffe          BL       BSP_FeedDog
;;;626    
;;;627    
;;;628        CPU_Init();                                                 /* Init CPU name & int. dis. time measuring fncts.          */
0007f4  f7fffffe          BL       CPU_Init
;;;629    
;;;630        Mem_Init();                                                 /* Initialize Memory managment                              */
0007f8  f7fffffe          BL       Mem_Init
;;;631    
;;;632        BSP_CPU_TickInit();                                         /* Start Tick Initialization                                */
0007fc  f7fffffe          BL       BSP_CPU_TickInit
;;;633    
;;;634    
;;;635    #if (OS_TASK_STAT_EN > 0)
;;;636        OSStatInit();                                               /* Determine CPU capacity                                   */
000800  f7fffffe          BL       OSStatInit
;;;637    #endif
;;;638    
;;;639    #if (APP_CFG_SERIAL_EN == DEF_ENABLED)
;;;640    
;;;641    #endif
;;;642    
;;;643        APP_TRACE_INFO(("Creating Application Events...\n\r"));
000804  a024              ADR      r0,|L1.2200|
000806  f7fffffe          BL       BSP_Ser_Printf
;;;644        AppEventCreate();                                           /* Create Application Events                                */
00080a  f7fffffe          BL       AppEventCreate
;;;645    
;;;646        APP_TRACE_INFO(("Creating Application Tasks...\n\r"));
00080e  a02b              ADR      r0,|L1.2236|
000810  f7fffffe          BL       BSP_Ser_Printf
;;;647        AppTaskCreate();                                            /* Create application Tasks                                 */
000814  f7fffffe          BL       AppTaskCreate
;;;648    
;;;649        BSP_FeedDog();
000818  f7fffffe          BL       BSP_FeedDog
;;;650    
;;;651        ///延时1s：
;;;652        OSTimeDly(1000);
00081c  f44f707a          MOV      r0,#0x3e8
000820  f7fffffe          BL       OSTimeDly
;;;653    	
;;;654        BSP_FeedDog();
000824  f7fffffe          BL       BSP_FeedDog
;;;655    
;;;656        ///熄灭所有灯：
;;;657        BSP_LED_Off(LED_ALL);
000828  200f              MOVS     r0,#0xf
00082a  f7fffffe          BL       BSP_LED_Off
;;;658    
;;;659        ///延时1s：
;;;660        OSTimeDly(1000);
00082e  f44f707a          MOV      r0,#0x3e8
000832  f7fffffe          BL       OSTimeDly
;;;661    
;;;662        BSP_FeedDog();
000836  e051              B        |L1.2268|
                  |L1.2104|
                          DCD      RecInfo
                  |L1.2108|
                          DCD      ParamBuf
                  |L1.2112|
                          DCD      0x08008000
                  |L1.2116|
                          DCD      AppTaskUsartStk_1
                  |L1.2120|
                          DCD      AppTaskUsartStk_1+0xffc
                  |L1.2124|
                          DCD      AppTaskUsart1
                  |L1.2128|
000850  55736172          DCB      "Usart1",0
000854  743100  
000857  00                DCB      0
                  |L1.2136|
                          DCD      AppTaskUsartStk_6
                  |L1.2140|
                          DCD      AppTaskUsartStk_6+0x7fc
                  |L1.2144|
                          DCD      AppTaskUsart6
                  |L1.2148|
000864  55736172          DCB      "Usart6",0
000868  743600  
00086b  00                DCB      0
                  |L1.2156|
                          DCD      AppTaskADCStk
                  |L1.2160|
                          DCD      AppTaskADCStk+0x7fc
                  |L1.2164|
                          DCD      AppTaskADC
                  |L1.2168|
000878  41444300          DCB      "ADC",0
                  |L1.2172|
                          DCD      AppTaskI2C1Stk
                  |L1.2176|
                          DCD      AppTaskI2C1Stk+0x7fc
                  |L1.2180|
                          DCD      AppTaskI2C1
                  |L1.2184|
000888  4932435f          DCB      "I2C_1",0
00088c  3100    
00088e  00                DCB      0
00088f  00                DCB      0
                  |L1.2192|
                          DCD      AppInfo+0xfc
                  |L1.2196|
                          DCD      0x40708000
                  |L1.2200|
000898  43726561          DCB      "Creating Application Events...\n\r",0
00089c  74696e67
0008a0  20417070
0008a4  6c696361
0008a8  74696f6e
0008ac  20457665
0008b0  6e74732e
0008b4  2e2e0a0d
0008b8  00      
0008b9  00                DCB      0
0008ba  00                DCB      0
0008bb  00                DCB      0
                  |L1.2236|
0008bc  43726561          DCB      "Creating Application Tasks...\n\r",0
0008c0  74696e67
0008c4  20417070
0008c8  6c696361
0008cc  74696f6e
0008d0  20546173
0008d4  6b732e2e
0008d8  2e0a0d00
                  |L1.2268|
0008dc  f7fffffe          BL       BSP_FeedDog
;;;663    
;;;664    #if defined JLB_CPU_SAMPLE
;;;665        ///
;;;666    #elif defined JLB_CPU_MAIN
;;;667        ///点亮工作灯：
;;;668        BSP_LED_On(LED_WORK);
;;;669        ///
;;;670        GetSdInfo();
;;;671    #endif
;;;672    
;;;673        GetParams();
0008e0  f7fffffe          BL       GetParams
;;;674    
;;;675        //检测通过I2C记录在EEPROM里的标志数据
;;;676        CheckRecInfo();
0008e4  f7fffffe          BL       CheckRecInfo
;;;677    
;;;678        ///
;;;679        AppInfo.RdyFlag = 1;
0008e8  f04f0001          MOV      r0,#1
0008ec  493e              LDR      r1,|L1.2536|
0008ee  7708              STRB     r0,[r1,#0x1c]
;;;680    
;;;681        ///Test only
;;;682        //  TestWriteInfo();
;;;683    
;;;684        while (DEF_TRUE)
0008f0  e01c              B        |L1.2348|
                  |L1.2290|
;;;685        {
;;;686            /* Task body, always written as an infinite loop.           */
;;;687            TaskMonitor();
0008f2  f7fffffe          BL       TaskMonitor
;;;688    
;;;689    #if APP_USART_1_ENABLE
;;;690            if (AppInfo.UsartNoDataCnt[COM1] >= TIME_5MINUTE_CNT)
0008f6  483c              LDR      r0,|L1.2536|
0008f8  f8d000a0          LDR      r0,[r0,#0xa0]  ; AppInfo
0008fc  493b              LDR      r1,|L1.2540|
0008fe  4288              CMP      r0,r1
000900  d307              BCC      |L1.2322|
;;;691            {
;;;692                AppInfo.ResetF = 1;
000902  f04f0001          MOV      r0,#1
000906  4938              LDR      r1,|L1.2536|
000908  70c8              STRB     r0,[r1,#3]
;;;693                AppInfo.UsartNoDataCnt[COM1] = 0;
00090a  f04f0000          MOV      r0,#0
00090e  f8c100a0          STR      r0,[r1,#0xa0]  ; AppInfo
                  |L1.2322|
;;;694            }
;;;695    #endif
;;;696    
;;;697    #if APP_USART_2_ENABLE
;;;698            if (AppInfo.UsartNoDataCnt[COM2] >= TIME_5MINUTE_CNT)
;;;699            {
;;;700                AppInfo.ResetF = 1;
;;;701                AppInfo.UsartNoDataCnt[COM2] = 0;
;;;702            }
;;;703    #endif
;;;704    
;;;705    #if APP_USART_3_ENABLE
;;;706            if (AppInfo.UsartNoDataCnt[COM3] >= TIME_5MINUTE_CNT)
;;;707            {
;;;708                AppInfo.ResetF = 1;
;;;709                AppInfo.UsartNoDataCnt[COM3] = 0;
;;;710            }
;;;711    #endif
;;;712    
;;;713    #if APP_USART_4_ENABLE
;;;714            if (AppInfo.UsartNoDataCnt[COM4] >= TIME_5MINUTE_CNT)
;;;715            {
;;;716                AppInfo.ResetF = 1;
;;;717                AppInfo.UsartNoDataCnt[COM4] = 0;
;;;718            }
;;;719    #endif
;;;720    
;;;721    #if APP_USART_5_ENABLE
;;;722            if (AppInfo.UsartNoDataCnt[COM5] >= TIME_5MINUTE_CNT)
;;;723            {
;;;724                AppInfo.ResetF = 1;
;;;725                AppInfo.UsartNoDataCnt[COM5] = 0;
;;;726            }
;;;727    #endif
;;;728    
;;;729    ///Modifiled by me 20140327
;;;730    #if 0
;;;731    #if APP_USART_6_ENABLE
;;;732            if (AppInfo.UsartNoDataCnt[COM6] >= TIME_5MINUTE_CNT)
;;;733            {
;;;734                AppInfo.ResetF = 1;
;;;735                AppInfo.UsartNoDataCnt[COM6] = 0;
;;;736            }
;;;737    #endif
;;;738    #endif
;;;739    
;;;740    
;;;741            ///Feed Dog
;;;742            if (!AppInfo.ResetF)
000912  4835              LDR      r0,|L1.2536|
000914  78c0              LDRB     r0,[r0,#3]  ; AppInfo
000916  b908              CBNZ     r0,|L1.2332|
;;;743            {
;;;744                BSP_FeedDog();
000918  f7fffffe          BL       BSP_FeedDog
                  |L1.2332|
;;;745            }
;;;746    
;;;747    #if 0
;;;748            if (AppInfo.WriteFlag)
;;;749            {
;;;750                App_Usart_WriteInfo();//待完善
;;;751    
;;;752                //   SetChParams();
;;;753    
;;;754                AppInfo.WriteFlag = 0;
;;;755            }
;;;756    #endif
;;;757    
;;;758            AppInfo.CpuUsage = OSCPUUsage;
00091c  4834              LDR      r0,|L1.2544|
00091e  7800              LDRB     r0,[r0,#0]  ; OSCPUUsage
000920  4931              LDR      r1,|L1.2536|
000922  f8c100f0          STR      r0,[r1,#0xf0]  ; AppInfo
;;;759    
;;;760            OSTimeDly(10);
000926  200a              MOVS     r0,#0xa
000928  f7fffffe          BL       OSTimeDly
                  |L1.2348|
00092c  e7e1              B        |L1.2290|
;;;761        }
;;;762    }
;;;763    
                          ENDP

                  SetBSPInfo PROC
;;;1097   */
;;;1098   void SetBSPInfo(void)
00092e  4831              LDR      r0,|L1.2548|
;;;1099   {
;;;1100   
;;;1101       ////////////////////////////////////////////////////////////
;;;1102       ///                 设置 ADC 缓冲区参数
;;;1103       ////////////////////////////////////////////////////////////
;;;1104   #if APP_ADC_ENABLE
;;;1105       BSP_Info.ADCBuf[0] = AdcBuf;
000930  4931              LDR      r1,|L1.2552|
000932  6048              STR      r0,[r1,#4]  ; BSP_Info
;;;1106       ///ADC中断由 TIM3 触发：
;;;1107       BSP_Info.Tm3CallBack = &Adc_Tm3CallBack;
000934  4831              LDR      r0,|L1.2556|
000936  f8c1011c          STR      r0,[r1,#0x11c]  ; BSP_Info
;;;1108   #endif
;;;1109   
;;;1110       ////////////////////////////////////////////////////////////
;;;1111       ///                 设置 DAC 缓冲区参数
;;;1112       ////////////////////////////////////////////////////////////
;;;1113   #if APP_DAC_ENABLE
;;;1114       ///DAC 1
;;;1115       BSP_Info.DACBuf[0] = &(DacBuf[0][0]);
;;;1116       BSP_Info.DACCallBack = &DAC_CallBack;
;;;1117   #endif
;;;1118   
;;;1119   
;;;1120       ////////////////////////////////////////////////////////////
;;;1121       ///                 设置串口缓冲区参数
;;;1122       ////////////////////////////////////////////////////////////
;;;1123   
;;;1124   #if APP_USART_1_ENABLE
;;;1125       BSP_Info.UsartRxBuf[COM1] = Usart1RxBuf;
00093a  4831              LDR      r0,|L1.2560|
00093c  6188              STR      r0,[r1,#0x18]  ; BSP_Info
;;;1126       BSP_Info.UsartTxBuf[COM1] = Usart1TxBuf;
00093e  4831              LDR      r0,|L1.2564|
000940  6308              STR      r0,[r1,#0x30]  ; BSP_Info
;;;1127       BSP_Info.UsartRxBufMask[COM1] = USART1_RX_BUF_MASK;
000942  f24030ff          MOV      r0,#0x3ff
000946  f8a10060          STRH     r0,[r1,#0x60]
;;;1128       BSP_Info.UsartTxBufMask[COM1] = USART1_TX_BUF_MASK;
00094a  f8a1006c          STRH     r0,[r1,#0x6c]
;;;1129   #endif
;;;1130   
;;;1131   #if APP_USART_2_ENABLE
;;;1132       BSP_Info.UsartRxBuf[COM2] = Usart2RxBuf;
;;;1133       BSP_Info.UsartTxBuf[COM2] = Usart2TxBuf;
;;;1134       BSP_Info.UsartRxBufMask[COM2] = USART2_RX_BUF_MASK;
;;;1135       BSP_Info.UsartTxBufMask[COM2] = USART2_TX_BUF_MASK;
;;;1136   #endif
;;;1137   
;;;1138   #if APP_USART_3_ENABLE
;;;1139       BSP_Info.UsartRxBuf[COM3] = Usart3RxBuf;
;;;1140       BSP_Info.UsartTxBuf[COM3] = Usart3TxBuf;
;;;1141       BSP_Info.UsartRxBufMask[COM3] = USART3_RX_BUF_MASK;
;;;1142       BSP_Info.UsartTxBufMask[COM3] = USART3_TX_BUF_MASK;
;;;1143   #endif
;;;1144   
;;;1145   #if APP_USART_4_ENABLE
;;;1146       BSP_Info.UsartRxBuf[COM4] = Usart4RxBuf;
;;;1147       BSP_Info.UsartRxBufMask[COM4] = USART4_RX_BUF_MASK;
;;;1148   
;;;1149       BSP_Info.UsartTxBuf[COM4] = Usart4TxBuf;
;;;1150       BSP_Info.UsartTxBufMask[COM4] = USART4_TX_BUF_MASK;
;;;1151   #endif
;;;1152   
;;;1153   #if APP_USART_5_ENABLE
;;;1154       BSP_Info.UsartRxBuf[COM5] = Usart5RxBuf;
;;;1155       BSP_Info.UsartTxBuf[COM5] = Usart5TxBuf;
;;;1156       BSP_Info.UsartRxBufMask[COM5] = USART5_RX_BUF_MASK;
;;;1157       BSP_Info.UsartTxBufMask[COM5] = USART5_TX_BUF_MASK;
;;;1158   #endif
;;;1159   
;;;1160   #if APP_USART_6_ENABLE
;;;1161       BSP_Info.UsartRxBuf[COM6] = Usart6RxBuf;
00094e  492e              LDR      r1,|L1.2568|
000950  4829              LDR      r0,|L1.2552|
000952  62c1              STR      r1,[r0,#0x2c]
;;;1162       BSP_Info.UsartTxBuf[COM6] = Usart6TxBuf;
000954  492d              LDR      r1,|L1.2572|
000956  6441              STR      r1,[r0,#0x44]
;;;1163       BSP_Info.UsartRxBufMask[COM6] = USART6_RX_BUF_MASK;
000958  f24031ff          MOV      r1,#0x3ff
00095c  f8a0106a          STRH     r1,[r0,#0x6a]
;;;1164       BSP_Info.UsartTxBufMask[COM6] = USART6_TX_BUF_MASK;
000960  f04f01ff          MOV      r1,#0xff
000964  f8a01076          STRH     r1,[r0,#0x76]
;;;1165   #endif
;;;1166   
;;;1167   
;;;1168   
;;;1169       ////////////////////////////////////////////////////////////
;;;1170       ///                 设置 I2C 缓冲区参数
;;;1171       ////////////////////////////////////////////////////////////
;;;1172   #if APP_I2C_1_ENABLE
;;;1173   #endif
;;;1174   
;;;1175   #if APP_I2C_2_ENABLE
;;;1176   #endif
;;;1177   
;;;1178   #if APP_I2C_3_ENABLE
;;;1179   #endif
;;;1180   
;;;1181       ////////////////////////////////////////////////////////////
;;;1182       ///                 设置 SPI 缓冲区参数
;;;1183       ////////////////////////////////////////////////////////////
;;;1184   #if APP_SPI_1_ENABLE
;;;1185   #endif
;;;1186   
;;;1187   #if APP_SPI_2_ENABLE
;;;1188   #endif
;;;1189   
;;;1190   #if APP_SPI_3_ENABLE
;;;1191   #endif
;;;1192   
;;;1193       ////////////////////////////////////////////////////////////
;;;1194       ///                 设置 CAN 缓冲区参数
;;;1195       ////////////////////////////////////////////////////////////
;;;1196   #if APP_CAN_1_ENABLE
;;;1197       BSP_Info.CanInit[0] = &CanInit[0];
;;;1198       BSP_Info.FilterInit[0] = &CanFilterInit[0];
;;;1199   
;;;1200       BSP_Info.CanRxMsgPtr[0] = CanRxFrame[0];
;;;1201       BSP_Info.CanTxMsgPtr[0] = CanTxFrame[0];
;;;1202       BSP_Info.CanRxMsgMask[0] = CAN_RX_FRAME_MASK;
;;;1203       BSP_Info.CanTxMsgMask[0] = CAN_TX_FRAME_MASK;
;;;1204   
;;;1205       BSP_Info.CANCallBack = &CAN_CallBack;
;;;1206   #endif
;;;1207   
;;;1208   #if APP_CAN_2_ENABLE
;;;1209       BSP_Info.CanInit[1] = &CanInit[1];
;;;1210       BSP_Info.FilterInit[1] = &CanFilterInit[1];
;;;1211   
;;;1212       BSP_Info.CanRxMsgPtr[1] = CanRxFrame[1];
;;;1213       BSP_Info.CanTxMsgPrt[1] = CanTxFrame[1];
;;;1214       BSP_Info.CanRxMsgMask[1] = CAN_RX_FRAME_MASK;
;;;1215       BSP_Info.CanTxMsgMask[1] = CAN_TX_FRAME_MASK;
;;;1216       if (!BSP_Info.CANCallBack)
;;;1217           BSP_Info.CANCallBack = &CAN_CallBack;
;;;1218   #endif
;;;1219   
;;;1220       ////////////////////////////////////////////////////////////
;;;1221       ///                 设置 RTC 参数
;;;1222       ////////////////////////////////////////////////////////////
;;;1223   #if APP_RTC_ENABLE
;;;1224       BSP_Info.RTCCalBack = &App_RTC_Callback;
;;;1225   #endif
;;;1226   
;;;1227       ////////////////////////////////////////////////////////////
;;;1228       ///                 设置 USB 参数
;;;1229       ////////////////////////////////////////////////////////////
;;;1230   #if APP_USB_ENABL
;;;1231   #endif
;;;1232   
;;;1233       ////////////////////////////////////////////////////////////
;;;1234       ///                 设置 SDIO 参数
;;;1235       ////////////////////////////////////////////////////////////
;;;1236   #if APP_SDIO_ENABLE
;;;1237       BSP_Info.SDCallBack = &SD_CallBack;
;;;1238   #endif
;;;1239   
;;;1240       ////////////////////////////////////////////////////////////
;;;1241       ///                 设置 EXTI9_5 参数
;;;1242       ////////////////////////////////////////////////////////////
;;;1243   #if APP_EXTI9_5_ENABLE
;;;1244       BSP_Info.EXTI9_5_CallBack = &HPI_CallBack;
;;;1245   #endif
;;;1246   }
000968  4770              BX       lr
;;;1247   
                          ENDP

                  App_InitInfo PROC
;;;1460   */
;;;1461   void App_InitInfo(void)
00096a  b510              PUSH     {r4,lr}
;;;1462   {
;;;1463       memset((uint8_t *)&(AppInfo.BdAddr), 0, sizeof(APP_INFO));
00096c  f44f7196          MOV      r1,#0x12c
000970  481d              LDR      r0,|L1.2536|
000972  f7fffffe          BL       __aeabi_memclr4
;;;1464   
;;;1465   ///Start Added 20140311
;;;1466       memset((uint8_t *)&(D110VADBuf[0][0]), 0, sizeof(D110VADBuf));
000976  2132              MOVS     r1,#0x32
000978  4825              LDR      r0,|L1.2576|
00097a  f7fffffe          BL       __aeabi_memclr
;;;1467   ///End Added 20140311
;;;1468   }
00097e  bd10              POP      {r4,pc}
;;;1469   
                          ENDP

                  main PROC
;;;528    
;;;529    int main(void)
000980  b510              PUSH     {r4,lr}
;;;530    {
000982  b086              SUB      sp,sp,#0x18
;;;531    #if (OS_TASK_NAME_EN > 0)
;;;532        CPU_INT08U  err;
;;;533    #endif
;;;534    
;;;535     int size=sizeof(REC_INFO);
000984  f04f0410          MOV      r4,#0x10
;;;536     if(size!=16)
;;;537     	{
;;;538     	
;;;539     	}
;;;540        BSP_IntDisAll();                                            /* Disable all interrupts.                              */
000988  f7fffffe          BL       BSP_IntDisAll
;;;541    
;;;542        ///初始化应用程序变量
;;;543        App_InitInfo();
00098c  f7fffffe          BL       App_InitInfo
;;;544    
;;;545        ///初始化串口通用变量
;;;546        Usart_InitInfo();
000990  f7fffffe          BL       Usart_InitInfo
;;;547    
;;;548        ///初始化 CAN 变量
;;;549    #if APP_CAN_1_ENABLE
;;;550        InitCanParams();
;;;551    #endif
;;;552    
;;;553        ///初始化硬件结构：
;;;554        BSP_InitInfo();
000994  f7fffffe          BL       BSP_InitInfo
;;;555    
;;;556        ///设置硬件结构对应的缓冲区：
;;;557        SetBSPInfo();
000998  f7fffffe          BL       SetBSPInfo
;;;558    
;;;559        BSP_FeedDog();
00099c  f7fffffe          BL       BSP_FeedDog
;;;560        BSP_FeedDog();
0009a0  f7fffffe          BL       BSP_FeedDog
;;;561    
;;;562        CPU_Init();                                                 /* Initialize uC/CPU services.                          */
0009a4  f7fffffe          BL       CPU_Init
;;;563    
;;;564        OSInit();                                                   /* Initialize "uC/OS-II, The Real-Time Kernel"          */
0009a8  f7fffffe          BL       OSInit
;;;565    
;;;566        ///硬件初始化
;;;567        BSP_Init();                                                 /* Init BSP fncts.                                      */
0009ac  f7fffffe          BL       BSP_Init
;;;568    
;;;569    #if APP_CAN_1_ENABLE
;;;570        BSP_InitCan(CAN_1, &CanInit[0], &CanFilterInit[0]);
;;;571    #endif
;;;572    
;;;573        OSTaskCreateExt((void (*)(void *)) AppTaskStart,            /* Create the start task                                */
0009b0  2003              MOVS     r0,#3
0009b2  2100              MOVS     r1,#0
0009b4  0122              LSLS     r2,r4,#4
0009b6  4b17              LDR      r3,|L1.2580|
0009b8  e9cd3201          STRD     r3,r2,[sp,#4]
0009bc  e9cd1003          STRD     r1,r0,[sp,#0xc]
0009c0  2037              MOVS     r0,#0x37
0009c2  4603              MOV      r3,r0
0009c4  4a14              LDR      r2,|L1.2584|
0009c6  9000              STR      r0,[sp,#0]
0009c8  4814              LDR      r0,|L1.2588|
0009ca  f7fffffe          BL       OSTaskCreateExt
;;;574                        (void           *) 0,
;;;575                        (OS_STK         *)&AppTaskStartStk[APP_TASK_START_STK_SIZE - 1],
;;;576                        (INT8U           ) APP_TASK_START_PRIO,
;;;577                        (INT16U          ) APP_TASK_START_PRIO,
;;;578                        (OS_STK         *)&AppTaskStartStk[0],
;;;579                        (INT32U          ) APP_TASK_START_STK_SIZE,
;;;580                        (void           *) 0,
;;;581                        (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
;;;582    
;;;583    #if (OS_TASK_NAME_EN > 0)
;;;584        OSTaskNameSet(APP_TASK_START_PRIO, (uint8_t *)"Start", &err);
0009ce  aa05              ADD      r2,sp,#0x14
0009d0  a113              ADR      r1,|L1.2592|
0009d2  2037              MOVS     r0,#0x37
0009d4  f7fffffe          BL       OSTaskNameSet
;;;585    #endif
;;;586    
;;;587        BSP_FeedDog();
0009d8  f7fffffe          BL       BSP_FeedDog
;;;588    
;;;589        OSStart();                                                  /* Start multitasking (i.e. give control to uC/OS-II)   */
0009dc  f7fffffe          BL       OSStart
;;;590    
;;;591        return (1);
0009e0  2001              MOVS     r0,#1
;;;592    }
0009e2  b006              ADD      sp,sp,#0x18
0009e4  bd10              POP      {r4,pc}
;;;593    
                          ENDP

0009e6  0000              DCW      0x0000
                  |L1.2536|
                          DCD      AppInfo
                  |L1.2540|
                          DCD      0x000493e0
                  |L1.2544|
                          DCD      OSCPUUsage
                  |L1.2548|
                          DCD      AdcBuf
                  |L1.2552|
                          DCD      BSP_Info
                  |L1.2556|
                          DCD      Adc_Tm3CallBack
                  |L1.2560|
                          DCD      Usart1RxBuf
                  |L1.2564|
                          DCD      Usart1TxBuf
                  |L1.2568|
                          DCD      Usart6RxBuf
                  |L1.2572|
                          DCD      Usart6TxBuf
                  |L1.2576|
                          DCD      D110VADBuf
                  |L1.2580|
                          DCD      AppTaskStartStk
                  |L1.2584|
                          DCD      AppTaskStartStk+0x3fc
                  |L1.2588|
                          DCD      AppTaskStart
                  |L1.2592|
000a20  53746172          DCB      "Start",0
000a24  7400    
000a26  00                DCB      0
000a27  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  D110VCnt
                          %        12
                  AppTaskStartStk
                          %        1024
                  AppTaskUsartStk_1
                          %        4096
                  AppTaskUsartStk_6
                          %        2048
                  AppTaskADCStk
                          %        2048
                  AppTaskI2C1Stk
                          %        2048
                  AppInfo
                          %        300
                  LJBPosInfo
                          %        32
                  RecInfo
                          %        16
                  CalibrationInfo
                          %        20
                  UserInf
                          %        13
                  ParamBuf
                          %        256
                  D110VADBuf
                          %        50

                          AREA ||.data||, DATA, ALIGN=1

                  PosIndex
000000  0000              DCB      0x00,0x00
                  Tm10ms
000002  0000              DCW      0x0000
                  WkTime
000004  0000              DCW      0x0000
                  g_I2C_RdyF
000006  01                DCB      0x01
                  g_UsartRWPowOffComplete
000007  01                DCB      0x01
                  CompexInCnt
000008  0000              DCB      0x00,0x00
                  PowOffTm
00000a  0000              DCB      0x00,0x00
                  CompCnt
00000c  00                DCB      0x00
                  V110Ready
00000d  00                DCB      0x00
                  TimeUsed
00000e  00                DCB      0x00
                  PowF
00000f  00                DCB      0x00
                  g_changed
000010  00                DCB      0x00
                  XferRecIndex
000011  00                DCB      0x00
                  LJBNowTime
000012  0000              DCB      0x00,0x00
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\App\\app.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_app_c_PosIndex____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___5_app_c_PosIndex____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_app_c_PosIndex____REVSH|
#line 130
|__asm___5_app_c_PosIndex____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
