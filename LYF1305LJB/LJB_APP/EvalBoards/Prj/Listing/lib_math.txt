; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\lib_math.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\lib_math.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\lib_math.crf ..\..\uC-LIB\lib_math.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Math_RandSetSeed PROC
;;;174    
;;;175    void  Math_RandSetSeed (RAND_NBR  seed)
000000  b570              PUSH     {r4-r6,lr}
;;;176    {
000002  4604              MOV      r4,r0
;;;177        CPU_SR_ALLOC();
000004  f04f0500          MOV      r5,#0
;;;178    
;;;179    
;;;180        CPU_CRITICAL_ENTER();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4605              MOV      r5,r0
000012  bf00              NOP      
000014  bf00              NOP      
;;;181        Math_RandSeedCur = seed;
000016  4819              LDR      r0,|L1.124|
000018  6004              STR      r4,[r0,#0]  ; Math_RandSeedCur
;;;182        CPU_CRITICAL_EXIT();
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       CPU_SR_Restore
000024  bf00              NOP      
000026  bf00              NOP      
;;;183    }
000028  bd70              POP      {r4-r6,pc}
;;;184    
                          ENDP

                  Math_Init PROC
;;;145    
;;;146    void  Math_Init (void)
00002a  b510              PUSH     {r4,lr}
;;;147    {
;;;148        Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       Math_RandSetSeed
;;;149    }
000032  bd10              POP      {r4,pc}
;;;150    
                          ENDP

                  Math_RandSeed PROC
;;;273    
;;;274    RAND_NBR  Math_RandSeed (RAND_NBR  seed)
000034  4601              MOV      r1,r0
;;;275    {
;;;276        RAND_NBR  rand_nbr;
;;;277    
;;;278    
;;;279        rand_nbr = (((RAND_NBR)RAND_LCG_PARAM_A * seed) + (RAND_NBR)RAND_LCG_PARAM_B)  %  ((RAND_NBR)RAND_LCG_PARAM_M + 1u);
000036  f2430239          MOV      r2,#0x3039
00003a  4b11              LDR      r3,|L1.128|
00003c  fb032201          MLA      r2,r3,r1,r2
000040  f0224000          BIC      r0,r2,#0x80000000
;;;280    
;;;281        return (rand_nbr);
;;;282    }
000044  4770              BX       lr
;;;283    
                          ENDP

                  Math_Rand PROC
;;;215    
;;;216    RAND_NBR  Math_Rand (void)
000046  b570              PUSH     {r4-r6,lr}
;;;217    {
;;;218        RAND_NBR  seed;
;;;219        RAND_NBR  rand_nbr;
;;;220        CPU_SR_ALLOC();
000048  f04f0600          MOV      r6,#0
;;;221    
;;;222    
;;;223        CPU_CRITICAL_ENTER();
00004c  bf00              NOP      
00004e  bf00              NOP      
000050  f7fffffe          BL       CPU_SR_Save
000054  4606              MOV      r6,r0
000056  bf00              NOP      
000058  bf00              NOP      
;;;224        seed             = Math_RandSeedCur;
00005a  4808              LDR      r0,|L1.124|
00005c  6805              LDR      r5,[r0,#0]  ; Math_RandSeedCur
;;;225        rand_nbr         = Math_RandSeed(seed);
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       Math_RandSeed
000064  4604              MOV      r4,r0
;;;226        Math_RandSeedCur = rand_nbr;
000066  4805              LDR      r0,|L1.124|
000068  6004              STR      r4,[r0,#0]  ; Math_RandSeedCur
;;;227        CPU_CRITICAL_EXIT();
00006a  bf00              NOP      
00006c  bf00              NOP      
00006e  4630              MOV      r0,r6
000070  f7fffffe          BL       CPU_SR_Restore
000074  bf00              NOP      
000076  bf00              NOP      
;;;228    
;;;229        return (rand_nbr);
000078  4620              MOV      r0,r4
;;;230    }
00007a  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

                  |L1.124|
                          DCD      Math_RandSeedCur
                  |L1.128|
                          DCD      0x41c64e6d

                          AREA ||.data||, DATA, ALIGN=2

                  Math_RandSeedCur
                          DCD      0x00000000
