; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_dac.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_dac.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_dac.crf ..\BSP\STM32F2xx\src\stm32f2xx_dac.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DAC_DeInit PROC
;;;173      */
;;;174    void DAC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;175    {
;;;176      /* Enable DAC reset state */
;;;177      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;178      /* Release DAC from reset state */
;;;179      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5000          MOV      r0,#0x20000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;180    }
000014  bd10              POP      {r4,pc}
;;;181    
                          ENDP

                  DAC_Init PROC
;;;192      */
;;;193    void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
000016  b530              PUSH     {r4,r5,lr}
;;;194    {
;;;195      uint32_t tmpreg1 = 0, tmpreg2 = 0;
000018  f04f0200          MOV      r2,#0
00001c  4613              MOV      r3,r2
;;;196    
;;;197      /* Check the DAC parameters */
;;;198      assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
;;;199      assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
;;;200      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
;;;201      assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
;;;202    
;;;203    /*---------------------------- DAC CR Configuration --------------------------*/
;;;204      /* Get the DAC CR value */
;;;205      tmpreg1 = DAC->CR;
00001e  4c80              LDR      r4,|L1.544|
000020  6822              LDR      r2,[r4,#0]
;;;206      /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
;;;207      tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
000022  f64074fe          MOV      r4,#0xffe
000026  fa04f400          LSL      r4,r4,r0
00002a  ea220204          BIC      r2,r2,r4
;;;208      /* Configure for the selected DAC channel: buffer output, trigger, 
;;;209         wave generation, mask/amplitude for wave generation */
;;;210      /* Set TSELx and TENx bits according to DAC_Trigger value */
;;;211      /* Set WAVEx bits according to DAC_WaveGeneration value */
;;;212      /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
;;;213      /* Set BOFFx bit according to DAC_OutputBuffer value */   
;;;214      tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
00002e  e9d14500          LDRD     r4,r5,[r1,#0]
000032  ea440405          ORR      r4,r4,r5
000036  688d              LDR      r5,[r1,#8]
000038  ea440405          ORR      r4,r4,r5
00003c  68cd              LDR      r5,[r1,#0xc]
00003e  ea440305          ORR      r3,r4,r5
;;;215                 DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
;;;216                 DAC_InitStruct->DAC_OutputBuffer);
;;;217      /* Calculate CR register value depending on DAC_Channel */
;;;218      tmpreg1 |= tmpreg2 << DAC_Channel;
000042  fa03f400          LSL      r4,r3,r0
000046  ea440202          ORR      r2,r4,r2
;;;219      /* Write to DAC CR */
;;;220      DAC->CR = tmpreg1;
00004a  4c75              LDR      r4,|L1.544|
00004c  6022              STR      r2,[r4,#0]
;;;221    }
00004e  bd30              POP      {r4,r5,pc}
;;;222    
                          ENDP

                  DAC_StructInit PROC
;;;228      */
;;;229    void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
000050  f04f0100          MOV      r1,#0
;;;230    {
;;;231    /*--------------- Reset DAC init structure parameters values -----------------*/
;;;232      /* Initialize the DAC_Trigger member */
;;;233      DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
000054  6001              STR      r1,[r0,#0]
;;;234      /* Initialize the DAC_WaveGeneration member */
;;;235      DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
000056  6041              STR      r1,[r0,#4]
;;;236      /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
;;;237      DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
000058  6081              STR      r1,[r0,#8]
;;;238      /* Initialize the DAC_OutputBuffer member */
;;;239      DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
00005a  60c1              STR      r1,[r0,#0xc]
;;;240    }
00005c  4770              BX       lr
;;;241    
                          ENDP

                  DAC_Cmd PROC
;;;252      */
;;;253    void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
00005e  b151              CBZ      r1,|L1.118|
;;;254    {
;;;255      /* Check the parameters */
;;;256      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;257      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;258    
;;;259      if (NewState != DISABLE)
;;;260      {
;;;261        /* Enable the selected DAC channel */
;;;262        DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
000060  4a6f              LDR      r2,|L1.544|
000062  6812              LDR      r2,[r2,#0]
000064  f04f0301          MOV      r3,#1
000068  fa03f300          LSL      r3,r3,r0
00006c  ea420203          ORR      r2,r2,r3
000070  4b6b              LDR      r3,|L1.544|
000072  601a              STR      r2,[r3,#0]
000074  e009              B        |L1.138|
                  |L1.118|
;;;263      }
;;;264      else
;;;265      {
;;;266        /* Disable the selected DAC channel */
;;;267        DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
000076  4a6a              LDR      r2,|L1.544|
000078  6812              LDR      r2,[r2,#0]
00007a  f04f0301          MOV      r3,#1
00007e  fa03f300          LSL      r3,r3,r0
000082  ea220203          BIC      r2,r2,r3
000086  4b66              LDR      r3,|L1.544|
000088  601a              STR      r2,[r3,#0]
                  |L1.138|
;;;268      }
;;;269    }
00008a  4770              BX       lr
;;;270    
                          ENDP

                  DAC_SoftwareTriggerCmd PROC
;;;280      */
;;;281    void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
00008c  b510              PUSH     {r4,lr}
;;;282    {
;;;283      /* Check the parameters */
;;;284      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;285      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;286    
;;;287      if (NewState != DISABLE)
00008e  b161              CBZ      r1,|L1.170|
;;;288      {
;;;289        /* Enable software trigger for the selected DAC channel */
;;;290        DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
000090  4a64              LDR      r2,|L1.548|
000092  6812              LDR      r2,[r2,#0]
000094  ea4f1410          LSR      r4,r0,#4
000098  f04f0301          MOV      r3,#1
00009c  fa03f304          LSL      r3,r3,r4
0000a0  ea420203          ORR      r2,r2,r3
0000a4  4b5f              LDR      r3,|L1.548|
0000a6  601a              STR      r2,[r3,#0]
0000a8  e00b              B        |L1.194|
                  |L1.170|
;;;291      }
;;;292      else
;;;293      {
;;;294        /* Disable software trigger for the selected DAC channel */
;;;295        DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
0000aa  4a5e              LDR      r2,|L1.548|
0000ac  6812              LDR      r2,[r2,#0]
0000ae  ea4f1410          LSR      r4,r0,#4
0000b2  f04f0301          MOV      r3,#1
0000b6  fa03f304          LSL      r3,r3,r4
0000ba  ea220203          BIC      r2,r2,r3
0000be  4b59              LDR      r3,|L1.548|
0000c0  601a              STR      r2,[r3,#0]
                  |L1.194|
;;;296      }
;;;297    }
0000c2  bd10              POP      {r4,pc}
;;;298    
                          ENDP

                  DAC_DualSoftwareTriggerCmd PROC
;;;304      */
;;;305    void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
0000c4  b130              CBZ      r0,|L1.212|
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;309    
;;;310      if (NewState != DISABLE)
;;;311      {
;;;312        /* Enable software trigger for both DAC channels */
;;;313        DAC->SWTRIGR |= DUAL_SWTRIG_SET;
0000c6  4957              LDR      r1,|L1.548|
0000c8  6809              LDR      r1,[r1,#0]
0000ca  f0410103          ORR      r1,r1,#3
0000ce  4a55              LDR      r2,|L1.548|
0000d0  6011              STR      r1,[r2,#0]
0000d2  e005              B        |L1.224|
                  |L1.212|
;;;314      }
;;;315      else
;;;316      {
;;;317        /* Disable software trigger for both DAC channels */
;;;318        DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
0000d4  4953              LDR      r1,|L1.548|
0000d6  6809              LDR      r1,[r1,#0]
0000d8  f0210103          BIC      r1,r1,#3
0000dc  4a51              LDR      r2,|L1.548|
0000de  6011              STR      r1,[r2,#0]
                  |L1.224|
;;;319      }
;;;320    }
0000e0  4770              BX       lr
;;;321    
                          ENDP

                  DAC_WaveGenerationCmd PROC
;;;335      */
;;;336    void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
0000e2  b510              PUSH     {r4,lr}
;;;337    {
;;;338      /* Check the parameters */
;;;339      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;340      assert_param(IS_DAC_WAVE(DAC_Wave)); 
;;;341      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;342    
;;;343      if (NewState != DISABLE)
0000e4  b142              CBZ      r2,|L1.248|
;;;344      {
;;;345        /* Enable the selected wave generation for the selected DAC channel */
;;;346        DAC->CR |= DAC_Wave << DAC_Channel;
0000e6  4b4e              LDR      r3,|L1.544|
0000e8  681b              LDR      r3,[r3,#0]
0000ea  fa01f400          LSL      r4,r1,r0
0000ee  ea430304          ORR      r3,r3,r4
0000f2  4c4b              LDR      r4,|L1.544|
0000f4  6023              STR      r3,[r4,#0]
0000f6  e007              B        |L1.264|
                  |L1.248|
;;;347      }
;;;348      else
;;;349      {
;;;350        /* Disable the selected wave generation for the selected DAC channel */
;;;351        DAC->CR &= ~(DAC_Wave << DAC_Channel);
0000f8  4b49              LDR      r3,|L1.544|
0000fa  681b              LDR      r3,[r3,#0]
0000fc  fa01f400          LSL      r4,r1,r0
000100  ea230304          BIC      r3,r3,r4
000104  4c46              LDR      r4,|L1.544|
000106  6023              STR      r3,[r4,#0]
                  |L1.264|
;;;352      }
;;;353    }
000108  bd10              POP      {r4,pc}
;;;354    
                          ENDP

                  DAC_SetChannel1Data PROC
;;;364      */
;;;365    void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
00010a  f04f0200          MOV      r2,#0
;;;366    {  
;;;367      __IO uint32_t tmp = 0;
;;;368      
;;;369      /* Check the parameters */
;;;370      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;371      assert_param(IS_DAC_DATA(Data));
;;;372      
;;;373      tmp = (uint32_t)DAC_BASE; 
00010e  4a44              LDR      r2,|L1.544|
;;;374      tmp += DHR12R1_OFFSET + DAC_Align;
000110  f1000308          ADD      r3,r0,#8
000114  441a              ADD      r2,r2,r3
;;;375    
;;;376      /* Set the DAC channel1 selected data holding register */
;;;377      *(__IO uint32_t *) tmp = Data;
000116  6011              STR      r1,[r2,#0]
;;;378    }
000118  4770              BX       lr
;;;379    
                          ENDP

                  DAC_SetChannel2Data PROC
;;;389      */
;;;390    void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
00011a  f04f0200          MOV      r2,#0
;;;391    {
;;;392      __IO uint32_t tmp = 0;
;;;393    
;;;394      /* Check the parameters */
;;;395      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;396      assert_param(IS_DAC_DATA(Data));
;;;397      
;;;398      tmp = (uint32_t)DAC_BASE;
00011e  4a40              LDR      r2,|L1.544|
;;;399      tmp += DHR12R2_OFFSET + DAC_Align;
000120  f1000314          ADD      r3,r0,#0x14
000124  441a              ADD      r2,r2,r3
;;;400    
;;;401      /* Set the DAC channel2 selected data holding register */
;;;402      *(__IO uint32_t *)tmp = Data;
000126  6011              STR      r1,[r2,#0]
;;;403    }
000128  4770              BX       lr
;;;404    
                          ENDP

                  DAC_SetDualChannelData PROC
;;;417      */
;;;418    void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
00012a  b530              PUSH     {r4,r5,lr}
;;;419    {
;;;420      uint32_t data = 0, tmp = 0;
00012c  f04f0400          MOV      r4,#0
000130  4623              MOV      r3,r4
;;;421      
;;;422      /* Check the parameters */
;;;423      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;424      assert_param(IS_DAC_DATA(Data1));
;;;425      assert_param(IS_DAC_DATA(Data2));
;;;426      
;;;427      /* Calculate and set dual DAC data holding register value */
;;;428      if (DAC_Align == DAC_Align_8b_R)
000132  2808              CMP      r0,#8
000134  d102              BNE      |L1.316|
;;;429      {
;;;430        data = ((uint32_t)Data2 << 8) | Data1; 
000136  ea422401          ORR      r4,r2,r1,LSL #8
00013a  e001              B        |L1.320|
                  |L1.316|
;;;431      }
;;;432      else
;;;433      {
;;;434        data = ((uint32_t)Data2 << 16) | Data1;
00013c  ea424401          ORR      r4,r2,r1,LSL #16
                  |L1.320|
;;;435      }
;;;436      
;;;437      tmp = (uint32_t)DAC_BASE;
000140  4b37              LDR      r3,|L1.544|
;;;438      tmp += DHR12RD_OFFSET + DAC_Align;
000142  f1000520          ADD      r5,r0,#0x20
000146  442b              ADD      r3,r3,r5
;;;439    
;;;440      /* Set the dual DAC selected data holding register */
;;;441      *(__IO uint32_t *)tmp = data;
000148  601c              STR      r4,[r3,#0]
;;;442    }
00014a  bd30              POP      {r4,r5,pc}
;;;443    
                          ENDP

                  DAC_GetDataOutputValue PROC
;;;451      */
;;;452    uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
00014c  4601              MOV      r1,r0
;;;453    {
;;;454      __IO uint32_t tmp = 0;
00014e  f04f0200          MOV      r2,#0
;;;455      
;;;456      /* Check the parameters */
;;;457      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;458      
;;;459      tmp = (uint32_t) DAC_BASE ;
000152  4a33              LDR      r2,|L1.544|
;;;460      tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
000154  f04f002c          MOV      r0,#0x2c
000158  eb000091          ADD      r0,r0,r1,LSR #2
00015c  4402              ADD      r2,r2,r0
;;;461      
;;;462      /* Returns the DAC channel data output register value */
;;;463      return (uint16_t) (*(__IO uint32_t*) tmp);
00015e  6810              LDR      r0,[r2,#0]
000160  b280              UXTH     r0,r0
;;;464    }
000162  4770              BX       lr
;;;465    /**
                          ENDP

                  DAC_DMACmd PROC
;;;496      */
;;;497    void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
000164  b151              CBZ      r1,|L1.380|
;;;498    {
;;;499      /* Check the parameters */
;;;500      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;501      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;502    
;;;503      if (NewState != DISABLE)
;;;504      {
;;;505        /* Enable the selected DAC channel DMA request */
;;;506        DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
000166  4a2e              LDR      r2,|L1.544|
000168  6812              LDR      r2,[r2,#0]
00016a  f44f5380          MOV      r3,#0x1000
00016e  fa03f300          LSL      r3,r3,r0
000172  ea420203          ORR      r2,r2,r3
000176  4b2a              LDR      r3,|L1.544|
000178  601a              STR      r2,[r3,#0]
00017a  e009              B        |L1.400|
                  |L1.380|
;;;507      }
;;;508      else
;;;509      {
;;;510        /* Disable the selected DAC channel DMA request */
;;;511        DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
00017c  4a28              LDR      r2,|L1.544|
00017e  6812              LDR      r2,[r2,#0]
000180  f44f5380          MOV      r3,#0x1000
000184  fa03f300          LSL      r3,r3,r0
000188  ea220203          BIC      r2,r2,r3
00018c  4b24              LDR      r3,|L1.544|
00018e  601a              STR      r2,[r3,#0]
                  |L1.400|
;;;512      }
;;;513    }
000190  4770              BX       lr
;;;514    /**
                          ENDP

                  DAC_ITConfig PROC
;;;544      */ 
;;;545    void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
000192  b510              PUSH     {r4,lr}
;;;546    {
;;;547      /* Check the parameters */
;;;548      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;549      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;550      assert_param(IS_DAC_IT(DAC_IT)); 
;;;551    
;;;552      if (NewState != DISABLE)
000194  b142              CBZ      r2,|L1.424|
;;;553      {
;;;554        /* Enable the selected DAC interrupts */
;;;555        DAC->CR |=  (DAC_IT << DAC_Channel);
000196  4b22              LDR      r3,|L1.544|
000198  681b              LDR      r3,[r3,#0]
00019a  fa01f400          LSL      r4,r1,r0
00019e  ea430304          ORR      r3,r3,r4
0001a2  4c1f              LDR      r4,|L1.544|
0001a4  6023              STR      r3,[r4,#0]
0001a6  e007              B        |L1.440|
                  |L1.424|
;;;556      }
;;;557      else
;;;558      {
;;;559        /* Disable the selected DAC interrupts */
;;;560        DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
0001a8  4b1d              LDR      r3,|L1.544|
0001aa  681b              LDR      r3,[r3,#0]
0001ac  fa01f400          LSL      r4,r1,r0
0001b0  ea230304          BIC      r3,r3,r4
0001b4  4c1a              LDR      r4,|L1.544|
0001b6  6023              STR      r3,[r4,#0]
                  |L1.440|
;;;561      }
;;;562    }
0001b8  bd10              POP      {r4,pc}
;;;563    
                          ENDP

                  DAC_GetFlagStatus PROC
;;;576      */
;;;577    FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
0001ba  b510              PUSH     {r4,lr}
;;;578    {
0001bc  4602              MOV      r2,r0
;;;579      FlagStatus bitstatus = RESET;
0001be  f04f0000          MOV      r0,#0
;;;580      /* Check the parameters */
;;;581      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;582      assert_param(IS_DAC_FLAG(DAC_FLAG));
;;;583    
;;;584      /* Check the status of the specified DAC flag */
;;;585      if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
0001c2  4b19              LDR      r3,|L1.552|
0001c4  681b              LDR      r3,[r3,#0]
0001c6  fa01f402          LSL      r4,r1,r2
0001ca  4223              TST      r3,r4
0001cc  d002              BEQ      |L1.468|
;;;586      {
;;;587        /* DAC_FLAG is set */
;;;588        bitstatus = SET;
0001ce  f04f0001          MOV      r0,#1
0001d2  e001              B        |L1.472|
                  |L1.468|
;;;589      }
;;;590      else
;;;591      {
;;;592        /* DAC_FLAG is reset */
;;;593        bitstatus = RESET;
0001d4  f04f0000          MOV      r0,#0
                  |L1.472|
;;;594      }
;;;595      /* Return the DAC_FLAG status */
;;;596      return  bitstatus;
;;;597    }
0001d8  bd10              POP      {r4,pc}
;;;598    
                          ENDP

                  DAC_ClearFlag PROC
;;;611      */
;;;612    void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
0001da  fa01f200          LSL      r2,r1,r0
;;;613    {
;;;614      /* Check the parameters */
;;;615      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;616      assert_param(IS_DAC_FLAG(DAC_FLAG));
;;;617    
;;;618      /* Clear the selected DAC flags */
;;;619      DAC->SR = (DAC_FLAG << DAC_Channel);
0001de  4b12              LDR      r3,|L1.552|
0001e0  601a              STR      r2,[r3,#0]
;;;620    }
0001e2  4770              BX       lr
;;;621    
                          ENDP

                  DAC_GetITStatus PROC
;;;634      */
;;;635    ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
0001e4  b530              PUSH     {r4,r5,lr}
;;;636    {
0001e6  4602              MOV      r2,r0
;;;637      ITStatus bitstatus = RESET;
0001e8  f04f0000          MOV      r0,#0
;;;638      uint32_t enablestatus = 0;
0001ec  4603              MOV      r3,r0
;;;639      
;;;640      /* Check the parameters */
;;;641      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;642      assert_param(IS_DAC_IT(DAC_IT));
;;;643    
;;;644      /* Get the DAC_IT enable bit status */
;;;645      enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
0001ee  4c0c              LDR      r4,|L1.544|
0001f0  6824              LDR      r4,[r4,#0]
0001f2  fa01f502          LSL      r5,r1,r2
0001f6  ea040305          AND      r3,r4,r5
;;;646      
;;;647      /* Check the status of the specified DAC interrupt */
;;;648      if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
0001fa  4c0b              LDR      r4,|L1.552|
0001fc  6824              LDR      r4,[r4,#0]
0001fe  fa01f502          LSL      r5,r1,r2
000202  422c              TST      r4,r5
000204  d003              BEQ      |L1.526|
000206  b113              CBZ      r3,|L1.526|
;;;649      {
;;;650        /* DAC_IT is set */
;;;651        bitstatus = SET;
000208  f04f0001          MOV      r0,#1
00020c  e001              B        |L1.530|
                  |L1.526|
;;;652      }
;;;653      else
;;;654      {
;;;655        /* DAC_IT is reset */
;;;656        bitstatus = RESET;
00020e  f04f0000          MOV      r0,#0
                  |L1.530|
;;;657      }
;;;658      /* Return the DAC_IT status */
;;;659      return  bitstatus;
;;;660    }
000212  bd30              POP      {r4,r5,pc}
;;;661    
                          ENDP

                  DAC_ClearITPendingBit PROC
;;;674      */
;;;675    void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
000214  fa01f200          LSL      r2,r1,r0
;;;676    {
;;;677      /* Check the parameters */
;;;678      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;679      assert_param(IS_DAC_IT(DAC_IT)); 
;;;680    
;;;681      /* Clear the selected DAC interrupt pending bits */
;;;682      DAC->SR = (DAC_IT << DAC_Channel);
000218  4b03              LDR      r3,|L1.552|
00021a  601a              STR      r2,[r3,#0]
;;;683    }
00021c  4770              BX       lr
;;;684    
                          ENDP

00021e  0000              DCW      0x0000
                  |L1.544|
                          DCD      0x40007400
                  |L1.548|
                          DCD      0x40007404
                  |L1.552|
                          DCD      0x40007434

;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_dac.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f2xx_dac_c_4da4a0a9____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___15_stm32f2xx_dac_c_4da4a0a9____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f2xx_dac_c_4da4a0a9____REVSH|
#line 130
|__asm___15_stm32f2xx_dac_c_4da4a0a9____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
