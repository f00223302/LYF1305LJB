; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_cryp_des.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_cryp_des.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_cryp_des.crf ..\BSP\STM32F2xx\src\stm32f2xx_cryp_des.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  CRYP_DES_ECB PROC
;;;93       */
;;;94     ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;95                              uint32_t Ilength, uint8_t *Output)
;;;96     {
000004  b08d              SUB      sp,sp,#0x34
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
;;;97       CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;98       CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;99       __IO uint32_t counter = 0;
00000c  f04f0000          MOV      r0,#0
000010  9002              STR      r0,[sp,#8]
;;;100      uint32_t busystatus = 0;
000012  4682              MOV      r10,r0
;;;101      ErrorStatus status = SUCCESS;
000014  f04f0001          MOV      r0,#1
000018  9001              STR      r0,[sp,#4]
;;;102      uint32_t keyaddr    = (uint32_t)Key;
00001a  4646              MOV      r6,r8
;;;103      uint32_t inputaddr  = (uint32_t)Input;
00001c  464c              MOV      r4,r9
;;;104      uint32_t outputaddr = (uint32_t)Output;
00001e  9d1a              LDR      r5,[sp,#0x68]
;;;105      uint32_t i = 0;
000020  f04f0b00          MOV      r11,#0
;;;106    
;;;107      /* Crypto structures initialisation*/
;;;108      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000024  a803              ADD      r0,sp,#0xc
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;109    
;;;110      /* Crypto Init for Encryption process */
;;;111      if( Mode == MODE_ENCRYPT ) /* DES encryption */
00002a  2f01              CMP      r7,#1
00002c  d104              BNE      |L1.56|
;;;112      {
;;;113         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
00002e  f04f0000          MOV      r0,#0
000032  f8ad002c          STRH     r0,[sp,#0x2c]
000036  e003              B        |L1.64|
                  |L1.56|
;;;114      }
;;;115      else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
;;;116      {      
;;;117         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000038  f04f0004          MOV      r0,#4
00003c  f8ad002c          STRH     r0,[sp,#0x2c]
                  |L1.64|
;;;118      }
;;;119    
;;;120      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
000040  f04f0010          MOV      r0,#0x10
000044  f8ad002e          STRH     r0,[sp,#0x2e]
;;;121      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000048  f04f0080          MOV      r0,#0x80
00004c  f8ad0030          STRH     r0,[sp,#0x30]
;;;122      CRYP_Init(&DES_CRYP_InitStructure);
000050  a80b              ADD      r0,sp,#0x2c
000052  f7fffffe          BL       CRYP_Init
;;;123    
;;;124      /* Key Initialisation */
;;;125      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000056  6830              LDR      r0,[r6,#0]
000058  ba00              REV      r0,r0
00005a  9005              STR      r0,[sp,#0x14]
;;;126      keyaddr+=4;
00005c  f1060604          ADD      r6,r6,#4
;;;127      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000060  6830              LDR      r0,[r6,#0]
000062  ba00              REV      r0,r0
000064  9006              STR      r0,[sp,#0x18]
;;;128      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
000066  a803              ADD      r0,sp,#0xc
000068  f7fffffe          BL       CRYP_KeyInit
;;;129    
;;;130      /* Flush IN/OUT FIFO */
;;;131      CRYP_FIFOFlush();
00006c  f7fffffe          BL       CRYP_FIFOFlush
;;;132    
;;;133      /* Enable Crypto processor */
;;;134      CRYP_Cmd(ENABLE);
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       CRYP_Cmd
;;;135    
;;;136      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
000076  f04f0b00          MOV      r11,#0
00007a  e02f              B        |L1.220|
                  |L1.124|
;;;137      {
;;;138    
;;;139        /* Write the Input block in the Input FIFO */
;;;140        CRYP_DataIn(*(uint32_t*)(inputaddr));
00007c  6820              LDR      r0,[r4,#0]
00007e  f7fffffe          BL       CRYP_DataIn
;;;141        inputaddr+=4;
000082  f1040404          ADD      r4,r4,#4
;;;142        CRYP_DataIn(*(uint32_t*)(inputaddr));
000086  6820              LDR      r0,[r4,#0]
000088  f7fffffe          BL       CRYP_DataIn
;;;143        inputaddr+=4;
00008c  f1040404          ADD      r4,r4,#4
;;;144    
;;;145    /* Wait until the complete message has been processed */
;;;146        counter = 0;
000090  f04f0000          MOV      r0,#0
000094  9002              STR      r0,[sp,#8]
;;;147        do
000096  bf00              NOP      
                  |L1.152|
;;;148        {
;;;149          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000098  2010              MOVS     r0,#0x10
00009a  f7fffffe          BL       CRYP_GetFlagStatus
00009e  4682              MOV      r10,r0
;;;150          counter++;
0000a0  9802              LDR      r0,[sp,#8]
0000a2  f1000001          ADD      r0,r0,#1
0000a6  9002              STR      r0,[sp,#8]
;;;151        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
0000a8  9802              LDR      r0,[sp,#8]
0000aa  f5b03f80          CMP      r0,#0x10000
0000ae  d002              BEQ      |L1.182|
0000b0  f1ba0f00          CMP      r10,#0
0000b4  d1f0              BNE      |L1.152|
                  |L1.182|
;;;152    
;;;153        if (busystatus != RESET)
0000b6  f1ba0f00          CMP      r10,#0
0000ba  d003              BEQ      |L1.196|
;;;154       {
;;;155           status = ERROR;
0000bc  f04f0000          MOV      r0,#0
0000c0  9001              STR      r0,[sp,#4]
0000c2  e009              B        |L1.216|
                  |L1.196|
;;;156        }
;;;157        else
;;;158        {
;;;159    
;;;160          /* Read the Output block from the Output FIFO */
;;;161          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000c4  f7fffffe          BL       CRYP_DataOut
0000c8  6028              STR      r0,[r5,#0]
;;;162          outputaddr+=4;
0000ca  f1050504          ADD      r5,r5,#4
;;;163          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000ce  f7fffffe          BL       CRYP_DataOut
0000d2  6028              STR      r0,[r5,#0]
;;;164          outputaddr+=4;
0000d4  f1050504          ADD      r5,r5,#4
                  |L1.216|
0000d8  f10b0b08          ADD      r11,r11,#8            ;136
                  |L1.220|
0000dc  9810              LDR      r0,[sp,#0x40]         ;136
0000de  4583              CMP      r11,r0                ;136
0000e0  d202              BCS      |L1.232|
0000e2  9801              LDR      r0,[sp,#4]            ;136
0000e4  2800              CMP      r0,#0                 ;136
0000e6  d1c9              BNE      |L1.124|
                  |L1.232|
;;;165        }
;;;166      }
;;;167    
;;;168      /* Disable Crypto */
;;;169      CRYP_Cmd(DISABLE);
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       CRYP_Cmd
;;;170    
;;;171      return status; 
0000ee  9801              LDR      r0,[sp,#4]
;;;172    }
0000f0  b011              ADD      sp,sp,#0x44
0000f2  e8bd8ff0          POP      {r4-r11,pc}
;;;173    
                          ENDP

                  CRYP_DES_CBC PROC
;;;188      */
;;;189    ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
0000f6  e92d4ff0          PUSH     {r4-r11,lr}
;;;190                             uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;191    {
0000fa  b093              SUB      sp,sp,#0x4c
0000fc  4680              MOV      r8,r0
0000fe  4689              MOV      r9,r1
000100  4692              MOV      r10,r2
000102  469b              MOV      r11,r3
;;;192      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;193      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;194      CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
;;;195      __IO uint32_t counter = 0;
000104  f04f0000          MOV      r0,#0
000108  9004              STR      r0,[sp,#0x10]
;;;196      uint32_t busystatus = 0;
00010a  9003              STR      r0,[sp,#0xc]
;;;197      ErrorStatus status = SUCCESS;
00010c  f04f0001          MOV      r0,#1
000110  9002              STR      r0,[sp,#8]
;;;198      uint32_t keyaddr    = (uint32_t)Key;
000112  464e              MOV      r6,r9
;;;199      uint32_t inputaddr  = (uint32_t)Input;
000114  465c              MOV      r4,r11
;;;200      uint32_t outputaddr = (uint32_t)Output;
000116  9d1d              LDR      r5,[sp,#0x74]
;;;201      uint32_t ivaddr     = (uint32_t)InitVectors;
000118  4657              MOV      r7,r10
;;;202      uint32_t i = 0;
00011a  f04f0000          MOV      r0,#0
00011e  9001              STR      r0,[sp,#4]
;;;203    
;;;204      /* Crypto structures initialisation*/
;;;205      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000120  a809              ADD      r0,sp,#0x24
000122  f7fffffe          BL       CRYP_KeyStructInit
;;;206    
;;;207      /* Crypto Init for Encryption process */
;;;208      if(Mode == MODE_ENCRYPT) /* DES encryption */
000126  f1b80f01          CMP      r8,#1
00012a  d104              BNE      |L1.310|
;;;209      {
;;;210         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
00012c  f04f0000          MOV      r0,#0
000130  f8ad0044          STRH     r0,[sp,#0x44]
000134  e003              B        |L1.318|
                  |L1.310|
;;;211      }
;;;212      else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
;;;213      {
;;;214         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000136  f04f0004          MOV      r0,#4
00013a  f8ad0044          STRH     r0,[sp,#0x44]
                  |L1.318|
;;;215      }
;;;216    
;;;217      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
00013e  f04f0018          MOV      r0,#0x18
000142  f8ad0046          STRH     r0,[sp,#0x46]
;;;218      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000146  f04f0080          MOV      r0,#0x80
00014a  f8ad0048          STRH     r0,[sp,#0x48]
;;;219      CRYP_Init(&DES_CRYP_InitStructure);
00014e  a811              ADD      r0,sp,#0x44
000150  f7fffffe          BL       CRYP_Init
;;;220    
;;;221      /* Key Initialisation */
;;;222      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000154  6830              LDR      r0,[r6,#0]
000156  ba00              REV      r0,r0
000158  900b              STR      r0,[sp,#0x2c]
;;;223      keyaddr+=4;
00015a  f1060604          ADD      r6,r6,#4
;;;224      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00015e  6830              LDR      r0,[r6,#0]
000160  ba00              REV      r0,r0
000162  900c              STR      r0,[sp,#0x30]
;;;225      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
000164  a809              ADD      r0,sp,#0x24
000166  f7fffffe          BL       CRYP_KeyInit
;;;226    
;;;227      /* Initialization Vectors */
;;;228      DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
00016a  6838              LDR      r0,[r7,#0]
00016c  ba00              REV      r0,r0
00016e  9005              STR      r0,[sp,#0x14]
;;;229      ivaddr+=4;
000170  f1070704          ADD      r7,r7,#4
;;;230      DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000174  6838              LDR      r0,[r7,#0]
000176  ba00              REV      r0,r0
000178  9006              STR      r0,[sp,#0x18]
;;;231      CRYP_IVInit(&DES_CRYP_IVInitStructure);
00017a  a805              ADD      r0,sp,#0x14
00017c  f7fffffe          BL       CRYP_IVInit
;;;232    
;;;233      /* Flush IN/OUT FIFO */
;;;234      CRYP_FIFOFlush();
000180  f7fffffe          BL       CRYP_FIFOFlush
;;;235      
;;;236      /* Enable Crypto processor */
;;;237      CRYP_Cmd(ENABLE);
000184  2001              MOVS     r0,#1
000186  f7fffffe          BL       CRYP_Cmd
;;;238    
;;;239      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
00018a  f04f0000          MOV      r0,#0
00018e  9001              STR      r0,[sp,#4]
000190  e030              B        |L1.500|
                  |L1.402|
;;;240      {
;;;241        /* Write the Input block in the Input FIFO */
;;;242        CRYP_DataIn(*(uint32_t*)(inputaddr));
000192  6820              LDR      r0,[r4,#0]
000194  f7fffffe          BL       CRYP_DataIn
;;;243        inputaddr+=4;
000198  f1040404          ADD      r4,r4,#4
;;;244        CRYP_DataIn(*(uint32_t*)(inputaddr));
00019c  6820              LDR      r0,[r4,#0]
00019e  f7fffffe          BL       CRYP_DataIn
;;;245        inputaddr+=4;
0001a2  f1040404          ADD      r4,r4,#4
;;;246    
;;;247        /* Wait until the complete message has been processed */
;;;248        counter = 0;
0001a6  f04f0000          MOV      r0,#0
0001aa  9004              STR      r0,[sp,#0x10]
;;;249        do
0001ac  bf00              NOP      
                  |L1.430|
;;;250        {
;;;251          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0001ae  2010              MOVS     r0,#0x10
0001b0  f7fffffe          BL       CRYP_GetFlagStatus
0001b4  9003              STR      r0,[sp,#0xc]
;;;252          counter++;
0001b6  9804              LDR      r0,[sp,#0x10]
0001b8  f1000001          ADD      r0,r0,#1
0001bc  9004              STR      r0,[sp,#0x10]
;;;253        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
0001be  9804              LDR      r0,[sp,#0x10]
0001c0  f5b03f80          CMP      r0,#0x10000
0001c4  d002              BEQ      |L1.460|
0001c6  9803              LDR      r0,[sp,#0xc]
0001c8  2800              CMP      r0,#0
0001ca  d1f0              BNE      |L1.430|
                  |L1.460|
;;;254    
;;;255        if (busystatus != RESET)
0001cc  9803              LDR      r0,[sp,#0xc]
0001ce  b118              CBZ      r0,|L1.472|
;;;256       {
;;;257           status = ERROR;
0001d0  f04f0000          MOV      r0,#0
0001d4  9002              STR      r0,[sp,#8]
0001d6  e009              B        |L1.492|
                  |L1.472|
;;;258        }
;;;259        else
;;;260        {
;;;261          /* Read the Output block from the Output FIFO */
;;;262          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001d8  f7fffffe          BL       CRYP_DataOut
0001dc  6028              STR      r0,[r5,#0]
;;;263          outputaddr+=4;
0001de  f1050504          ADD      r5,r5,#4
;;;264          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001e2  f7fffffe          BL       CRYP_DataOut
0001e6  6028              STR      r0,[r5,#0]
;;;265          outputaddr+=4;
0001e8  f1050504          ADD      r5,r5,#4
                  |L1.492|
0001ec  9801              LDR      r0,[sp,#4]            ;239
0001ee  f1000008          ADD      r0,r0,#8              ;239
0001f2  9001              STR      r0,[sp,#4]            ;239
                  |L1.500|
0001f4  991c              LDR      r1,[sp,#0x70]         ;239
0001f6  9801              LDR      r0,[sp,#4]            ;239
0001f8  4288              CMP      r0,r1                 ;239
0001fa  d202              BCS      |L1.514|
0001fc  9802              LDR      r0,[sp,#8]            ;239
0001fe  2800              CMP      r0,#0                 ;239
000200  d1c7              BNE      |L1.402|
                  |L1.514|
;;;266        }
;;;267      }
;;;268    
;;;269      /* Disable Crypto */
;;;270      CRYP_Cmd(DISABLE);
000202  2000              MOVS     r0,#0
000204  f7fffffe          BL       CRYP_Cmd
;;;271    
;;;272      return status; 
000208  9802              LDR      r0,[sp,#8]
;;;273    }
00020a  b013              ADD      sp,sp,#0x4c
00020c  e8bd8ff0          POP      {r4-r11,pc}
;;;274    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_cryp_des.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_des_c_9174d91f____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___20_stm32f2xx_cryp_des_c_9174d91f____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_des_c_9174d91f____REVSH|
#line 130
|__asm___20_stm32f2xx_cryp_des_c_9174d91f____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
