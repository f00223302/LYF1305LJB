; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_cryp_aes.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_cryp_aes.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_cryp_aes.crf ..\BSP\STM32F2xx\src\stm32f2xx_cryp_aes.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  CRYP_AES_ECB PROC
;;;97       */
;;;98     ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;99                              uint8_t* Input, uint32_t Ilength, uint8_t* Output)
;;;100    {
000004  b08d              SUB      sp,sp,#0x34
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4693              MOV      r11,r2
;;;101      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;102      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;103      __IO uint32_t counter = 0;
00000c  f04f0700          MOV      r7,#0
;;;104      uint32_t busystatus = 0;
000010  46b8              MOV      r8,r7
;;;105      ErrorStatus status = SUCCESS;
000012  f04f0001          MOV      r0,#1
000016  9002              STR      r0,[sp,#8]
;;;106      uint32_t keyaddr    = (uint32_t)Key;
000018  4654              MOV      r4,r10
;;;107      uint32_t inputaddr  = (uint32_t)Input;
00001a  9d10              LDR      r5,[sp,#0x40]
;;;108      uint32_t outputaddr = (uint32_t)Output;
00001c  9e1b              LDR      r6,[sp,#0x6c]
;;;109      uint32_t i = 0;
00001e  f04f0000          MOV      r0,#0
000022  9001              STR      r0,[sp,#4]
;;;110    
;;;111      /* Crypto structures initialisation*/
;;;112      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000024  a803              ADD      r0,sp,#0xc
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;113    
;;;114      switch(Keysize)
00002a  f1bb0f80          CMP      r11,#0x80
00002e  d006              BEQ      |L1.62|
000030  f1bb0fc0          CMP      r11,#0xc0
000034  d01a              BEQ      |L1.108|
000036  f5bb7f80          CMP      r11,#0x100
00003a  d163              BNE      |L1.260|
00003c  e037              B        |L1.174|
                  |L1.62|
;;;115      {
;;;116        case 128:
;;;117        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
00003e  f04f0000          MOV      r0,#0
000042  f8ad0032          STRH     r0,[sp,#0x32]
;;;118        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000046  6820              LDR      r0,[r4,#0]
000048  ba00              REV      r0,r0
00004a  9007              STR      r0,[sp,#0x1c]
;;;119        keyaddr+=4;
00004c  f1040404          ADD      r4,r4,#4
;;;120        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000050  6820              LDR      r0,[r4,#0]
000052  ba00              REV      r0,r0
000054  9008              STR      r0,[sp,#0x20]
;;;121        keyaddr+=4;
000056  f1040404          ADD      r4,r4,#4
;;;122        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00005a  6820              LDR      r0,[r4,#0]
00005c  ba00              REV      r0,r0
00005e  9009              STR      r0,[sp,#0x24]
;;;123        keyaddr+=4;
000060  f1040404          ADD      r4,r4,#4
;;;124        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000064  6820              LDR      r0,[r4,#0]
000066  ba00              REV      r0,r0
000068  900a              STR      r0,[sp,#0x28]
;;;125        break;
00006a  e04c              B        |L1.262|
                  |L1.108|
;;;126        case 192:
;;;127        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
00006c  f44f7080          MOV      r0,#0x100
000070  f8ad0032          STRH     r0,[sp,#0x32]
;;;128        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000074  6820              LDR      r0,[r4,#0]
000076  ba00              REV      r0,r0
000078  9005              STR      r0,[sp,#0x14]
;;;129        keyaddr+=4;
00007a  f1040404          ADD      r4,r4,#4
;;;130        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00007e  6820              LDR      r0,[r4,#0]
000080  ba00              REV      r0,r0
000082  9006              STR      r0,[sp,#0x18]
;;;131        keyaddr+=4;
000084  f1040404          ADD      r4,r4,#4
;;;132        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  ba00              REV      r0,r0
00008c  9007              STR      r0,[sp,#0x1c]
;;;133        keyaddr+=4;
00008e  f1040404          ADD      r4,r4,#4
;;;134        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000092  6820              LDR      r0,[r4,#0]
000094  ba00              REV      r0,r0
000096  9008              STR      r0,[sp,#0x20]
;;;135        keyaddr+=4;
000098  f1040404          ADD      r4,r4,#4
;;;136        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00009c  6820              LDR      r0,[r4,#0]
00009e  ba00              REV      r0,r0
0000a0  9009              STR      r0,[sp,#0x24]
;;;137        keyaddr+=4;
0000a2  f1040404          ADD      r4,r4,#4
;;;138        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000a6  6820              LDR      r0,[r4,#0]
0000a8  ba00              REV      r0,r0
0000aa  900a              STR      r0,[sp,#0x28]
;;;139        break;
0000ac  e02b              B        |L1.262|
                  |L1.174|
;;;140        case 256:
;;;141        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
0000ae  f44f7000          MOV      r0,#0x200
0000b2  f8ad0032          STRH     r0,[sp,#0x32]
;;;142        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
0000b6  6820              LDR      r0,[r4,#0]
0000b8  ba00              REV      r0,r0
0000ba  9003              STR      r0,[sp,#0xc]
;;;143        keyaddr+=4;
0000bc  f1040404          ADD      r4,r4,#4
;;;144        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
0000c0  6820              LDR      r0,[r4,#0]
0000c2  ba00              REV      r0,r0
0000c4  9004              STR      r0,[sp,#0x10]
;;;145        keyaddr+=4;
0000c6  f1040404          ADD      r4,r4,#4
;;;146        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
0000ca  6820              LDR      r0,[r4,#0]
0000cc  ba00              REV      r0,r0
0000ce  9005              STR      r0,[sp,#0x14]
;;;147        keyaddr+=4;
0000d0  f1040404          ADD      r4,r4,#4
;;;148        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
0000d4  6820              LDR      r0,[r4,#0]
0000d6  ba00              REV      r0,r0
0000d8  9006              STR      r0,[sp,#0x18]
;;;149        keyaddr+=4;
0000da  f1040404          ADD      r4,r4,#4
;;;150        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0000de  6820              LDR      r0,[r4,#0]
0000e0  ba00              REV      r0,r0
0000e2  9007              STR      r0,[sp,#0x1c]
;;;151        keyaddr+=4;
0000e4  f1040404          ADD      r4,r4,#4
;;;152        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0000e8  6820              LDR      r0,[r4,#0]
0000ea  ba00              REV      r0,r0
0000ec  9008              STR      r0,[sp,#0x20]
;;;153        keyaddr+=4;
0000ee  f1040404          ADD      r4,r4,#4
;;;154        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0000f2  6820              LDR      r0,[r4,#0]
0000f4  ba00              REV      r0,r0
0000f6  9009              STR      r0,[sp,#0x24]
;;;155        keyaddr+=4;
0000f8  f1040404          ADD      r4,r4,#4
;;;156        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000fc  6820              LDR      r0,[r4,#0]
0000fe  ba00              REV      r0,r0
000100  900a              STR      r0,[sp,#0x28]
;;;157        break;
000102  e000              B        |L1.262|
                  |L1.260|
;;;158        default:
;;;159        break;
000104  bf00              NOP      
                  |L1.262|
000106  bf00              NOP                            ;125
;;;160      }
;;;161    
;;;162      /*------------------ AES Decryption ------------------*/
;;;163      if(Mode == MODE_DECRYPT) /* AES decryption */
000108  f1b90f00          CMP      r9,#0
00010c  d12f              BNE      |L1.366|
;;;164      {
;;;165        /* Flush IN/OUT FIFOs */
;;;166        CRYP_FIFOFlush();
00010e  f7fffffe          BL       CRYP_FIFOFlush
;;;167    
;;;168        /* Crypto Init for Key preparation for decryption process */
;;;169        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000112  f04f0004          MOV      r0,#4
000116  f8ad002c          STRH     r0,[sp,#0x2c]
;;;170        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
00011a  f04f0038          MOV      r0,#0x38
00011e  f8ad002e          STRH     r0,[sp,#0x2e]
;;;171        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
000122  f04f0000          MOV      r0,#0
000126  f8ad0030          STRH     r0,[sp,#0x30]
;;;172        CRYP_Init(&AES_CRYP_InitStructure);
00012a  a80b              ADD      r0,sp,#0x2c
00012c  f7fffffe          BL       CRYP_Init
;;;173    
;;;174        /* Key Initialisation */
;;;175        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000130  a803              ADD      r0,sp,#0xc
000132  f7fffffe          BL       CRYP_KeyInit
;;;176    
;;;177        /* Enable Crypto processor */
;;;178        CRYP_Cmd(ENABLE);
000136  2001              MOVS     r0,#1
000138  f7fffffe          BL       CRYP_Cmd
;;;179    
;;;180        /* wait until the Busy flag is RESET */
;;;181        do
00013c  bf00              NOP      
                  |L1.318|
;;;182        {
;;;183          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00013e  2010              MOVS     r0,#0x10
000140  f7fffffe          BL       CRYP_GetFlagStatus
000144  4680              MOV      r8,r0
;;;184          counter++;
000146  f1070701          ADD      r7,r7,#1
;;;185        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
00014a  f5b73f80          CMP      r7,#0x10000
00014e  d002              BEQ      |L1.342|
000150  f1b80f00          CMP      r8,#0
000154  d1f3              BNE      |L1.318|
                  |L1.342|
;;;186    
;;;187        if (busystatus != RESET)
000156  f1b80f00          CMP      r8,#0
00015a  d003              BEQ      |L1.356|
;;;188       {
;;;189           status = ERROR;
00015c  f04f0000          MOV      r0,#0
000160  9002              STR      r0,[sp,#8]
000162  e00b              B        |L1.380|
                  |L1.356|
;;;190        }
;;;191        else
;;;192        {
;;;193          /* Crypto Init for decryption process */  
;;;194          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000164  f04f0004          MOV      r0,#4
000168  f8ad002c          STRH     r0,[sp,#0x2c]
00016c  e006              B        |L1.380|
                  |L1.366|
;;;195        }
;;;196      }
;;;197      /*------------------ AES Encryption ------------------*/
;;;198      else /* AES encryption */
;;;199      {
;;;200    
;;;201        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
00016e  a803              ADD      r0,sp,#0xc
000170  f7fffffe          BL       CRYP_KeyInit
;;;202    
;;;203        /* Crypto Init for Encryption process */
;;;204        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
000174  f04f0000          MOV      r0,#0
000178  f8ad002c          STRH     r0,[sp,#0x2c]
                  |L1.380|
;;;205      }
;;;206    
;;;207      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
00017c  f04f0020          MOV      r0,#0x20
000180  f8ad002e          STRH     r0,[sp,#0x2e]
;;;208      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000184  f04f0080          MOV      r0,#0x80
000188  f8ad0030          STRH     r0,[sp,#0x30]
;;;209      CRYP_Init(&AES_CRYP_InitStructure);
00018c  a80b              ADD      r0,sp,#0x2c
00018e  f7fffffe          BL       CRYP_Init
;;;210    
;;;211      /* Flush IN/OUT FIFOs */
;;;212      CRYP_FIFOFlush();
000192  f7fffffe          BL       CRYP_FIFOFlush
;;;213    
;;;214      /* Enable Crypto processor */
;;;215      CRYP_Cmd(ENABLE);
000196  2001              MOVS     r0,#1
000198  f7fffffe          BL       CRYP_Cmd
;;;216    
;;;217      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
00019c  f04f0000          MOV      r0,#0
0001a0  9001              STR      r0,[sp,#4]
0001a2  e041              B        |L1.552|
                  |L1.420|
;;;218      {
;;;219    
;;;220        /* Write the Input block in the IN FIFO */
;;;221        CRYP_DataIn(*(uint32_t*)(inputaddr));
0001a4  6828              LDR      r0,[r5,#0]
0001a6  f7fffffe          BL       CRYP_DataIn
;;;222        inputaddr+=4;
0001aa  f1050504          ADD      r5,r5,#4
;;;223        CRYP_DataIn(*(uint32_t*)(inputaddr));
0001ae  6828              LDR      r0,[r5,#0]
0001b0  f7fffffe          BL       CRYP_DataIn
;;;224        inputaddr+=4;
0001b4  f1050504          ADD      r5,r5,#4
;;;225        CRYP_DataIn(*(uint32_t*)(inputaddr));
0001b8  6828              LDR      r0,[r5,#0]
0001ba  f7fffffe          BL       CRYP_DataIn
;;;226        inputaddr+=4;
0001be  f1050504          ADD      r5,r5,#4
;;;227        CRYP_DataIn(*(uint32_t*)(inputaddr));
0001c2  6828              LDR      r0,[r5,#0]
0001c4  f7fffffe          BL       CRYP_DataIn
;;;228        inputaddr+=4;
0001c8  f1050504          ADD      r5,r5,#4
;;;229    
;;;230        /* Wait until the complete message has been processed */
;;;231        counter = 0;
0001cc  f04f0700          MOV      r7,#0
;;;232        do
0001d0  bf00              NOP      
                  |L1.466|
;;;233        {
;;;234          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0001d2  2010              MOVS     r0,#0x10
0001d4  f7fffffe          BL       CRYP_GetFlagStatus
0001d8  4680              MOV      r8,r0
;;;235          counter++;
0001da  f1070701          ADD      r7,r7,#1
;;;236        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0001de  f5b73f80          CMP      r7,#0x10000
0001e2  d002              BEQ      |L1.490|
0001e4  f1b80f00          CMP      r8,#0
0001e8  d1f3              BNE      |L1.466|
                  |L1.490|
;;;237    
;;;238        if (busystatus != RESET)
0001ea  f1b80f00          CMP      r8,#0
0001ee  d003              BEQ      |L1.504|
;;;239       {
;;;240           status = ERROR;
0001f0  f04f0000          MOV      r0,#0
0001f4  9002              STR      r0,[sp,#8]
0001f6  e013              B        |L1.544|
                  |L1.504|
;;;241        }
;;;242        else
;;;243        {
;;;244    
;;;245          /* Read the Output block from the Output FIFO */
;;;246          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001f8  f7fffffe          BL       CRYP_DataOut
0001fc  6030              STR      r0,[r6,#0]
;;;247          outputaddr+=4;
0001fe  f1060604          ADD      r6,r6,#4
;;;248          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000202  f7fffffe          BL       CRYP_DataOut
000206  6030              STR      r0,[r6,#0]
;;;249          outputaddr+=4;
000208  f1060604          ADD      r6,r6,#4
;;;250          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00020c  f7fffffe          BL       CRYP_DataOut
000210  6030              STR      r0,[r6,#0]
;;;251          outputaddr+=4;
000212  f1060604          ADD      r6,r6,#4
;;;252          *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
000216  f7fffffe          BL       CRYP_DataOut
00021a  6030              STR      r0,[r6,#0]
;;;253          outputaddr+=4;
00021c  f1060604          ADD      r6,r6,#4
                  |L1.544|
000220  9801              LDR      r0,[sp,#4]            ;217
000222  f1000010          ADD      r0,r0,#0x10           ;217
000226  9001              STR      r0,[sp,#4]            ;217
                  |L1.552|
000228  991a              LDR      r1,[sp,#0x68]         ;217
00022a  9801              LDR      r0,[sp,#4]            ;217
00022c  4288              CMP      r0,r1                 ;217
00022e  d202              BCS      |L1.566|
000230  9802              LDR      r0,[sp,#8]            ;217
000232  2800              CMP      r0,#0                 ;217
000234  d1b6              BNE      |L1.420|
                  |L1.566|
;;;254        }
;;;255      }
;;;256    
;;;257      /* Disable Crypto */
;;;258      CRYP_Cmd(DISABLE);
000236  2000              MOVS     r0,#0
000238  f7fffffe          BL       CRYP_Cmd
;;;259    
;;;260      return status; 
00023c  9802              LDR      r0,[sp,#8]
;;;261    }
00023e  b011              ADD      sp,sp,#0x44
000240  e8bd8ff0          POP      {r4-r11,pc}
;;;262    
                          ENDP

                  CRYP_AES_CBC PROC
;;;278      */
;;;279    ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
000244  e92d4fff          PUSH     {r0-r11,lr}
;;;280                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;281                             uint8_t *Output)
;;;282    {
000248  b091              SUB      sp,sp,#0x44
00024a  4682              MOV      r10,r0
00024c  468b              MOV      r11,r1
;;;283      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;284      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;285      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;286      __IO uint32_t counter = 0;
00024e  f04f0800          MOV      r8,#0
;;;287      uint32_t busystatus = 0;
000252  46c1              MOV      r9,r8
;;;288      ErrorStatus status = SUCCESS;
000254  f04f0001          MOV      r0,#1
000258  9002              STR      r0,[sp,#8]
;;;289      uint32_t keyaddr    = (uint32_t)Key;
00025a  9c13              LDR      r4,[sp,#0x4c]
;;;290      uint32_t inputaddr  = (uint32_t)Input;
00025c  9d1e              LDR      r5,[sp,#0x78]
;;;291      uint32_t outputaddr = (uint32_t)Output;
00025e  9e20              LDR      r6,[sp,#0x80]
;;;292      uint32_t ivaddr     = (uint32_t)InitVectors;
000260  465f              MOV      r7,r11
;;;293      uint32_t i = 0;
000262  f04f0000          MOV      r0,#0
000266  9001              STR      r0,[sp,#4]
;;;294    
;;;295      /* Crypto structures initialisation*/
;;;296      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000268  a807              ADD      r0,sp,#0x1c
00026a  f7fffffe          BL       CRYP_KeyStructInit
;;;297    
;;;298      switch(Keysize)
00026e  9814              LDR      r0,[sp,#0x50]
000270  2880              CMP      r0,#0x80
000272  d005              BEQ      |L1.640|
000274  28c0              CMP      r0,#0xc0
000276  d01a              BEQ      |L1.686|
000278  f5b07f80          CMP      r0,#0x100
00027c  d163              BNE      |L1.838|
00027e  e037              B        |L1.752|
                  |L1.640|
;;;299      {
;;;300        case 128:
;;;301        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
000280  f04f0000          MOV      r0,#0
000284  f8ad0042          STRH     r0,[sp,#0x42]
;;;302        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000288  6820              LDR      r0,[r4,#0]
00028a  ba00              REV      r0,r0
00028c  900b              STR      r0,[sp,#0x2c]
;;;303        keyaddr+=4;
00028e  f1040404          ADD      r4,r4,#4
;;;304        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000292  6820              LDR      r0,[r4,#0]
000294  ba00              REV      r0,r0
000296  900c              STR      r0,[sp,#0x30]
;;;305        keyaddr+=4;
000298  f1040404          ADD      r4,r4,#4
;;;306        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00029c  6820              LDR      r0,[r4,#0]
00029e  ba00              REV      r0,r0
0002a0  900d              STR      r0,[sp,#0x34]
;;;307        keyaddr+=4;
0002a2  f1040404          ADD      r4,r4,#4
;;;308        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0002a6  6820              LDR      r0,[r4,#0]
0002a8  ba00              REV      r0,r0
0002aa  900e              STR      r0,[sp,#0x38]
;;;309        break;
0002ac  e04c              B        |L1.840|
                  |L1.686|
;;;310        case 192:
;;;311        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
0002ae  f44f7080          MOV      r0,#0x100
0002b2  f8ad0042          STRH     r0,[sp,#0x42]
;;;312        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
0002b6  6820              LDR      r0,[r4,#0]
0002b8  ba00              REV      r0,r0
0002ba  9009              STR      r0,[sp,#0x24]
;;;313        keyaddr+=4;
0002bc  f1040404          ADD      r4,r4,#4
;;;314        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
0002c0  6820              LDR      r0,[r4,#0]
0002c2  ba00              REV      r0,r0
0002c4  900a              STR      r0,[sp,#0x28]
;;;315        keyaddr+=4;
0002c6  f1040404          ADD      r4,r4,#4
;;;316        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0002ca  6820              LDR      r0,[r4,#0]
0002cc  ba00              REV      r0,r0
0002ce  900b              STR      r0,[sp,#0x2c]
;;;317        keyaddr+=4;
0002d0  f1040404          ADD      r4,r4,#4
;;;318        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0002d4  6820              LDR      r0,[r4,#0]
0002d6  ba00              REV      r0,r0
0002d8  900c              STR      r0,[sp,#0x30]
;;;319        keyaddr+=4;
0002da  f1040404          ADD      r4,r4,#4
;;;320        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0002de  6820              LDR      r0,[r4,#0]
0002e0  ba00              REV      r0,r0
0002e2  900d              STR      r0,[sp,#0x34]
;;;321        keyaddr+=4;
0002e4  f1040404          ADD      r4,r4,#4
;;;322        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0002e8  6820              LDR      r0,[r4,#0]
0002ea  ba00              REV      r0,r0
0002ec  900e              STR      r0,[sp,#0x38]
;;;323        break;
0002ee  e02b              B        |L1.840|
                  |L1.752|
;;;324        case 256:
;;;325        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
0002f0  f44f7000          MOV      r0,#0x200
0002f4  f8ad0042          STRH     r0,[sp,#0x42]
;;;326        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
0002f8  6820              LDR      r0,[r4,#0]
0002fa  ba00              REV      r0,r0
0002fc  9007              STR      r0,[sp,#0x1c]
;;;327        keyaddr+=4;
0002fe  f1040404          ADD      r4,r4,#4
;;;328        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
000302  6820              LDR      r0,[r4,#0]
000304  ba00              REV      r0,r0
000306  9008              STR      r0,[sp,#0x20]
;;;329        keyaddr+=4;
000308  f1040404          ADD      r4,r4,#4
;;;330        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00030c  6820              LDR      r0,[r4,#0]
00030e  ba00              REV      r0,r0
000310  9009              STR      r0,[sp,#0x24]
;;;331        keyaddr+=4;
000312  f1040404          ADD      r4,r4,#4
;;;332        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000316  6820              LDR      r0,[r4,#0]
000318  ba00              REV      r0,r0
00031a  900a              STR      r0,[sp,#0x28]
;;;333        keyaddr+=4;
00031c  f1040404          ADD      r4,r4,#4
;;;334        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000320  6820              LDR      r0,[r4,#0]
000322  ba00              REV      r0,r0
000324  900b              STR      r0,[sp,#0x2c]
;;;335        keyaddr+=4;
000326  f1040404          ADD      r4,r4,#4
;;;336        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00032a  6820              LDR      r0,[r4,#0]
00032c  ba00              REV      r0,r0
00032e  900c              STR      r0,[sp,#0x30]
;;;337        keyaddr+=4;
000330  f1040404          ADD      r4,r4,#4
;;;338        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000334  6820              LDR      r0,[r4,#0]
000336  ba00              REV      r0,r0
000338  900d              STR      r0,[sp,#0x34]
;;;339        keyaddr+=4;
00033a  f1040404          ADD      r4,r4,#4
;;;340        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00033e  6820              LDR      r0,[r4,#0]
000340  ba00              REV      r0,r0
000342  900e              STR      r0,[sp,#0x38]
;;;341        break;
000344  e000              B        |L1.840|
                  |L1.838|
;;;342        default:
;;;343        break;
000346  bf00              NOP      
                  |L1.840|
000348  bf00              NOP                            ;309
;;;344      }
;;;345    
;;;346      /* CRYP Initialization Vectors */
;;;347      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
00034a  6838              LDR      r0,[r7,#0]
00034c  ba00              REV      r0,r0
00034e  9003              STR      r0,[sp,#0xc]
;;;348      ivaddr+=4;
000350  f1070704          ADD      r7,r7,#4
;;;349      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000354  6838              LDR      r0,[r7,#0]
000356  ba00              REV      r0,r0
000358  9004              STR      r0,[sp,#0x10]
;;;350      ivaddr+=4;
00035a  f1070704          ADD      r7,r7,#4
;;;351      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
00035e  6838              LDR      r0,[r7,#0]
000360  ba00              REV      r0,r0
000362  9005              STR      r0,[sp,#0x14]
;;;352      ivaddr+=4;
000364  f1070704          ADD      r7,r7,#4
;;;353      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
000368  6838              LDR      r0,[r7,#0]
00036a  ba00              REV      r0,r0
00036c  9006              STR      r0,[sp,#0x18]
;;;354    
;;;355    
;;;356      /*------------------ AES Decryption ------------------*/
;;;357      if(Mode == MODE_DECRYPT) /* AES decryption */
00036e  f1ba0f00          CMP      r10,#0
000372  d12f              BNE      |L1.980|
;;;358      {
;;;359        /* Flush IN/OUT FIFOs */
;;;360        CRYP_FIFOFlush();
000374  f7fffffe          BL       CRYP_FIFOFlush
;;;361    
;;;362        /* Crypto Init for Key preparation for decryption process */
;;;363        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000378  f04f0004          MOV      r0,#4
00037c  f8ad003c          STRH     r0,[sp,#0x3c]
;;;364        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
000380  f04f0038          MOV      r0,#0x38
000384  f8ad003e          STRH     r0,[sp,#0x3e]
;;;365        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
000388  f04f0000          MOV      r0,#0
00038c  f8ad0040          STRH     r0,[sp,#0x40]
;;;366    
;;;367        CRYP_Init(&AES_CRYP_InitStructure);
000390  a80f              ADD      r0,sp,#0x3c
000392  f7fffffe          BL       CRYP_Init
;;;368    
;;;369        /* Key Initialisation */
;;;370        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000396  a807              ADD      r0,sp,#0x1c
000398  f7fffffe          BL       CRYP_KeyInit
;;;371    
;;;372        /* Enable Crypto processor */
;;;373        CRYP_Cmd(ENABLE);
00039c  2001              MOVS     r0,#1
00039e  f7fffffe          BL       CRYP_Cmd
;;;374    
;;;375        /* wait until the Busy flag is RESET */
;;;376        do
0003a2  bf00              NOP      
                  |L1.932|
;;;377        {
;;;378          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0003a4  2010              MOVS     r0,#0x10
0003a6  f7fffffe          BL       CRYP_GetFlagStatus
0003aa  4681              MOV      r9,r0
;;;379          counter++;
0003ac  f1080801          ADD      r8,r8,#1
;;;380        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0003b0  f5b83f80          CMP      r8,#0x10000
0003b4  d002              BEQ      |L1.956|
0003b6  f1b90f00          CMP      r9,#0
0003ba  d1f3              BNE      |L1.932|
                  |L1.956|
;;;381    
;;;382        if (busystatus != RESET)
0003bc  f1b90f00          CMP      r9,#0
0003c0  d003              BEQ      |L1.970|
;;;383       {
;;;384           status = ERROR;
0003c2  f04f0000          MOV      r0,#0
0003c6  9002              STR      r0,[sp,#8]
0003c8  e00b              B        |L1.994|
                  |L1.970|
;;;385        }
;;;386        else
;;;387        {
;;;388          /* Crypto Init for decryption process */  
;;;389          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
0003ca  f04f0004          MOV      r0,#4
0003ce  f8ad003c          STRH     r0,[sp,#0x3c]
0003d2  e006              B        |L1.994|
                  |L1.980|
;;;390        }
;;;391      }
;;;392      /*------------------ AES Encryption ------------------*/
;;;393      else /* AES encryption */
;;;394      {
;;;395        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0003d4  a807              ADD      r0,sp,#0x1c
0003d6  f7fffffe          BL       CRYP_KeyInit
;;;396    
;;;397        /* Crypto Init for Encryption process */
;;;398        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
0003da  f04f0000          MOV      r0,#0
0003de  f8ad003c          STRH     r0,[sp,#0x3c]
                  |L1.994|
;;;399      }
;;;400      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
0003e2  f04f0028          MOV      r0,#0x28
0003e6  f8ad003e          STRH     r0,[sp,#0x3e]
;;;401      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
0003ea  f04f0080          MOV      r0,#0x80
0003ee  f8ad0040          STRH     r0,[sp,#0x40]
;;;402      CRYP_Init(&AES_CRYP_InitStructure);
0003f2  a80f              ADD      r0,sp,#0x3c
0003f4  f7fffffe          BL       CRYP_Init
;;;403    
;;;404      /* CRYP Initialization Vectors */
;;;405      CRYP_IVInit(&AES_CRYP_IVInitStructure);
0003f8  a803              ADD      r0,sp,#0xc
0003fa  f7fffffe          BL       CRYP_IVInit
;;;406    
;;;407      /* Flush IN/OUT FIFOs */
;;;408      CRYP_FIFOFlush();
0003fe  f7fffffe          BL       CRYP_FIFOFlush
;;;409    
;;;410      /* Enable Crypto processor */
;;;411      CRYP_Cmd(ENABLE);
000402  2001              MOVS     r0,#1
000404  f7fffffe          BL       CRYP_Cmd
;;;412    
;;;413    
;;;414      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
000408  f04f0000          MOV      r0,#0
00040c  9001              STR      r0,[sp,#4]
00040e  e041              B        |L1.1172|
                  |L1.1040|
;;;415      {
;;;416    
;;;417        /* Write the Input block in the IN FIFO */
;;;418        CRYP_DataIn(*(uint32_t*)(inputaddr));
000410  6828              LDR      r0,[r5,#0]
000412  f7fffffe          BL       CRYP_DataIn
;;;419        inputaddr+=4;
000416  f1050504          ADD      r5,r5,#4
;;;420        CRYP_DataIn(*(uint32_t*)(inputaddr));
00041a  6828              LDR      r0,[r5,#0]
00041c  f7fffffe          BL       CRYP_DataIn
;;;421        inputaddr+=4;
000420  f1050504          ADD      r5,r5,#4
;;;422        CRYP_DataIn(*(uint32_t*)(inputaddr));
000424  6828              LDR      r0,[r5,#0]
000426  f7fffffe          BL       CRYP_DataIn
;;;423        inputaddr+=4;
00042a  f1050504          ADD      r5,r5,#4
;;;424        CRYP_DataIn(*(uint32_t*)(inputaddr));
00042e  6828              LDR      r0,[r5,#0]
000430  f7fffffe          BL       CRYP_DataIn
;;;425        inputaddr+=4;
000434  f1050504          ADD      r5,r5,#4
;;;426        /* Wait until the complete message has been processed */
;;;427        counter = 0;
000438  f04f0800          MOV      r8,#0
;;;428        do
00043c  bf00              NOP      
                  |L1.1086|
;;;429        {
;;;430          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00043e  2010              MOVS     r0,#0x10
000440  f7fffffe          BL       CRYP_GetFlagStatus
000444  4681              MOV      r9,r0
;;;431          counter++;
000446  f1080801          ADD      r8,r8,#1
;;;432        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
00044a  f5b83f80          CMP      r8,#0x10000
00044e  d002              BEQ      |L1.1110|
000450  f1b90f00          CMP      r9,#0
000454  d1f3              BNE      |L1.1086|
                  |L1.1110|
;;;433    
;;;434        if (busystatus != RESET)
000456  f1b90f00          CMP      r9,#0
00045a  d003              BEQ      |L1.1124|
;;;435       {
;;;436           status = ERROR;
00045c  f04f0000          MOV      r0,#0
000460  9002              STR      r0,[sp,#8]
000462  e013              B        |L1.1164|
                  |L1.1124|
;;;437        }
;;;438        else
;;;439        {
;;;440    
;;;441          /* Read the Output block from the Output FIFO */
;;;442          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000464  f7fffffe          BL       CRYP_DataOut
000468  6030              STR      r0,[r6,#0]
;;;443          outputaddr+=4;
00046a  f1060604          ADD      r6,r6,#4
;;;444          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00046e  f7fffffe          BL       CRYP_DataOut
000472  6030              STR      r0,[r6,#0]
;;;445          outputaddr+=4;
000474  f1060604          ADD      r6,r6,#4
;;;446          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000478  f7fffffe          BL       CRYP_DataOut
00047c  6030              STR      r0,[r6,#0]
;;;447          outputaddr+=4;
00047e  f1060604          ADD      r6,r6,#4
;;;448          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000482  f7fffffe          BL       CRYP_DataOut
000486  6030              STR      r0,[r6,#0]
;;;449          outputaddr+=4;
000488  f1060604          ADD      r6,r6,#4
                  |L1.1164|
00048c  9801              LDR      r0,[sp,#4]            ;414
00048e  f1000010          ADD      r0,r0,#0x10           ;414
000492  9001              STR      r0,[sp,#4]            ;414
                  |L1.1172|
000494  991f              LDR      r1,[sp,#0x7c]         ;414
000496  9801              LDR      r0,[sp,#4]            ;414
000498  4288              CMP      r0,r1                 ;414
00049a  d202              BCS      |L1.1186|
00049c  9802              LDR      r0,[sp,#8]            ;414
00049e  2800              CMP      r0,#0                 ;414
0004a0  d1b6              BNE      |L1.1040|
                  |L1.1186|
;;;450        }
;;;451      }
;;;452    
;;;453      /* Disable Crypto */
;;;454      CRYP_Cmd(DISABLE);
0004a2  2000              MOVS     r0,#0
0004a4  f7fffffe          BL       CRYP_Cmd
;;;455    
;;;456      return status;
0004a8  9802              LDR      r0,[sp,#8]
;;;457    }
0004aa  b015              ADD      sp,sp,#0x54
0004ac  e8bd8ff0          POP      {r4-r11,pc}
;;;458    
                          ENDP

                  CRYP_AES_CTR PROC
;;;474      */
;;;475    ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
0004b0  e92d4ff0          PUSH     {r4-r11,lr}
;;;476                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;477                             uint8_t *Output)
;;;478    {
0004b4  b093              SUB      sp,sp,#0x4c
0004b6  4680              MOV      r8,r0
0004b8  4689              MOV      r9,r1
0004ba  4692              MOV      r10,r2
0004bc  469b              MOV      r11,r3
;;;479      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;480      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;481      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;482      __IO uint32_t counter = 0;
0004be  f04f0000          MOV      r0,#0
0004c2  9004              STR      r0,[sp,#0x10]
;;;483      uint32_t busystatus = 0;
0004c4  9003              STR      r0,[sp,#0xc]
;;;484      ErrorStatus status = SUCCESS;
0004c6  f04f0001          MOV      r0,#1
0004ca  9002              STR      r0,[sp,#8]
;;;485      uint32_t keyaddr    = (uint32_t)Key;
0004cc  4654              MOV      r4,r10
;;;486      uint32_t inputaddr  = (uint32_t)Input;
0004ce  9d1c              LDR      r5,[sp,#0x70]
;;;487      uint32_t outputaddr = (uint32_t)Output;
0004d0  9e1e              LDR      r6,[sp,#0x78]
;;;488      uint32_t ivaddr     = (uint32_t)InitVectors;
0004d2  464f              MOV      r7,r9
;;;489      uint32_t i = 0;
0004d4  f04f0000          MOV      r0,#0
0004d8  9001              STR      r0,[sp,#4]
;;;490    
;;;491      /* Crypto structures initialisation*/
;;;492      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
0004da  a809              ADD      r0,sp,#0x24
0004dc  f7fffffe          BL       CRYP_KeyStructInit
;;;493    
;;;494      switch(Keysize)
0004e0  f1bb0f80          CMP      r11,#0x80
0004e4  d006              BEQ      |L1.1268|
0004e6  f1bb0fc0          CMP      r11,#0xc0
0004ea  d01a              BEQ      |L1.1314|
0004ec  f5bb7f80          CMP      r11,#0x100
0004f0  d163              BNE      |L1.1466|
0004f2  e037              B        |L1.1380|
                  |L1.1268|
;;;495      {
;;;496        case 128:
;;;497        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
0004f4  f04f0000          MOV      r0,#0
0004f8  f8ad004a          STRH     r0,[sp,#0x4a]
;;;498        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0004fc  6820              LDR      r0,[r4,#0]
0004fe  ba00              REV      r0,r0
000500  900d              STR      r0,[sp,#0x34]
;;;499        keyaddr+=4;
000502  f1040404          ADD      r4,r4,#4
;;;500        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000506  6820              LDR      r0,[r4,#0]
000508  ba00              REV      r0,r0
00050a  900e              STR      r0,[sp,#0x38]
;;;501        keyaddr+=4;
00050c  f1040404          ADD      r4,r4,#4
;;;502        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000510  6820              LDR      r0,[r4,#0]
000512  ba00              REV      r0,r0
000514  900f              STR      r0,[sp,#0x3c]
;;;503        keyaddr+=4;
000516  f1040404          ADD      r4,r4,#4
;;;504        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00051a  6820              LDR      r0,[r4,#0]
00051c  ba00              REV      r0,r0
00051e  9010              STR      r0,[sp,#0x40]
;;;505        break;
000520  e04c              B        |L1.1468|
                  |L1.1314|
;;;506        case 192:
;;;507        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
000522  f44f7080          MOV      r0,#0x100
000526  f8ad004a          STRH     r0,[sp,#0x4a]
;;;508        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00052a  6820              LDR      r0,[r4,#0]
00052c  ba00              REV      r0,r0
00052e  900b              STR      r0,[sp,#0x2c]
;;;509        keyaddr+=4;
000530  f1040404          ADD      r4,r4,#4
;;;510        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000534  6820              LDR      r0,[r4,#0]
000536  ba00              REV      r0,r0
000538  900c              STR      r0,[sp,#0x30]
;;;511        keyaddr+=4;
00053a  f1040404          ADD      r4,r4,#4
;;;512        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00053e  6820              LDR      r0,[r4,#0]
000540  ba00              REV      r0,r0
000542  900d              STR      r0,[sp,#0x34]
;;;513        keyaddr+=4;
000544  f1040404          ADD      r4,r4,#4
;;;514        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000548  6820              LDR      r0,[r4,#0]
00054a  ba00              REV      r0,r0
00054c  900e              STR      r0,[sp,#0x38]
;;;515        keyaddr+=4;
00054e  f1040404          ADD      r4,r4,#4
;;;516        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000552  6820              LDR      r0,[r4,#0]
000554  ba00              REV      r0,r0
000556  900f              STR      r0,[sp,#0x3c]
;;;517        keyaddr+=4;
000558  f1040404          ADD      r4,r4,#4
;;;518        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00055c  6820              LDR      r0,[r4,#0]
00055e  ba00              REV      r0,r0
000560  9010              STR      r0,[sp,#0x40]
;;;519        break;
000562  e02b              B        |L1.1468|
                  |L1.1380|
;;;520        case 256:
;;;521        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000564  f44f7000          MOV      r0,#0x200
000568  f8ad004a          STRH     r0,[sp,#0x4a]
;;;522        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
00056c  6820              LDR      r0,[r4,#0]
00056e  ba00              REV      r0,r0
000570  9009              STR      r0,[sp,#0x24]
;;;523        keyaddr+=4;
000572  f1040404          ADD      r4,r4,#4
;;;524        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
000576  6820              LDR      r0,[r4,#0]
000578  ba00              REV      r0,r0
00057a  900a              STR      r0,[sp,#0x28]
;;;525        keyaddr+=4;
00057c  f1040404          ADD      r4,r4,#4
;;;526        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000580  6820              LDR      r0,[r4,#0]
000582  ba00              REV      r0,r0
000584  900b              STR      r0,[sp,#0x2c]
;;;527        keyaddr+=4;
000586  f1040404          ADD      r4,r4,#4
;;;528        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00058a  6820              LDR      r0,[r4,#0]
00058c  ba00              REV      r0,r0
00058e  900c              STR      r0,[sp,#0x30]
;;;529        keyaddr+=4;
000590  f1040404          ADD      r4,r4,#4
;;;530        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000594  6820              LDR      r0,[r4,#0]
000596  ba00              REV      r0,r0
000598  900d              STR      r0,[sp,#0x34]
;;;531        keyaddr+=4;
00059a  f1040404          ADD      r4,r4,#4
;;;532        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00059e  6820              LDR      r0,[r4,#0]
0005a0  ba00              REV      r0,r0
0005a2  900e              STR      r0,[sp,#0x38]
;;;533        keyaddr+=4;
0005a4  f1040404          ADD      r4,r4,#4
;;;534        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0005a8  6820              LDR      r0,[r4,#0]
0005aa  ba00              REV      r0,r0
0005ac  900f              STR      r0,[sp,#0x3c]
;;;535        keyaddr+=4;
0005ae  f1040404          ADD      r4,r4,#4
;;;536        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0005b2  6820              LDR      r0,[r4,#0]
0005b4  ba00              REV      r0,r0
0005b6  9010              STR      r0,[sp,#0x40]
;;;537        break;
0005b8  e000              B        |L1.1468|
                  |L1.1466|
;;;538        default:
;;;539        break;
0005ba  bf00              NOP      
                  |L1.1468|
0005bc  bf00              NOP                            ;505
;;;540      }
;;;541      /* CRYP Initialization Vectors */
;;;542      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0005be  6838              LDR      r0,[r7,#0]
0005c0  ba00              REV      r0,r0
0005c2  9005              STR      r0,[sp,#0x14]
;;;543      ivaddr+=4;
0005c4  f1070704          ADD      r7,r7,#4
;;;544      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0005c8  6838              LDR      r0,[r7,#0]
0005ca  ba00              REV      r0,r0
0005cc  9006              STR      r0,[sp,#0x18]
;;;545      ivaddr+=4;
0005ce  f1070704          ADD      r7,r7,#4
;;;546      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0005d2  6838              LDR      r0,[r7,#0]
0005d4  ba00              REV      r0,r0
0005d6  9007              STR      r0,[sp,#0x1c]
;;;547      ivaddr+=4;
0005d8  f1070704          ADD      r7,r7,#4
;;;548      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
0005dc  6838              LDR      r0,[r7,#0]
0005de  ba00              REV      r0,r0
0005e0  9008              STR      r0,[sp,#0x20]
;;;549    
;;;550      /* Key Initialisation */
;;;551      CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
0005e2  a809              ADD      r0,sp,#0x24
0005e4  f7fffffe          BL       CRYP_KeyInit
;;;552    
;;;553      /*------------------ AES Decryption ------------------*/
;;;554      if(Mode == MODE_DECRYPT) /* AES decryption */
0005e8  f1b80f00          CMP      r8,#0
0005ec  d104              BNE      |L1.1528|
;;;555      {
;;;556        /* Crypto Init for decryption process */
;;;557        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
0005ee  f04f0004          MOV      r0,#4
0005f2  f8ad0044          STRH     r0,[sp,#0x44]
0005f6  e003              B        |L1.1536|
                  |L1.1528|
;;;558      }
;;;559      /*------------------ AES Encryption ------------------*/
;;;560      else /* AES encryption */
;;;561      {
;;;562        /* Crypto Init for Encryption process */
;;;563        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
0005f8  f04f0000          MOV      r0,#0
0005fc  f8ad0044          STRH     r0,[sp,#0x44]
                  |L1.1536|
;;;564      }
;;;565      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
000600  f04f0030          MOV      r0,#0x30
000604  f8ad0046          STRH     r0,[sp,#0x46]
;;;566      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000608  f04f0080          MOV      r0,#0x80
00060c  f8ad0048          STRH     r0,[sp,#0x48]
;;;567      CRYP_Init(&AES_CRYP_InitStructure);
000610  a811              ADD      r0,sp,#0x44
000612  f7fffffe          BL       CRYP_Init
;;;568    
;;;569      /* CRYP Initialization Vectors */
;;;570      CRYP_IVInit(&AES_CRYP_IVInitStructure);
000616  a805              ADD      r0,sp,#0x14
000618  f7fffffe          BL       CRYP_IVInit
;;;571    
;;;572      /* Flush IN/OUT FIFOs */
;;;573      CRYP_FIFOFlush();
00061c  f7fffffe          BL       CRYP_FIFOFlush
;;;574    
;;;575      /* Enable Crypto processor */
;;;576      CRYP_Cmd(ENABLE);
000620  2001              MOVS     r0,#1
000622  f7fffffe          BL       CRYP_Cmd
;;;577    
;;;578      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
000626  f04f0000          MOV      r0,#0
00062a  9001              STR      r0,[sp,#4]
00062c  e044              B        |L1.1720|
                  |L1.1582|
;;;579      {
;;;580    
;;;581        /* Write the Input block in the IN FIFO */
;;;582        CRYP_DataIn(*(uint32_t*)(inputaddr));
00062e  6828              LDR      r0,[r5,#0]
000630  f7fffffe          BL       CRYP_DataIn
;;;583        inputaddr+=4;
000634  f1050504          ADD      r5,r5,#4
;;;584        CRYP_DataIn(*(uint32_t*)(inputaddr));
000638  6828              LDR      r0,[r5,#0]
00063a  f7fffffe          BL       CRYP_DataIn
;;;585        inputaddr+=4;
00063e  f1050504          ADD      r5,r5,#4
;;;586        CRYP_DataIn(*(uint32_t*)(inputaddr));
000642  6828              LDR      r0,[r5,#0]
000644  f7fffffe          BL       CRYP_DataIn
;;;587        inputaddr+=4;
000648  f1050504          ADD      r5,r5,#4
;;;588        CRYP_DataIn(*(uint32_t*)(inputaddr));
00064c  6828              LDR      r0,[r5,#0]
00064e  f7fffffe          BL       CRYP_DataIn
;;;589        inputaddr+=4;
000652  f1050504          ADD      r5,r5,#4
;;;590        /* Wait until the complete message has been processed */
;;;591        counter = 0;
000656  f04f0000          MOV      r0,#0
00065a  9004              STR      r0,[sp,#0x10]
;;;592        do
00065c  bf00              NOP      
                  |L1.1630|
;;;593        {
;;;594          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00065e  2010              MOVS     r0,#0x10
000660  f7fffffe          BL       CRYP_GetFlagStatus
000664  9003              STR      r0,[sp,#0xc]
;;;595          counter++;
000666  9804              LDR      r0,[sp,#0x10]
000668  f1000001          ADD      r0,r0,#1
00066c  9004              STR      r0,[sp,#0x10]
;;;596        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
00066e  9804              LDR      r0,[sp,#0x10]
000670  f5b03f80          CMP      r0,#0x10000
000674  d002              BEQ      |L1.1660|
000676  9803              LDR      r0,[sp,#0xc]
000678  2800              CMP      r0,#0
00067a  d1f0              BNE      |L1.1630|
                  |L1.1660|
;;;597    
;;;598        if (busystatus != RESET)
00067c  9803              LDR      r0,[sp,#0xc]
00067e  b118              CBZ      r0,|L1.1672|
;;;599       {
;;;600           status = ERROR;
000680  f04f0000          MOV      r0,#0
000684  9002              STR      r0,[sp,#8]
000686  e013              B        |L1.1712|
                  |L1.1672|
;;;601        }
;;;602        else
;;;603        {
;;;604    
;;;605          /* Read the Output block from the Output FIFO */
;;;606          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000688  f7fffffe          BL       CRYP_DataOut
00068c  6030              STR      r0,[r6,#0]
;;;607          outputaddr+=4;
00068e  f1060604          ADD      r6,r6,#4
;;;608          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000692  f7fffffe          BL       CRYP_DataOut
000696  6030              STR      r0,[r6,#0]
;;;609          outputaddr+=4;
000698  f1060604          ADD      r6,r6,#4
;;;610          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00069c  f7fffffe          BL       CRYP_DataOut
0006a0  6030              STR      r0,[r6,#0]
;;;611          outputaddr+=4;
0006a2  f1060604          ADD      r6,r6,#4
;;;612          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0006a6  f7fffffe          BL       CRYP_DataOut
0006aa  6030              STR      r0,[r6,#0]
;;;613          outputaddr+=4;
0006ac  f1060604          ADD      r6,r6,#4
                  |L1.1712|
0006b0  9801              LDR      r0,[sp,#4]            ;578
0006b2  f1000010          ADD      r0,r0,#0x10           ;578
0006b6  9001              STR      r0,[sp,#4]            ;578
                  |L1.1720|
0006b8  991d              LDR      r1,[sp,#0x74]         ;578
0006ba  9801              LDR      r0,[sp,#4]            ;578
0006bc  4288              CMP      r0,r1                 ;578
0006be  d202              BCS      |L1.1734|
0006c0  9802              LDR      r0,[sp,#8]            ;578
0006c2  2800              CMP      r0,#0                 ;578
0006c4  d1b3              BNE      |L1.1582|
                  |L1.1734|
;;;614        }
;;;615      }
;;;616      /* Disable Crypto */
;;;617      CRYP_Cmd(DISABLE);
0006c6  2000              MOVS     r0,#0
0006c8  f7fffffe          BL       CRYP_Cmd
;;;618    
;;;619      return status;
0006cc  9802              LDR      r0,[sp,#8]
;;;620    }
0006ce  b013              ADD      sp,sp,#0x4c
0006d0  e8bd8ff0          POP      {r4-r11,pc}
;;;621    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_cryp_aes.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____REVSH|
#line 130
|__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
