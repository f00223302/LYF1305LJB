; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\bsp_can.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\bsp_can.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\bsp_can.crf ..\BSP\bsp_can.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BSP_InitCan PROC
;;;78     //////////////////////////////////////////////////////////////////////////////////////
;;;79     void BSP_InitCan(CAN_TypeDef* CANx, CAN_InitTypeDef *CanInit, CAN_FilterInitTypeDef *FilterInit)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;80     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;81     	uint8_t i;
;;;82     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;83       
;;;84     	/* CAN GPIOs configuration **************************************************/
;;;85     
;;;86     	if (CANx == CAN_1)
00000a  486b              LDR      r0,|L1.440|
00000c  4285              CMP      r5,r0
00000e  d102              BNE      |L1.22|
;;;87     		i = 1;
000010  f04f0401          MOV      r4,#1
000014  e007              B        |L1.38|
                  |L1.22|
;;;88     	else if (CANx == CAN_2)
000016  4869              LDR      r0,|L1.444|
000018  4285              CMP      r5,r0
00001a  d102              BNE      |L1.34|
;;;89     		i = 2;
00001c  f04f0402          MOV      r4,#2
000020  e001              B        |L1.38|
                  |L1.34|
;;;90     	else
;;;91     		return;
;;;92     		
;;;93     	/* Enable GPIO clock */
;;;94     	RCC_AHB1PeriphClockCmd(CAN_TX_PORT_CLK[i] | CAN_RX_PORT_CLK[i], ENABLE);
;;;95       
;;;96     	/* Configure CAN RX and TX pins */
;;;97     	GPIO_InitStructure.GPIO_Pin = CAN_RX_PIN[i] ;
;;;98     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;99     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;100    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;101    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
;;;102    	GPIO_Init(CAN_RX_PORT[i], &GPIO_InitStructure);
;;;103    
;;;104    	GPIO_InitStructure.GPIO_Pin = CAN_TX_PIN[i];
;;;105    	GPIO_Init(CAN_TX_PORT[i], &GPIO_InitStructure);
;;;106    
;;;107    	/* Connect CAN pins to AF9 */
;;;108    	GPIO_PinAFConfig(CAN_RX_PORT[i], CAN_RX_SOURCE[i], CAN_AF_PORT[i]);
;;;109    	GPIO_PinAFConfig(CAN_TX_PORT[i], CAN_TX_SOURCE[i], CAN_AF_PORT[i]); 
;;;110    
;;;111    	/* CAN configuration ********************************************************/  
;;;112    	/* Enable CAN clock */
;;;113    	RCC_APB1PeriphClockCmd(CAN_CLK[i], ENABLE);
;;;114    	
;;;115    	/* CAN register init */
;;;116    	CAN_DeInit(CANx);
;;;117    	
;;;118    	///	
;;;119    	CAN_Init(CANx, CanInit);
;;;120    
;;;121    	///
;;;122    	CAN_FilterInit(FilterInit);
;;;123      
;;;124      
;;;125    	/* Enable Tx mailbox empty Interrupt, FIFO 0 message pending Interrupt */
;;;126    	CAN_ITConfig(CANx, CAN_IT_TME | CAN_IT_FMP0, ENABLE);
;;;127    	
;;;128    	
;;;129    	/* Configure and enable TX empty interrupt */
;;;130    	BSP_IntVectSet(CanIntID[i], CanIsr[i]);
;;;131        BSP_IntEn(CanIntID[i]);
;;;132    }
000022  e8bd81fc          POP      {r2-r8,pc}
                  |L1.38|
000026  4966              LDR      r1,|L1.448|
000028  f8511024          LDR      r1,[r1,r4,LSL #2]     ;94
00002c  4a65              LDR      r2,|L1.452|
00002e  f8522024          LDR      r2,[r2,r4,LSL #2]     ;94
000032  ea410002          ORR      r0,r1,r2              ;94
000036  2101              MOVS     r1,#1                 ;94
000038  f7fffffe          BL       RCC_AHB1PeriphClockCmd
00003c  4862              LDR      r0,|L1.456|
00003e  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;97
000042  9000              STR      r0,[sp,#0]            ;97
000044  f04f0002          MOV      r0,#2                 ;98
000048  f88d0004          STRB     r0,[sp,#4]            ;98
00004c  f88d0005          STRB     r0,[sp,#5]            ;99
000050  f04f0000          MOV      r0,#0                 ;100
000054  f88d0006          STRB     r0,[sp,#6]            ;100
000058  f04f0001          MOV      r0,#1                 ;101
00005c  f88d0007          STRB     r0,[sp,#7]            ;101
000060  495a              LDR      r1,|L1.460|
000062  f8510024          LDR      r0,[r1,r4,LSL #2]     ;102
000066  4669              MOV      r1,sp                 ;102
000068  f7fffffe          BL       GPIO_Init
00006c  4858              LDR      r0,|L1.464|
00006e  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;104
000072  9000              STR      r0,[sp,#0]            ;104
000074  4957              LDR      r1,|L1.468|
000076  f8510024          LDR      r0,[r1,r4,LSL #2]     ;105
00007a  4669              MOV      r1,sp                 ;105
00007c  f7fffffe          BL       GPIO_Init
000080  4b55              LDR      r3,|L1.472|
000082  5d1a              LDRB     r2,[r3,r4]            ;108
000084  4b55              LDR      r3,|L1.476|
000086  5d19              LDRB     r1,[r3,r4]            ;108
000088  4b50              LDR      r3,|L1.460|
00008a  f8530024          LDR      r0,[r3,r4,LSL #2]     ;108
00008e  f7fffffe          BL       GPIO_PinAFConfig
000092  4b51              LDR      r3,|L1.472|
000094  5d1a              LDRB     r2,[r3,r4]            ;109
000096  4b52              LDR      r3,|L1.480|
000098  5d19              LDRB     r1,[r3,r4]            ;109
00009a  4b4e              LDR      r3,|L1.468|
00009c  f8530024          LDR      r0,[r3,r4,LSL #2]     ;109
0000a0  f7fffffe          BL       GPIO_PinAFConfig
0000a4  494f              LDR      r1,|L1.484|
0000a6  f8510024          LDR      r0,[r1,r4,LSL #2]     ;113
0000aa  2101              MOVS     r1,#1                 ;113
0000ac  f7fffffe          BL       RCC_APB1PeriphClockCmd
0000b0  4628              MOV      r0,r5                 ;116
0000b2  f7fffffe          BL       CAN_DeInit
0000b6  4639              MOV      r1,r7                 ;119
0000b8  4628              MOV      r0,r5                 ;119
0000ba  f7fffffe          BL       CAN_Init
0000be  4630              MOV      r0,r6                 ;122
0000c0  f7fffffe          BL       CAN_FilterInit
0000c4  2201              MOVS     r2,#1                 ;126
0000c6  2103              MOVS     r1,#3                 ;126
0000c8  4628              MOV      r0,r5                 ;126
0000ca  f7fffffe          BL       CAN_ITConfig
0000ce  4a46              LDR      r2,|L1.488|
0000d0  f8521024          LDR      r1,[r2,r4,LSL #2]     ;130
0000d4  4a45              LDR      r2,|L1.492|
0000d6  f8520024          LDR      r0,[r2,r4,LSL #2]     ;130
0000da  f7fffffe          BL       BSP_IntVectSet
0000de  4943              LDR      r1,|L1.492|
0000e0  f8510024          LDR      r0,[r1,r4,LSL #2]     ;131
0000e4  f7fffffe          BL       BSP_IntEn
0000e8  bf00              NOP      
0000ea  e79a              B        |L1.34|
;;;133    
                          ENDP

                  Can1_Isr PROC
;;;143    
;;;144    void Can1_Isr(void)
0000ec  b570              PUSH     {r4-r6,lr}
;;;145    {
;;;146    	CanRxMsg 	*MsgPtr;
;;;147    	uint16_t 	i;
;;;148    	
;;;149    	if (CAN_MessagePending(CAN_1, CAN_FIFO0)){
0000ee  2100              MOVS     r1,#0
0000f0  4831              LDR      r0,|L1.440|
0000f2  f7fffffe          BL       CAN_MessagePending
0000f6  b300              CBZ      r0,|L1.314|
;;;150    		
;;;151    		i = BSP_Info.CanRxMsgIndex[0];
0000f8  483d              LDR      r0,|L1.496|
0000fa  f8b05108          LDRH     r5,[r0,#0x108]  ; BSP_Info
;;;152    		MsgPtr = BSP_Info.CanRxMsgPtr[0] + i;
0000fe  f8d000f8          LDR      r0,[r0,#0xf8]  ; BSP_Info
000102  eb050185          ADD      r1,r5,r5,LSL #2
000106  eb000481          ADD      r4,r0,r1,LSL #2
;;;153    		CAN_Receive(CAN_1, CAN_FIFO0, MsgPtr);
00010a  4622              MOV      r2,r4
00010c  f04f0100          MOV      r1,#0
000110  4829              LDR      r0,|L1.440|
000112  f7fffffe          BL       CAN_Receive
;;;154    		
;;;155    		BSP_Info.CanRxMsgIndex[0]++;
000116  4836              LDR      r0,|L1.496|
000118  f8b00108          LDRH     r0,[r0,#0x108]  ; BSP_Info
00011c  f1000001          ADD      r0,r0,#1
000120  4933              LDR      r1,|L1.496|
000122  f8a10108          STRH     r0,[r1,#0x108]
;;;156    		BSP_Info.CanRxMsgIndex[0] &= BSP_Info.CanRxMsgMask[0];		
000126  4608              MOV      r0,r1
000128  f8b00108          LDRH     r0,[r0,#0x108]  ; BSP_Info
00012c  f8b11110          LDRH     r1,[r1,#0x110]  ; BSP_Info
000130  ea000001          AND      r0,r0,r1
000134  492e              LDR      r1,|L1.496|
000136  f8a10108          STRH     r0,[r1,#0x108]
                  |L1.314|
;;;157    	}
;;;158    	
;;;159    	if (BSP_Info.CANCallBack)
00013a  482d              LDR      r0,|L1.496|
00013c  f8d0012c          LDR      r0,[r0,#0x12c]  ; BSP_Info
000140  b128              CBZ      r0,|L1.334|
;;;160    		BSP_Info.CANCallBack(0, NULL);
000142  482b              LDR      r0,|L1.496|
000144  2100              MOVS     r1,#0
000146  f8d0212c          LDR      r2,[r0,#0x12c]  ; BSP_Info
00014a  4608              MOV      r0,r1
00014c  4790              BLX      r2
                  |L1.334|
;;;161    }
00014e  bd70              POP      {r4-r6,pc}
;;;162    
                          ENDP

                  Can2_Isr PROC
;;;163    void Can2_Isr(void)
000150  b570              PUSH     {r4-r6,lr}
;;;164    {
;;;165    	CanRxMsg 	*MsgPtr;
;;;166    	uint16_t 	i;
;;;167    	
;;;168    	if (CAN_MessagePending(CAN_2, CAN_FIFO0)){
000152  2100              MOVS     r1,#0
000154  4819              LDR      r0,|L1.444|
000156  f7fffffe          BL       CAN_MessagePending
00015a  b308              CBZ      r0,|L1.416|
;;;169    		
;;;170    		i = BSP_Info.CanRxMsgIndex[1];
00015c  4824              LDR      r0,|L1.496|
00015e  f8b0510a          LDRH     r5,[r0,#0x10a]
;;;171    		MsgPtr = BSP_Info.CanRxMsgPtr[1] + i;
000162  f8d000fc          LDR      r0,[r0,#0xfc]
000166  eb050185          ADD      r1,r5,r5,LSL #2
00016a  eb000481          ADD      r4,r0,r1,LSL #2
;;;172    		CAN_Receive(CAN_2, CAN_FIFO0, MsgPtr);
00016e  4622              MOV      r2,r4
000170  f04f0100          MOV      r1,#0
000174  4811              LDR      r0,|L1.444|
000176  f7fffffe          BL       CAN_Receive
;;;173    		
;;;174    		BSP_Info.CanRxMsgIndex[1]++;
00017a  481d              LDR      r0,|L1.496|
00017c  f8b0010a          LDRH     r0,[r0,#0x10a]
000180  f1000001          ADD      r0,r0,#1
000184  b281              UXTH     r1,r0
000186  481a              LDR      r0,|L1.496|
000188  f8a0110a          STRH     r1,[r0,#0x10a]
;;;175    		BSP_Info.CanRxMsgIndex[1] &= BSP_Info.CanRxMsgMask[1];		
00018c  f8b0010a          LDRH     r0,[r0,#0x10a]
000190  4917              LDR      r1,|L1.496|
000192  f8b11112          LDRH     r1,[r1,#0x112]
000196  ea000001          AND      r0,r0,r1
00019a  4915              LDR      r1,|L1.496|
00019c  f8a1010a          STRH     r0,[r1,#0x10a]
                  |L1.416|
;;;176    	}
;;;177    	
;;;178    	if (BSP_Info.CANCallBack)
0001a0  4813              LDR      r0,|L1.496|
0001a2  f8d0012c          LDR      r0,[r0,#0x12c]  ; BSP_Info
0001a6  b128              CBZ      r0,|L1.436|
;;;179    		BSP_Info.CANCallBack(1, NULL);
0001a8  4811              LDR      r0,|L1.496|
0001aa  2100              MOVS     r1,#0
0001ac  f8d0212c          LDR      r2,[r0,#0x12c]  ; BSP_Info
0001b0  2001              MOVS     r0,#1
0001b2  4790              BLX      r2
                  |L1.436|
;;;180    }
0001b4  bd70              POP      {r4-r6,pc}
;;;181    
                          ENDP

0001b6  0000              DCW      0x0000
                  |L1.440|
                          DCD      0x40006400
                  |L1.444|
                          DCD      0x40006800
                  |L1.448|
                          DCD      CAN_TX_PORT_CLK
                  |L1.452|
                          DCD      CAN_RX_PORT_CLK
                  |L1.456|
                          DCD      CAN_RX_PIN
                  |L1.460|
                          DCD      CAN_RX_PORT
                  |L1.464|
                          DCD      CAN_TX_PIN
                  |L1.468|
                          DCD      CAN_TX_PORT
                  |L1.472|
                          DCD      CAN_AF_PORT
                  |L1.476|
                          DCD      CAN_RX_SOURCE
                  |L1.480|
                          DCD      CAN_TX_SOURCE
                  |L1.484|
                          DCD      CAN_CLK
                  |L1.488|
                          DCD      CanIsr
                  |L1.492|
                          DCD      CanIntID
                  |L1.496|
                          DCD      BSP_Info

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CAN_CLK
                          DCD      0x02000000
                          DCD      0x06000000
                  CAN_TX_PORT_CLK
                          DCD      0x00000001
                          DCD      0x00000002
                  CAN_RX_PORT_CLK
                          DCD      0x00000001
                          DCD      0x00000002
                  CAN_TX_PIN
000018  10002000          DCW      0x1000,0x2000
                  CAN_RX_PIN
00001c  08001000          DCW      0x0800,0x1000
                  CAN_TX_SOURCE
000020  0c0d              DCB      0x0c,0x0d
                  CAN_RX_SOURCE
000022  0b0c              DCB      0x0b,0x0c
                  CAN_AF_PORT
000024  09090000          DCB      0x09,0x09,0x00,0x00
                  CanIntID
                          DCD      0x00000013
                          DCD      0x0000003f

                          AREA ||.data||, DATA, ALIGN=2

                  CAN_TX_PORT
                          DCD      0x40020000
                          DCD      0x40020400
                  CAN_RX_PORT
                          DCD      0x40020000
                          DCD      0x40020400
                  CanIsr
                          DCD      Can1_Isr
                          DCD      Can2_Isr

;*** Start embedded assembler ***

#line 1 "..\\BSP\\bsp_can.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_can_c_1647eb23____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___9_bsp_can_c_1647eb23____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_can_c_1647eb23____REVSH|
#line 130
|__asm___9_bsp_can_c_1647eb23____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
