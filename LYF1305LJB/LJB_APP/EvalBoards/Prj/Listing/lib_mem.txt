; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\lib_mem.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\lib_mem.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\lib_mem.crf ..\..\uC-LIB\lib_mem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  Mem_Init PROC
;;;164    
;;;165    void  Mem_Init (void)
000000  4770              BX       lr
;;;166    {
;;;167    #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;168        MEM_POOL  *pmem_pool;
;;;169    
;;;170                                                                            /* --------- INIT MEM HEAP SEG / POOL --------- */
;;;171        pmem_pool                   = (MEM_POOL   *)&Mem_PoolHeap;
;;;172        pmem_pool->Type             = (LIB_MEM_TYPE) LIB_MEM_TYPE_HEAP;
;;;173        pmem_pool->SegHeadPtr       = (MEM_POOL   *)&Mem_PoolHeap;          /* Heap seg head = heap seg.                    */
;;;174        pmem_pool->SegPrevPtr       = (MEM_POOL   *) 0;
;;;175        pmem_pool->SegNextPtr       = (MEM_POOL   *) 0;
;;;176        pmem_pool->PoolPrevPtr      = (MEM_POOL   *) 0;
;;;177        pmem_pool->PoolNextPtr      = (MEM_POOL   *) 0;
;;;178        pmem_pool->PoolAddrStart    = (void       *) 0;
;;;179        pmem_pool->PoolAddrEnd      = (void       *) 0;
;;;180        pmem_pool->PoolPtrs         = (void      **) 0;
;;;181        pmem_pool->BlkSize          = (CPU_SIZE_T  ) 0u;
;;;182        pmem_pool->BlkNbr           = (CPU_SIZE_T  ) 0u;
;;;183        pmem_pool->BlkIx            = (MEM_POOL_IX ) 0u;
;;;184    
;;;185    #ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
;;;186        pmem_pool->SegAddr          = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
;;;187        pmem_pool->SegAddrNextAvail = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
;;;188    #else
;;;189        pmem_pool->SegAddr          = (void       *)&Mem_Heap[0];
;;;190        pmem_pool->SegAddrNextAvail = (void       *)&Mem_Heap[0];
;;;191    #endif
;;;192    
;;;193        pmem_pool->SegSizeTot       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
;;;194        pmem_pool->SegSizeRem       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
;;;195    
;;;196                                                                            /* ------------ INIT MEM POOL TBL ------------- */
;;;197        Mem_PoolTbl = &Mem_PoolHeap;
;;;198    #endif
;;;199    }
;;;200    
                          ENDP

                  Mem_Set PROC
;;;268    
;;;269    void  Mem_Set (void        *pmem,
000002  e92d41f0          PUSH     {r4-r8,lr}
;;;270                   CPU_INT08U   data_val,
;;;271                   CPU_SIZE_T   size)
;;;272    {
000006  4603              MOV      r3,r0
000008  460c              MOV      r4,r1
00000a  4617              MOV      r7,r2
;;;273        CPU_SIZE_T   size_rem;
;;;274        CPU_ALIGN    data_align;
;;;275        CPU_ALIGN   *pmem_align;
;;;276        CPU_INT08U  *pmem_08;
;;;277        CPU_DATA     mem_align_mod;
;;;278        CPU_DATA     i;
;;;279    
;;;280    
;;;281    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;282        if (size < 1) {                                             /* See Note #1.                                         */
00000c  b90f              CBNZ     r7,|L1.18|
                  |L1.14|
;;;283            return;
;;;284        }
;;;285        if (pmem == (void *)0) {
;;;286            return;
;;;287        }
;;;288    #endif
;;;289    
;;;290    
;;;291        data_align = 0u;
;;;292        for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
;;;293            data_align <<=  DEF_OCTET_NBR_BITS;
;;;294            data_align  |= (CPU_ALIGN)data_val;
;;;295        }
;;;296    
;;;297        size_rem      =  size;
;;;298        mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
;;;299    
;;;300        pmem_08 = (CPU_INT08U *)pmem;
;;;301        if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
;;;302            i = mem_align_mod;
;;;303            while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
;;;304                   (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
;;;305               *pmem_08++ = data_val;
;;;306                size_rem -= sizeof(CPU_INT08U);
;;;307                i++;
;;;308            }
;;;309        }
;;;310    
;;;311        pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
;;;312        while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
;;;313           *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
;;;314            size_rem    -= sizeof(CPU_ALIGN);
;;;315        }
;;;316    
;;;317        pmem_08 = (CPU_INT08U *)pmem_align;
;;;318        while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
;;;319           *pmem_08++   = data_val;
;;;320            size_rem   -= sizeof(CPU_INT08U);
;;;321        }
;;;322    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.18|
000012  b903              CBNZ     r3,|L1.22|
000014  e7fb              B        |L1.14|
                  |L1.22|
000016  f04f0500          MOV      r5,#0                 ;291
00001a  462a              MOV      r2,r5                 ;292
00001c  e005              B        |L1.42|
                  |L1.30|
00001e  ea4f2505          LSL      r5,r5,#8              ;293
000022  ea450504          ORR      r5,r5,r4              ;294
000026  f1020201          ADD      r2,r2,#1              ;292
                  |L1.42|
00002a  2a04              CMP      r2,#4                 ;292
00002c  d3f7              BCC      |L1.30|
00002e  4638              MOV      r0,r7                 ;297
000030  f0030c03          AND      r12,r3,#3             ;298
000034  4619              MOV      r1,r3                 ;300
000036  f1bc0f00          CMP      r12,#0                ;301
00003a  d00a              BEQ      |L1.82|
00003c  4662              MOV      r2,r12                ;302
00003e  e005              B        |L1.76|
                  |L1.64|
000040  f8014b01          STRB     r4,[r1],#1            ;305
000044  f1a00001          SUB      r0,r0,#1              ;306
000048  f1020201          ADD      r2,r2,#1              ;307
                  |L1.76|
00004c  b108              CBZ      r0,|L1.82|
00004e  2a04              CMP      r2,#4                 ;304
000050  d3f6              BCC      |L1.64|
                  |L1.82|
000052  460e              MOV      r6,r1                 ;311
000054  e002              B        |L1.92|
                  |L1.86|
000056  c620              STM      r6!,{r5}              ;313
000058  f1a00004          SUB      r0,r0,#4              ;314
                  |L1.92|
00005c  2804              CMP      r0,#4                 ;312
00005e  d2fa              BCS      |L1.86|
000060  4631              MOV      r1,r6                 ;317
000062  e003              B        |L1.108|
                  |L1.100|
000064  f8014b01          STRB     r4,[r1],#1            ;319
000068  f1a00001          SUB      r0,r0,#1              ;320
                  |L1.108|
00006c  2800              CMP      r0,#0                 ;318
00006e  d1f9              BNE      |L1.100|
000070  bf00              NOP      
000072  e7cc              B        |L1.14|
;;;323    
                          ENDP

                  Mem_Clr PROC
;;;224    
;;;225    void  Mem_Clr (void        *pmem,
000074  b530              PUSH     {r4,r5,lr}
;;;226                   CPU_SIZE_T   size)
;;;227    {
000076  4605              MOV      r5,r0
000078  460c              MOV      r4,r1
;;;228        Mem_Set(pmem,
00007a  4622              MOV      r2,r4
00007c  f04f0100          MOV      r1,#0
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       Mem_Set
;;;229                0u,                                                 /* See Note #2.                                         */
;;;230                size);
;;;231    }
000086  bd30              POP      {r4,r5,pc}
;;;232    
                          ENDP

                  Mem_Move PROC
;;;493    
;;;494    void  Mem_Move (       void        *pdest,
000088  e92d4ff0          PUSH     {r4-r11,lr}
;;;495                    const  void        *psrc,
;;;496                           CPU_SIZE_T   size)
;;;497    {
00008c  b085              SUB      sp,sp,#0x14
00008e  4607              MOV      r7,r0
000090  4688              MOV      r8,r1
000092  4691              MOV      r9,r2
;;;498               CPU_SIZE_T    size_rem;
;;;499               CPU_SIZE_T    mem_gap_octets;
;;;500               CPU_ALIGN    *pmem_align_dest;
;;;501        const  CPU_ALIGN    *pmem_align_src;
;;;502               CPU_INT08U   *pmem_08_dest;
;;;503        const  CPU_INT08U   *pmem_08_src;
;;;504               CPU_INT08S    i;
;;;505               CPU_DATA      mem_align_mod_dest;
;;;506               CPU_DATA      mem_align_mod_src;
;;;507               CPU_BOOLEAN   mem_aligned;
;;;508    
;;;509    
;;;510    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;511        if (size < 1) {
000094  f1b90f00          CMP      r9,#0
000098  d102              BNE      |L1.160|
                  |L1.154|
;;;512            return;
;;;513        }
;;;514        if (pdest == (void *)0) {
;;;515            return;
;;;516        }
;;;517        if (psrc  == (void *)0) {
;;;518            return;
;;;519        }
;;;520    #endif
;;;521    
;;;522        pmem_08_src  = (const CPU_INT08U *)psrc;
;;;523        pmem_08_dest = (      CPU_INT08U *)pdest;
;;;524        if (pmem_08_src > pmem_08_dest) {
;;;525            Mem_Copy(pdest, psrc, size);
;;;526            return;
;;;527        }
;;;528    
;;;529        size_rem           =  size;
;;;530    
;;;531        pmem_08_dest       = (      CPU_INT08U *)pdest + size - 1;
;;;532        pmem_08_src        = (const CPU_INT08U *)psrc  + size - 1;
;;;533        
;;;534        mem_gap_octets     = pmem_08_dest - pmem_08_src;
;;;535        
;;;536    
;;;537        if (mem_gap_octets >= sizeof(CPU_ALIGN)) {                  /* Avoid bufs overlap.                                  */
;;;538        
;;;539                                                                    /* See Note #4.                                         */
;;;540            mem_align_mod_dest = (CPU_INT08U)((CPU_ADDR)pmem_08_dest % sizeof(CPU_ALIGN));
;;;541            mem_align_mod_src  = (CPU_INT08U)((CPU_ADDR)pmem_08_src  % sizeof(CPU_ALIGN));
;;;542    
;;;543            mem_aligned        = (mem_align_mod_dest == mem_align_mod_src) ? DEF_YES : DEF_NO;
;;;544    
;;;545            if (mem_aligned == DEF_YES) {                           /* If mem bufs' alignment offset equal, ...             */
;;;546                                                                    /* ... optimize copy for mem buf alignment.             */
;;;547                if (mem_align_mod_dest != (sizeof(CPU_ALIGN) - 1)) {/* If leading octets avail,                   ...       */
;;;548                    i = mem_align_mod_dest;
;;;549                    while ((size_rem   >  0) &&                     /* ... start mem buf copy with leading octets ...       */
;;;550                           (i          >= 0)) {                     /* ... until next CPU_ALIGN word boundary.              */
;;;551                       *pmem_08_dest-- = *pmem_08_src--;
;;;552                        size_rem      -=  sizeof(CPU_INT08U);
;;;553                        i--;
;;;554                    }
;;;555                }
;;;556    
;;;557                                                                    /* See Note #3a.                                        */
;;;558                pmem_align_dest = (      CPU_ALIGN *)((CPU_INT08U *)pmem_08_dest - sizeof(CPU_ALIGN) + 1);
;;;559                pmem_align_src  = (const CPU_ALIGN *)((CPU_INT08U *)pmem_08_src  - sizeof(CPU_ALIGN) + 1);
;;;560                while (size_rem      >=  sizeof(CPU_ALIGN)) {       /* While mem bufs aligned on CPU_ALIGN word boundaries, */
;;;561                   *pmem_align_dest-- = *pmem_align_src--;          /* ... copy psrc to pdest with CPU_ALIGN-sized words.   */
;;;562                    size_rem         -=  sizeof(CPU_ALIGN);
;;;563                }
;;;564    
;;;565                pmem_08_dest = (      CPU_INT08U *)pmem_align_dest + sizeof(CPU_ALIGN) - 1;
;;;566                pmem_08_src  = (const CPU_INT08U *)pmem_align_src  + sizeof(CPU_ALIGN) - 1;
;;;567    
;;;568            }
;;;569        }
;;;570    
;;;571        while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
;;;572           *pmem_08_dest-- = *pmem_08_src--;                        /* ... copy psrc to pdest by octets.                    */
;;;573            size_rem      -=  sizeof(CPU_INT08U);
;;;574        }
;;;575    }
00009a  b005              ADD      sp,sp,#0x14
00009c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.160|
0000a0  b907              CBNZ     r7,|L1.164|
0000a2  e7fa              B        |L1.154|
                  |L1.164|
0000a4  f1b80f00          CMP      r8,#0                 ;517
0000a8  d100              BNE      |L1.172|
0000aa  e7f6              B        |L1.154|
                  |L1.172|
0000ac  4646              MOV      r6,r8                 ;522
0000ae  463d              MOV      r5,r7                 ;523
0000b0  42ae              CMP      r6,r5                 ;524
0000b2  d905              BLS      |L1.192|
0000b4  464a              MOV      r2,r9                 ;525
0000b6  4641              MOV      r1,r8                 ;525
0000b8  4638              MOV      r0,r7                 ;525
0000ba  f7fffffe          BL       Mem_Copy
0000be  e7ec              B        |L1.154|
                  |L1.192|
0000c0  464c              MOV      r4,r9                 ;529
0000c2  eb070004          ADD      r0,r7,r4              ;531
0000c6  f1a00501          SUB      r5,r0,#1              ;531
0000ca  eb080004          ADD      r0,r8,r4              ;532
0000ce  f1a00601          SUB      r6,r0,#1              ;532
0000d2  eba50006          SUB      r0,r5,r6              ;534
0000d6  9004              STR      r0,[sp,#0x10]         ;534
0000d8  9804              LDR      r0,[sp,#0x10]         ;537
0000da  2804              CMP      r0,#4                 ;537
0000dc  d339              BCC      |L1.338|
0000de  f0050003          AND      r0,r5,#3              ;540
0000e2  9002              STR      r0,[sp,#8]            ;540
0000e4  f0060103          AND      r1,r6,#3              ;541
0000e8  9101              STR      r1,[sp,#4]            ;541
0000ea  e9dd1001          LDRD     r1,r0,[sp,#4]         ;543
0000ee  4288              CMP      r0,r1                 ;543
0000f0  d102              BNE      |L1.248|
0000f2  f04f0001          MOV      r0,#1                 ;543
0000f6  e001              B        |L1.252|
                  |L1.248|
0000f8  f04f0000          MOV      r0,#0                 ;543
                  |L1.252|
0000fc  9000              STR      r0,[sp,#0]            ;543
0000fe  9800              LDR      r0,[sp,#0]            ;545
000100  2801              CMP      r0,#1                 ;545
000102  d126              BNE      |L1.338|
000104  9802              LDR      r0,[sp,#8]            ;547
000106  2803              CMP      r0,#3                 ;547
000108  d012              BEQ      |L1.304|
00010a  9802              LDR      r0,[sp,#8]            ;548
00010c  b240              SXTB     r0,r0                 ;548
00010e  9003              STR      r0,[sp,#0xc]          ;548
000110  e00a              B        |L1.296|
                  |L1.274|
000112  f8160901          LDRB     r0,[r6],#-1           ;551
000116  f8050901          STRB     r0,[r5],#-1           ;551
00011a  f1a40401          SUB      r4,r4,#1              ;552
00011e  9803              LDR      r0,[sp,#0xc]          ;553
000120  f1a00001          SUB      r0,r0,#1              ;553
000124  b240              SXTB     r0,r0                 ;553
000126  9003              STR      r0,[sp,#0xc]          ;553
                  |L1.296|
000128  b114              CBZ      r4,|L1.304|
00012a  9803              LDR      r0,[sp,#0xc]          ;550
00012c  2800              CMP      r0,#0                 ;550
00012e  daf0              BGE      |L1.274|
                  |L1.304|
000130  f1a50a03          SUB      r10,r5,#3             ;558
000134  f1a60b03          SUB      r11,r6,#3             ;559
000138  e005              B        |L1.326|
                  |L1.314|
00013a  f85b0904          LDR      r0,[r11],#-4          ;561
00013e  f84a0904          STR      r0,[r10],#-4          ;561
000142  f1a40404          SUB      r4,r4,#4              ;562
                  |L1.326|
000146  2c04              CMP      r4,#4                 ;560
000148  d2f7              BCS      |L1.314|
00014a  f10a0503          ADD      r5,r10,#3             ;565
00014e  f10b0603          ADD      r6,r11,#3             ;566
                  |L1.338|
000152  e005              B        |L1.352|
                  |L1.340|
000154  f8160901          LDRB     r0,[r6],#-1           ;572
000158  f8050901          STRB     r0,[r5],#-1           ;572
00015c  f1a40401          SUB      r4,r4,#1              ;573
                  |L1.352|
000160  2c00              CMP      r4,#0                 ;571
000162  d1f7              BNE      |L1.340|
000164  bf00              NOP      
000166  e798              B        |L1.154|
;;;576    
                          ENDP

                  Mem_Cmp PROC
;;;620    /*$PAGE*/
;;;621    CPU_BOOLEAN  Mem_Cmp (const  void        *p1_mem,
000168  e92d4ff8          PUSH     {r3-r11,lr}
;;;622                          const  void        *p2_mem,
;;;623                                 CPU_SIZE_T   size)
;;;624    {
00016c  4680              MOV      r8,r0
00016e  4689              MOV      r9,r1
000170  4615              MOV      r5,r2
;;;625               CPU_SIZE_T    size_rem;
;;;626               CPU_ALIGN    *p1_mem_align;
;;;627               CPU_ALIGN    *p2_mem_align;
;;;628        const  CPU_INT08U   *p1_mem_08;
;;;629        const  CPU_INT08U   *p2_mem_08;
;;;630               CPU_DATA      i;
;;;631               CPU_DATA      mem_align_mod_1;
;;;632               CPU_DATA      mem_align_mod_2;
;;;633               CPU_BOOLEAN   mem_aligned;
;;;634               CPU_BOOLEAN   mem_cmp;
;;;635    
;;;636    
;;;637        if (size < 1) {                                             /* See Note #1.                                         */
000172  b915              CBNZ     r5,|L1.378|
;;;638            return (DEF_YES);
000174  2001              MOVS     r0,#1
                  |L1.374|
;;;639        }
;;;640        if (p1_mem == (void *)0) {
;;;641            return (DEF_NO);
;;;642        }
;;;643        if (p2_mem == (void *)0) {
;;;644            return (DEF_NO);
;;;645        }
;;;646    
;;;647    
;;;648        mem_cmp         =  DEF_YES;                                 /* Assume mem bufs are identical until cmp fails.       */
;;;649        size_rem        =  size;
;;;650                                                                    /* Start @ end of mem bufs (see Note #2).               */
;;;651        p1_mem_08       = (const CPU_INT08U *)p1_mem + size;
;;;652        p2_mem_08       = (const CPU_INT08U *)p2_mem + size;
;;;653                                                                    /* See Note #4.                                         */
;;;654        mem_align_mod_1 = (CPU_INT08U)((CPU_ADDR)p1_mem_08 % sizeof(CPU_ALIGN));
;;;655        mem_align_mod_2 = (CPU_INT08U)((CPU_ADDR)p2_mem_08 % sizeof(CPU_ALIGN));
;;;656    
;;;657        mem_aligned     = (mem_align_mod_1 == mem_align_mod_2) ? DEF_YES : DEF_NO;
;;;658    
;;;659        if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
;;;660                                                                    /* ... optimize cmp for mem buf alignment.              */
;;;661            if (mem_align_mod_1 != 0u) {                            /* If trailing octets avail,                  ...       */
;;;662                i = mem_align_mod_1;
;;;663                while ((mem_cmp == DEF_YES) &&                      /* ... cmp mem bufs while identical &         ...       */
;;;664                       (size_rem > 0)       &&                      /* ... start mem buf cmp with trailing octets ...       */
;;;665                       (i        > 0)) {                            /* ... until next CPU_ALIGN word boundary.              */
;;;666                    p1_mem_08--;
;;;667                    p2_mem_08--;
;;;668                    if (*p1_mem_08 != *p2_mem_08) {                 /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;669                         mem_cmp = DEF_NO;
;;;670                    }
;;;671                    size_rem -= sizeof(CPU_INT08U);
;;;672                    i--;
;;;673                }
;;;674            }
;;;675    
;;;676            if (mem_cmp == DEF_YES) {                               /* If cmp still identical, cmp aligned mem bufs.        */
;;;677                p1_mem_align = (CPU_ALIGN *)p1_mem_08;              /* See Note #3a.                                        */
;;;678                p2_mem_align = (CPU_ALIGN *)p2_mem_08;
;;;679    
;;;680                while ((mem_cmp  == DEF_YES) &&                     /* Cmp mem bufs while identical & ...                   */
;;;681                       (size_rem >= sizeof(CPU_ALIGN))) {           /* ... mem bufs aligned on CPU_ALIGN word boundaries.   */
;;;682                    p1_mem_align--;
;;;683                    p2_mem_align--;
;;;684                    if (*p1_mem_align != *p2_mem_align) {           /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;685                         mem_cmp = DEF_NO;
;;;686                    }
;;;687                    size_rem -= sizeof(CPU_ALIGN);
;;;688                }
;;;689    
;;;690                p1_mem_08 = (CPU_INT08U *)p1_mem_align;
;;;691                p2_mem_08 = (CPU_INT08U *)p2_mem_align;
;;;692            }
;;;693        }
;;;694    
;;;695        while ((mem_cmp == DEF_YES) &&                              /* Cmp mem bufs while identical ...                     */
;;;696               (size_rem > 0)) {                                    /* ... for unaligned mem bufs or trailing octets.       */
;;;697            p1_mem_08--;
;;;698            p2_mem_08--;
;;;699            if (*p1_mem_08 != *p2_mem_08) {                         /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;700                 mem_cmp = DEF_NO;
;;;701            }
;;;702            size_rem -= sizeof(CPU_INT08U);
;;;703        }
;;;704    
;;;705        return (mem_cmp);
;;;706    }
000176  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.378|
00017a  f1b80f00          CMP      r8,#0                 ;640
00017e  d101              BNE      |L1.388|
000180  2000              MOVS     r0,#0                 ;641
000182  e7f8              B        |L1.374|
                  |L1.388|
000184  f1b90f00          CMP      r9,#0                 ;643
000188  d101              BNE      |L1.398|
00018a  2000              MOVS     r0,#0                 ;644
00018c  e7f3              B        |L1.374|
                  |L1.398|
00018e  f04f0401          MOV      r4,#1                 ;648
000192  4629              MOV      r1,r5                 ;649
000194  eb080205          ADD      r2,r8,r5              ;651
000198  eb090305          ADD      r3,r9,r5              ;652
00019c  f0020c03          AND      r12,r2,#3             ;654
0001a0  f0030b03          AND      r11,r3,#3             ;655
0001a4  45dc              CMP      r12,r11               ;657
0001a6  d101              BNE      |L1.428|
0001a8  4620              MOV      r0,r4                 ;657
0001aa  e001              B        |L1.432|
                  |L1.428|
0001ac  f04f0000          MOV      r0,#0                 ;657
                  |L1.432|
0001b0  9000              STR      r0,[sp,#0]            ;657
0001b2  9800              LDR      r0,[sp,#0]            ;659
0001b4  2801              CMP      r0,#1                 ;659
0001b6  d131              BNE      |L1.540|
0001b8  f1bc0f00          CMP      r12,#0                ;661
0001bc  d016              BEQ      |L1.492|
0001be  46e2              MOV      r10,r12               ;662
0001c0  e00e              B        |L1.480|
                  |L1.450|
0001c2  f1a20201          SUB      r2,r2,#1              ;666
0001c6  f1a30301          SUB      r3,r3,#1              ;667
0001ca  7810              LDRB     r0,[r2,#0]            ;668
0001cc  f893e000          LDRB     lr,[r3,#0]            ;668
0001d0  4570              CMP      r0,lr                 ;668
0001d2  d001              BEQ      |L1.472|
0001d4  f04f0400          MOV      r4,#0                 ;669
                  |L1.472|
0001d8  f1a10101          SUB      r1,r1,#1              ;671
0001dc  f1aa0a01          SUB      r10,r10,#1            ;672
                  |L1.480|
0001e0  2c01              CMP      r4,#1                 ;663
0001e2  d103              BNE      |L1.492|
0001e4  b111              CBZ      r1,|L1.492|
0001e6  f1ba0f00          CMP      r10,#0                ;665
0001ea  d1ea              BNE      |L1.450|
                  |L1.492|
0001ec  2c01              CMP      r4,#1                 ;676
0001ee  d115              BNE      |L1.540|
0001f0  4616              MOV      r6,r2                 ;677
0001f2  461f              MOV      r7,r3                 ;678
0001f4  e00c              B        |L1.528|
                  |L1.502|
0001f6  f1a60604          SUB      r6,r6,#4              ;682
0001fa  f1a70704          SUB      r7,r7,#4              ;683
0001fe  6830              LDR      r0,[r6,#0]            ;684
000200  f8d7e000          LDR      lr,[r7,#0]            ;684
000204  4570              CMP      r0,lr                 ;684
000206  d001              BEQ      |L1.524|
000208  f04f0400          MOV      r4,#0                 ;685
                  |L1.524|
00020c  f1a10104          SUB      r1,r1,#4              ;687
                  |L1.528|
000210  2c01              CMP      r4,#1                 ;680
000212  d101              BNE      |L1.536|
000214  2904              CMP      r1,#4                 ;681
000216  d2ee              BCS      |L1.502|
                  |L1.536|
000218  4632              MOV      r2,r6                 ;690
00021a  463b              MOV      r3,r7                 ;691
                  |L1.540|
00021c  e00c              B        |L1.568|
                  |L1.542|
00021e  f1a20201          SUB      r2,r2,#1              ;697
000222  f1a30301          SUB      r3,r3,#1              ;698
000226  7810              LDRB     r0,[r2,#0]            ;699
000228  f893e000          LDRB     lr,[r3,#0]            ;699
00022c  4570              CMP      r0,lr                 ;699
00022e  d001              BEQ      |L1.564|
000230  f04f0400          MOV      r4,#0                 ;700
                  |L1.564|
000234  f1a10101          SUB      r1,r1,#1              ;702
                  |L1.568|
000238  2c01              CMP      r4,#1                 ;695
00023a  d101              BNE      |L1.576|
00023c  2900              CMP      r1,#0                 ;696
00023e  d1ee              BNE      |L1.542|
                  |L1.576|
000240  4620              MOV      r0,r4                 ;705
000242  e798              B        |L1.374|
;;;707    
                          ENDP

