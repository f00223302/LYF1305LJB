; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\system_stm32f2xx.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\system_stm32f2xx.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\system_stm32f2xx.crf ..\BSP\CMSIS\Device_Support\system_stm32f2xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;331      */
;;;332    static void SetSysClock(void)
000000  f04f0100          MOV      r1,#0
;;;333    {
;;;334    /******************************************************************************/
;;;335    /*            PLL (clocked by HSE) used as System clock source                */
;;;336    /******************************************************************************/
;;;337      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000004  4608              MOV      r0,r1
;;;338      
;;;339      /* Enable HSE */
;;;340      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000006  4a67              LDR      r2,|L1.420|
000008  6812              LDR      r2,[r2,#0]
00000a  f4423280          ORR      r2,r2,#0x10000
00000e  4b65              LDR      r3,|L1.420|
000010  601a              STR      r2,[r3,#0]
;;;341     
;;;342      /* Wait till HSE is ready and if Time out is reached exit */
;;;343      do
000012  bf00              NOP      
                  |L1.20|
;;;344      {
;;;345        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000014  4a63              LDR      r2,|L1.420|
000016  6812              LDR      r2,[r2,#0]
000018  f4023000          AND      r0,r2,#0x20000
;;;346        StartUpCounter++;
00001c  f1010101          ADD      r1,r1,#1
;;;347      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000020  b910              CBNZ     r0,|L1.40|
000022  f5b16fa0          CMP      r1,#0x500
000026  d1f5              BNE      |L1.20|
                  |L1.40|
;;;348    
;;;349      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000028  4a5e              LDR      r2,|L1.420|
00002a  6812              LDR      r2,[r2,#0]
00002c  f4123f00          TST      r2,#0x20000
000030  d002              BEQ      |L1.56|
;;;350      {
;;;351        HSEStatus = (uint32_t)0x01;
000032  f04f0001          MOV      r0,#1
000036  e001              B        |L1.60|
                  |L1.56|
;;;352      }
;;;353      else
;;;354      {
;;;355        HSEStatus = (uint32_t)0x00;
000038  f04f0000          MOV      r0,#0
                  |L1.60|
;;;356      }
;;;357    
;;;358      if (HSEStatus == (uint32_t)0x01)
00003c  2801              CMP      r0,#1
00003e  d133              BNE      |L1.168|
;;;359      {
;;;360        /* HCLK = SYSCLK / 1*/
;;;361        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000040  4a59              LDR      r2,|L1.424|
000042  6812              LDR      r2,[r2,#0]
000044  4b58              LDR      r3,|L1.424|
000046  601a              STR      r2,[r3,#0]
;;;362          
;;;363        /* PCLK2 = HCLK / 2*/
;;;364        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000048  461a              MOV      r2,r3
00004a  6812              LDR      r2,[r2,#0]
00004c  f4424200          ORR      r2,r2,#0x8000
000050  601a              STR      r2,[r3,#0]
;;;365        
;;;366        /* PCLK1 = HCLK / 4*/
;;;367        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
000052  461a              MOV      r2,r3
000054  6812              LDR      r2,[r2,#0]
000056  f44252a0          ORR      r2,r2,#0x1400
00005a  601a              STR      r2,[r3,#0]
;;;368    
;;;369        /* Configure the main PLL */
;;;370        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
00005c  4a53              LDR      r2,|L1.428|
00005e  f1a30304          SUB      r3,r3,#4
000062  601a              STR      r2,[r3,#0]
;;;371                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;372    
;;;373        /* Enable the main PLL */
;;;374        RCC->CR |= RCC_CR_PLLON;
000064  4a4f              LDR      r2,|L1.420|
000066  6812              LDR      r2,[r2,#0]
000068  f0427280          ORR      r2,r2,#0x1000000
00006c  4b4d              LDR      r3,|L1.420|
00006e  601a              STR      r2,[r3,#0]
;;;375    
;;;376        /* Wait till the main PLL is ready */
;;;377        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000070  bf00              NOP      
                  |L1.114|
000072  4a4c              LDR      r2,|L1.420|
000074  6812              LDR      r2,[r2,#0]
000076  f0127f00          TST      r2,#0x2000000
00007a  d0fa              BEQ      |L1.114|
;;;378        {
;;;379        }
;;;380       
;;;381        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;382        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS; // 原来为 FLASH_ACR_LATENCY_7WS   根据张工的要求降频 120M->60M
00007c  f2407203          MOV      r2,#0x703
000080  4b4b              LDR      r3,|L1.432|
000082  601a              STR      r2,[r3,#0]
;;;383    
;;;384        /* Select the main PLL as system clock source */
;;;385        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000084  4a48              LDR      r2,|L1.424|
000086  6812              LDR      r2,[r2,#0]
000088  f0220203          BIC      r2,r2,#3
00008c  4b46              LDR      r3,|L1.424|
00008e  601a              STR      r2,[r3,#0]
;;;386        RCC->CFGR |= RCC_CFGR_SW_PLL;
000090  461a              MOV      r2,r3
000092  6812              LDR      r2,[r2,#0]
000094  f0420202          ORR      r2,r2,#2
000098  601a              STR      r2,[r3,#0]
;;;387    
;;;388        /* Wait till the main PLL is used as system clock source */
;;;389        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
00009a  bf00              NOP      
                  |L1.156|
00009c  4a42              LDR      r2,|L1.424|
00009e  6812              LDR      r2,[r2,#0]
0000a0  f002020c          AND      r2,r2,#0xc
0000a4  2a08              CMP      r2,#8
0000a6  d1f9              BNE      |L1.156|
                  |L1.168|
;;;390        {
;;;391        }
;;;392      }
;;;393      else
;;;394      { /* If HSE fails to start-up, the application will have wrong clock
;;;395             configuration. User can add here some code to deal with this error */
;;;396      }
;;;397    
;;;398    }
0000a8  4770              BX       lr
;;;399    
                          ENDP

                  SystemInit PROC
;;;202      */
;;;203    void SystemInit(void)
0000aa  b510              PUSH     {r4,lr}
;;;204    { 
;;;205      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;206      /* Set HSION bit */
;;;207      RCC->CR |= (uint32_t)0x00000001;
0000ac  483d              LDR      r0,|L1.420|
0000ae  6800              LDR      r0,[r0,#0]
0000b0  f0400001          ORR      r0,r0,#1
0000b4  493b              LDR      r1,|L1.420|
0000b6  6008              STR      r0,[r1,#0]
;;;208    
;;;209      /* Reset CFGR register */
;;;210      RCC->CFGR = 0x00000000;
0000b8  f04f0000          MOV      r0,#0
0000bc  493a              LDR      r1,|L1.424|
0000be  6008              STR      r0,[r1,#0]
;;;211    
;;;212      /* Reset HSEON, CSSON and PLLON bits */
;;;213      RCC->CR &= (uint32_t)0xFEF6FFFF;
0000c0  4838              LDR      r0,|L1.420|
0000c2  6800              LDR      r0,[r0,#0]
0000c4  493b              LDR      r1,|L1.436|
0000c6  ea000001          AND      r0,r0,r1
0000ca  4936              LDR      r1,|L1.420|
0000cc  6008              STR      r0,[r1,#0]
;;;214    
;;;215      /* Reset PLLCFGR register */
;;;216      RCC->PLLCFGR = 0x24003010;
0000ce  483a              LDR      r0,|L1.440|
0000d0  f1010104          ADD      r1,r1,#4
0000d4  6008              STR      r0,[r1,#0]
;;;217    
;;;218      /* Reset HSEBYP bit */
;;;219      RCC->CR &= (uint32_t)0xFFFBFFFF;
0000d6  4833              LDR      r0,|L1.420|
0000d8  6800              LDR      r0,[r0,#0]
0000da  f4202080          BIC      r0,r0,#0x40000
0000de  4931              LDR      r1,|L1.420|
0000e0  6008              STR      r0,[r1,#0]
;;;220    
;;;221      /* Disable all interrupts */
;;;222      RCC->CIR = 0x00000000;
0000e2  f04f0000          MOV      r0,#0
0000e6  4935              LDR      r1,|L1.444|
0000e8  6008              STR      r0,[r1,#0]
;;;223    
;;;224    #ifdef DATA_IN_ExtSRAM
;;;225      SystemInit_ExtMemCtl(); 
;;;226    #endif /* DATA_IN_ExtSRAM */
;;;227             
;;;228      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;229         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;230      SetSysClock();
0000ea  f7fffffe          BL       SetSysClock
;;;231    
;;;232      /* Configure the Vector Table location add offset address ------------------*/
;;;233    #ifdef VECT_TAB_SRAM
;;;234      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;235    #else
;;;236      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
0000ee  4834              LDR      r0,|L1.448|
0000f0  4934              LDR      r1,|L1.452|
0000f2  6008              STR      r0,[r1,#0]
;;;237    #endif
;;;238    }
0000f4  bd10              POP      {r4,pc}
;;;239    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;275      */
;;;276    void SystemCoreClockUpdate(void)
0000f6  b570              PUSH     {r4-r6,lr}
;;;277    {
;;;278      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
0000f8  f04f0000          MOV      r0,#0
0000fc  4602              MOV      r2,r0
0000fe  f04f0302          MOV      r3,#2
000102  4604              MOV      r4,r0
000104  f04f0102          MOV      r1,#2
;;;279      
;;;280      /* Get SYSCLK source -------------------------------------------------------*/
;;;281      tmp = RCC->CFGR & RCC_CFGR_SWS;
000108  4d27              LDR      r5,|L1.424|
00010a  682d              LDR      r5,[r5,#0]
00010c  f005000c          AND      r0,r5,#0xc
;;;282    
;;;283      switch (tmp)
000110  b120              CBZ      r0,|L1.284|
000112  2804              CMP      r0,#4
000114  d006              BEQ      |L1.292|
000116  2808              CMP      r0,#8
000118  d131              BNE      |L1.382|
00011a  e007              B        |L1.300|
                  |L1.284|
;;;284      {
;;;285        case 0x00:  /* HSI used as system clock source */
;;;286          SystemCoreClock = HSI_VALUE;
00011c  4d2a              LDR      r5,|L1.456|
00011e  4e2b              LDR      r6,|L1.460|
000120  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;287          break;
000122  e030              B        |L1.390|
                  |L1.292|
;;;288        case 0x04:  /* HSE used as system clock source */
;;;289          SystemCoreClock = HSE_VALUE;
000124  4d2a              LDR      r5,|L1.464|
000126  4e29              LDR      r6,|L1.460|
000128  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;290          break;
00012a  e02c              B        |L1.390|
                  |L1.300|
;;;291        case 0x08:  /* PLL used as system clock source */
;;;292    
;;;293          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;294             SYSCLK = PLL_VCO / PLL_P
;;;295             */    
;;;296          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
00012c  4d29              LDR      r5,|L1.468|
00012e  682d              LDR      r5,[r5,#0]
000130  f3c55480          UBFX     r4,r5,#22,#1
;;;297          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000134  4d27              LDR      r5,|L1.468|
000136  682d              LDR      r5,[r5,#0]
000138  f005013f          AND      r1,r5,#0x3f
;;;298          
;;;299          if (pllsource != 0)
00013c  b14c              CBZ      r4,|L1.338|
;;;300          {
;;;301            /* HSE used as PLL clock source */
;;;302            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
00013e  4d24              LDR      r5,|L1.464|
000140  fbb5f5f1          UDIV     r5,r5,r1
000144  4e23              LDR      r6,|L1.468|
000146  6836              LDR      r6,[r6,#0]
000148  f3c61688          UBFX     r6,r6,#6,#9
00014c  fb05f206          MUL      r2,r5,r6
000150  e008              B        |L1.356|
                  |L1.338|
;;;303          }
;;;304          else
;;;305          {
;;;306            /* HSI used as PLL clock source */
;;;307            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
000152  4d1d              LDR      r5,|L1.456|
000154  fbb5f5f1          UDIV     r5,r5,r1
000158  4e1e              LDR      r6,|L1.468|
00015a  6836              LDR      r6,[r6,#0]
00015c  f3c61688          UBFX     r6,r6,#6,#9
000160  fb05f206          MUL      r2,r5,r6
                  |L1.356|
;;;308          }
;;;309    
;;;310          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000164  4d1b              LDR      r5,|L1.468|
000166  682d              LDR      r5,[r5,#0]
000168  f3c54501          UBFX     r5,r5,#16,#2
00016c  f1050501          ADD      r5,r5,#1
000170  ea4f0345          LSL      r3,r5,#1
;;;311          SystemCoreClock = pllvco/pllp;
000174  fbb2f5f3          UDIV     r5,r2,r3
000178  4e14              LDR      r6,|L1.460|
00017a  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;312          break;
00017c  e003              B        |L1.390|
                  |L1.382|
;;;313        default:
;;;314          SystemCoreClock = HSI_VALUE;
00017e  4d12              LDR      r5,|L1.456|
000180  4e12              LDR      r6,|L1.460|
000182  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;315          break;
000184  bf00              NOP      
                  |L1.390|
000186  bf00              NOP                            ;287
;;;316      }
;;;317      /* Compute HCLK frequency --------------------------------------------------*/
;;;318      /* Get HCLK prescaler */
;;;319      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000188  4d07              LDR      r5,|L1.424|
00018a  682d              LDR      r5,[r5,#0]
00018c  f3c51503          UBFX     r5,r5,#4,#4
000190  4e11              LDR      r6,|L1.472|
000192  5d70              LDRB     r0,[r6,r5]
;;;320      /* HCLK frequency */
;;;321      SystemCoreClock >>= tmp;
000194  4d0d              LDR      r5,|L1.460|
000196  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
000198  fa25f500          LSR      r5,r5,r0
00019c  4e0b              LDR      r6,|L1.460|
00019e  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;322    }
0001a0  bd70              POP      {r4-r6,pc}
;;;323    
                          ENDP

0001a2  0000              DCW      0x0000
                  |L1.420|
                          DCD      0x40023800
                  |L1.424|
                          DCD      0x40023808
                  |L1.428|
                          DCD      0x05403c19
                  |L1.432|
                          DCD      0x40023c00
                  |L1.436|
                          DCD      0xfef6ffff
                  |L1.440|
                          DCD      0x24003010
                  |L1.444|
                          DCD      0x4002380c
                  |L1.448|
                          DCD      0x08010000
                  |L1.452|
                          DCD      0xe000ed08
                  |L1.456|
                          DCD      0x00f42400
                  |L1.460|
                          DCD      SystemCoreClock
                  |L1.464|
                          DCD      0x017d7840
                  |L1.468|
                          DCD      0x40023804
                  |L1.472|
                          DCD      AHBPrescTable

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x07270e00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\BSP\\CMSIS\\Device_Support\\system_stm32f2xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f2xx_c_5d646a67____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___18_system_stm32f2xx_c_5d646a67____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f2xx_c_5d646a67____REVSH|
#line 130
|__asm___18_system_stm32f2xx_c_5d646a67____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
