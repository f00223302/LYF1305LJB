; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_hash_md5.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_hash_md5.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_hash_md5.crf ..\BSP\STM32F2xx\src\stm32f2xx_hash_md5.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  HASH_MD5 PROC
;;;86       */
;;;87     ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;88     {
000004  b08b              SUB      sp,sp,#0x2c
000006  4606              MOV      r6,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
;;;89       HASH_InitTypeDef MD5_HASH_InitStructure;
;;;90       HASH_MsgDigest MD5_MessageDigest;
;;;91       __IO uint16_t nbvalidbitsdata = 0;
00000c  f04f0000          MOV      r0,#0
000010  9001              STR      r0,[sp,#4]
;;;92       uint32_t i = 0;
000012  4680              MOV      r8,r0
;;;93       __IO uint32_t counter = 0;
000014  4681              MOV      r9,r0
;;;94       uint32_t busystatus = 0;
000016  4682              MOV      r10,r0
;;;95       ErrorStatus status = SUCCESS;
000018  f04f0001          MOV      r0,#1
00001c  9000              STR      r0,[sp,#0]
;;;96       uint32_t inputaddr  = (uint32_t)Input;
00001e  46b3              MOV      r11,r6
;;;97       uint32_t outputaddr = (uint32_t)Output;
000020  463c              MOV      r4,r7
;;;98     
;;;99     
;;;100      /* Number of valid bits in last word of the Input data */
;;;101      nbvalidbitsdata = 8 * (Ilen % 4);
000022  ea4f7085          LSL      r0,r5,#30
000026  ea4f60d0          LSR      r0,r0,#27
00002a  9001              STR      r0,[sp,#4]
;;;102    
;;;103      /* HASH peripheral initialization */
;;;104      HASH_DeInit();
00002c  f7fffffe          BL       HASH_DeInit
;;;105    
;;;106      /* HASH Configuration */
;;;107      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
000030  f04f0080          MOV      r0,#0x80
000034  9007              STR      r0,[sp,#0x1c]
;;;108      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
000036  f04f0000          MOV      r0,#0
00003a  9008              STR      r0,[sp,#0x20]
;;;109      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
00003c  f04f0020          MOV      r0,#0x20
000040  9009              STR      r0,[sp,#0x24]
;;;110      HASH_Init(&MD5_HASH_InitStructure);
000042  a807              ADD      r0,sp,#0x1c
000044  f7fffffe          BL       HASH_Init
;;;111    
;;;112      /* Configure the number of valid bits in last word of the data */
;;;113      HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
000048  9801              LDR      r0,[sp,#4]
00004a  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;114    
;;;115      /* Write the Input block in the IN FIFO */
;;;116      for(i=0; i<Ilen; i+=4)
00004e  bf00              NOP      
000050  e007              B        |L1.98|
                  |L1.82|
;;;117      {
;;;118        HASH_DataIn(*(uint32_t*)inputaddr);
000052  f8db0000          LDR      r0,[r11,#0]
000056  f7fffffe          BL       HASH_DataIn
;;;119        inputaddr+=4;
00005a  f10b0b04          ADD      r11,r11,#4
00005e  f1080804          ADD      r8,r8,#4              ;116
                  |L1.98|
000062  45a8              CMP      r8,r5                 ;116
000064  d3f5              BCC      |L1.82|
;;;120      }
;;;121    
;;;122      /* Start the HASH processor */
;;;123      HASH_StartDigest();
000066  f7fffffe          BL       HASH_StartDigest
;;;124    
;;;125      /* wait until the Busy flag is RESET */
;;;126      do
00006a  bf00              NOP      
                  |L1.108|
;;;127      {
;;;128        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
00006c  2008              MOVS     r0,#8
00006e  f7fffffe          BL       HASH_GetFlagStatus
000072  4682              MOV      r10,r0
;;;129        counter++;
000074  f1090901          ADD      r9,r9,#1
;;;130      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000078  f5b93f80          CMP      r9,#0x10000
00007c  d002              BEQ      |L1.132|
00007e  f1ba0f00          CMP      r10,#0
000082  d1f3              BNE      |L1.108|
                  |L1.132|
;;;131    
;;;132      if (busystatus != RESET)
000084  f1ba0f00          CMP      r10,#0
000088  d003              BEQ      |L1.146|
;;;133      {
;;;134         status = ERROR;
00008a  f04f0000          MOV      r0,#0
00008e  9000              STR      r0,[sp,#0]
000090  e014              B        |L1.188|
                  |L1.146|
;;;135      }
;;;136      else
;;;137      {
;;;138        /* Read the message digest */
;;;139        HASH_GetDigest(&MD5_MessageDigest);
000092  a802              ADD      r0,sp,#8
000094  f7fffffe          BL       HASH_GetDigest
;;;140        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
000098  9802              LDR      r0,[sp,#8]
00009a  ba00              REV      r0,r0
00009c  6020              STR      r0,[r4,#0]
;;;141        outputaddr+=4;
00009e  f1040404          ADD      r4,r4,#4
;;;142        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
0000a2  9803              LDR      r0,[sp,#0xc]
0000a4  ba00              REV      r0,r0
0000a6  6020              STR      r0,[r4,#0]
;;;143        outputaddr+=4;
0000a8  f1040404          ADD      r4,r4,#4
;;;144        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
0000ac  9804              LDR      r0,[sp,#0x10]
0000ae  ba00              REV      r0,r0
0000b0  6020              STR      r0,[r4,#0]
;;;145        outputaddr+=4;
0000b2  f1040404          ADD      r4,r4,#4
;;;146        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
0000b6  9805              LDR      r0,[sp,#0x14]
0000b8  ba00              REV      r0,r0
0000ba  6020              STR      r0,[r4,#0]
                  |L1.188|
;;;147      }
;;;148      return status; 
0000bc  9800              LDR      r0,[sp,#0]
;;;149    }
0000be  b00b              ADD      sp,sp,#0x2c
0000c0  e8bd8ff0          POP      {r4-r11,pc}
;;;150    
                          ENDP

                  HMAC_MD5 PROC
;;;161      */
;;;162    ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
0000c4  e92d4fff          PUSH     {r0-r11,lr}
;;;163                         uint32_t Ilen, uint8_t Output[16])
;;;164    {
0000c8  b08d              SUB      sp,sp,#0x34
0000ca  4682              MOV      r10,r0
0000cc  4688              MOV      r8,r1
0000ce  469b              MOV      r11,r3
;;;165      HASH_InitTypeDef MD5_HASH_InitStructure;
;;;166      HASH_MsgDigest MD5_MessageDigest;
;;;167      __IO uint16_t nbvalidbitsdata = 0;
0000d0  f04f0000          MOV      r0,#0
0000d4  9003              STR      r0,[sp,#0xc]
;;;168      __IO uint16_t nbvalidbitskey = 0;
0000d6  9002              STR      r0,[sp,#8]
;;;169      uint32_t i = 0;
0000d8  4605              MOV      r5,r0
;;;170      __IO uint32_t counter = 0;
0000da  4606              MOV      r6,r0
;;;171      uint32_t busystatus = 0;
0000dc  4607              MOV      r7,r0
;;;172      ErrorStatus status = SUCCESS;
0000de  f04f0001          MOV      r0,#1
0000e2  9001              STR      r0,[sp,#4]
;;;173      uint32_t keyaddr    = (uint32_t)Key;
0000e4  46d1              MOV      r9,r10
;;;174      uint32_t inputaddr  = (uint32_t)Input;
0000e6  980f              LDR      r0,[sp,#0x3c]
0000e8  9000              STR      r0,[sp,#0]
;;;175      uint32_t outputaddr = (uint32_t)Output;
0000ea  9c1a              LDR      r4,[sp,#0x68]
;;;176    
;;;177      /* Number of valid bits in last word of the Input data */
;;;178      nbvalidbitsdata = 8 * (Ilen % 4);
0000ec  ea4f708b          LSL      r0,r11,#30
0000f0  ea4f60d0          LSR      r0,r0,#27
0000f4  9003              STR      r0,[sp,#0xc]
;;;179    
;;;180      /* Number of valid bits in last word of the Key */
;;;181      nbvalidbitskey = 8 * (Keylen % 4);
0000f6  ea4f7088          LSL      r0,r8,#30
0000fa  ea4f60d0          LSR      r0,r0,#27
0000fe  9002              STR      r0,[sp,#8]
;;;182       
;;;183      /* HASH peripheral initialization */
;;;184      HASH_DeInit();
000100  f7fffffe          BL       HASH_DeInit
;;;185    
;;;186      /* HASH Configuration */
;;;187      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
000104  f04f0080          MOV      r0,#0x80
000108  9009              STR      r0,[sp,#0x24]
;;;188      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
00010a  f04f0040          MOV      r0,#0x40
00010e  900a              STR      r0,[sp,#0x28]
;;;189      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000110  f04f0020          MOV      r0,#0x20
000114  900b              STR      r0,[sp,#0x2c]
;;;190      if(Keylen > 64)
000116  f1b80f40          CMP      r8,#0x40
00011a  d903              BLS      |L1.292|
;;;191      {
;;;192        /* HMAC long Key */
;;;193        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
00011c  f44f3080          MOV      r0,#0x10000
000120  900c              STR      r0,[sp,#0x30]
000122  e002              B        |L1.298|
                  |L1.292|
;;;194      }
;;;195      else
;;;196      {
;;;197        /* HMAC short Key */
;;;198        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
000124  f04f0000          MOV      r0,#0
000128  900c              STR      r0,[sp,#0x30]
                  |L1.298|
;;;199      }
;;;200      HASH_Init(&MD5_HASH_InitStructure);
00012a  a809              ADD      r0,sp,#0x24
00012c  f7fffffe          BL       HASH_Init
;;;201    
;;;202      /* Configure the number of valid bits in last word of the Key */
;;;203      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
000130  9802              LDR      r0,[sp,#8]
000132  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;204    
;;;205      /* Write the Key */
;;;206      for(i=0; i<Keylen; i+=4)
000136  f04f0500          MOV      r5,#0
00013a  e007              B        |L1.332|
                  |L1.316|
;;;207      {
;;;208        HASH_DataIn(*(uint32_t*)keyaddr);
00013c  f8d90000          LDR      r0,[r9,#0]
000140  f7fffffe          BL       HASH_DataIn
;;;209        keyaddr+=4;
000144  f1090904          ADD      r9,r9,#4
000148  f1050504          ADD      r5,r5,#4              ;206
                  |L1.332|
00014c  4545              CMP      r5,r8                 ;206
00014e  d3f5              BCC      |L1.316|
;;;210      }
;;;211      
;;;212      /* Start the HASH processor */
;;;213      HASH_StartDigest();
000150  f7fffffe          BL       HASH_StartDigest
;;;214    
;;;215      /* wait until the Busy flag is RESET */
;;;216      do
000154  bf00              NOP      
                  |L1.342|
;;;217      {
;;;218        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
000156  2008              MOVS     r0,#8
000158  f7fffffe          BL       HASH_GetFlagStatus
00015c  4607              MOV      r7,r0
;;;219        counter++;
00015e  f1060601          ADD      r6,r6,#1
;;;220      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000162  f5b63f80          CMP      r6,#0x10000
000166  d001              BEQ      |L1.364|
000168  2f00              CMP      r7,#0
00016a  d1f4              BNE      |L1.342|
                  |L1.364|
;;;221    
;;;222      if (busystatus != RESET)
00016c  b11f              CBZ      r7,|L1.374|
;;;223      {
;;;224         status = ERROR;
00016e  f04f0000          MOV      r0,#0
000172  9001              STR      r0,[sp,#4]
000174  e061              B        |L1.570|
                  |L1.374|
;;;225      }
;;;226      else
;;;227      {
;;;228        /* Configure the number of valid bits in last word of the Input data */
;;;229        HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
000176  9803              LDR      r0,[sp,#0xc]
000178  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;230    
;;;231        /* Write the Input block in the IN FIFO */
;;;232        for(i=0; i<Ilen; i+=4)
00017c  f04f0500          MOV      r5,#0
000180  e009              B        |L1.406|
                  |L1.386|
;;;233        {
;;;234          HASH_DataIn(*(uint32_t*)inputaddr);
000182  9900              LDR      r1,[sp,#0]
000184  6808              LDR      r0,[r1,#0]
000186  f7fffffe          BL       HASH_DataIn
;;;235          inputaddr+=4;
00018a  9800              LDR      r0,[sp,#0]
00018c  f1000004          ADD      r0,r0,#4
000190  9000              STR      r0,[sp,#0]
000192  f1050504          ADD      r5,r5,#4              ;232
                  |L1.406|
000196  455d              CMP      r5,r11                ;232
000198  d3f3              BCC      |L1.386|
;;;236        }
;;;237    
;;;238        /* Start the HASH processor */
;;;239        HASH_StartDigest();
00019a  f7fffffe          BL       HASH_StartDigest
;;;240    
;;;241        /* wait until the Busy flag is RESET */
;;;242        counter =0;
00019e  f04f0600          MOV      r6,#0
;;;243        do
0001a2  bf00              NOP      
                  |L1.420|
;;;244        {
;;;245           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0001a4  2008              MOVS     r0,#8
0001a6  f7fffffe          BL       HASH_GetFlagStatus
0001aa  4607              MOV      r7,r0
;;;246           counter++;
0001ac  f1060601          ADD      r6,r6,#1
;;;247        }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
0001b0  f5b63f80          CMP      r6,#0x10000
0001b4  d001              BEQ      |L1.442|
0001b6  2f00              CMP      r7,#0
0001b8  d1f4              BNE      |L1.420|
                  |L1.442|
;;;248    
;;;249        if (busystatus != RESET)
0001ba  b11f              CBZ      r7,|L1.452|
;;;250        {
;;;251          status = ERROR;
0001bc  f04f0000          MOV      r0,#0
0001c0  9001              STR      r0,[sp,#4]
0001c2  e03a              B        |L1.570|
                  |L1.452|
;;;252        }
;;;253        else
;;;254        {  
;;;255          /* Configure the number of valid bits in last word of the Key */
;;;256          HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
0001c4  9802              LDR      r0,[sp,#8]
0001c6  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;257    
;;;258          /* Write the Key */
;;;259          keyaddr = (uint32_t)Key;
0001ca  46d1              MOV      r9,r10
;;;260          for(i=0; i<Keylen; i+=4)
0001cc  f04f0500          MOV      r5,#0
0001d0  e007              B        |L1.482|
                  |L1.466|
;;;261          {
;;;262            HASH_DataIn(*(uint32_t*)keyaddr);
0001d2  f8d90000          LDR      r0,[r9,#0]
0001d6  f7fffffe          BL       HASH_DataIn
;;;263            keyaddr+=4;
0001da  f1090904          ADD      r9,r9,#4
0001de  f1050504          ADD      r5,r5,#4              ;260
                  |L1.482|
0001e2  4545              CMP      r5,r8                 ;260
0001e4  d3f5              BCC      |L1.466|
;;;264          }
;;;265      
;;;266           /* Start the HASH processor */
;;;267           HASH_StartDigest();
0001e6  f7fffffe          BL       HASH_StartDigest
;;;268    
;;;269           /* wait until the Busy flag is RESET */
;;;270           counter =0;
0001ea  f04f0600          MOV      r6,#0
;;;271           do
0001ee  bf00              NOP      
                  |L1.496|
;;;272           {
;;;273              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0001f0  2008              MOVS     r0,#8
0001f2  f7fffffe          BL       HASH_GetFlagStatus
0001f6  4607              MOV      r7,r0
;;;274              counter++;
0001f8  f1060601          ADD      r6,r6,#1
;;;275          }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
0001fc  f5b63f80          CMP      r6,#0x10000
000200  d001              BEQ      |L1.518|
000202  2f00              CMP      r7,#0
000204  d1f4              BNE      |L1.496|
                  |L1.518|
;;;276    
;;;277          if (busystatus != RESET)
000206  b11f              CBZ      r7,|L1.528|
;;;278          {
;;;279             status = ERROR;
000208  f04f0000          MOV      r0,#0
00020c  9001              STR      r0,[sp,#4]
00020e  e014              B        |L1.570|
                  |L1.528|
;;;280          }
;;;281          else
;;;282          {
;;;283             /* Read the message digest */
;;;284             HASH_GetDigest(&MD5_MessageDigest);
000210  a804              ADD      r0,sp,#0x10
000212  f7fffffe          BL       HASH_GetDigest
;;;285             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
000216  9804              LDR      r0,[sp,#0x10]
000218  ba00              REV      r0,r0
00021a  6020              STR      r0,[r4,#0]
;;;286             outputaddr+=4;
00021c  f1040404          ADD      r4,r4,#4
;;;287             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
000220  9805              LDR      r0,[sp,#0x14]
000222  ba00              REV      r0,r0
000224  6020              STR      r0,[r4,#0]
;;;288             outputaddr+=4;
000226  f1040404          ADD      r4,r4,#4
;;;289             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
00022a  9806              LDR      r0,[sp,#0x18]
00022c  ba00              REV      r0,r0
00022e  6020              STR      r0,[r4,#0]
;;;290             outputaddr+=4;
000230  f1040404          ADD      r4,r4,#4
;;;291             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
000234  9807              LDR      r0,[sp,#0x1c]
000236  ba00              REV      r0,r0
000238  6020              STR      r0,[r4,#0]
                  |L1.570|
;;;292          }
;;;293        }
;;;294      }
;;;295      return status;  
00023a  9801              LDR      r0,[sp,#4]
;;;296    }
00023c  b011              ADD      sp,sp,#0x44
00023e  e8bd8ff0          POP      {r4-r11,pc}
;;;297    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_hash_md5.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f2xx_hash_md5_c_HASH_MD5____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___20_stm32f2xx_hash_md5_c_HASH_MD5____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___20_stm32f2xx_hash_md5_c_HASH_MD5____REVSH|
#line 130
|__asm___20_stm32f2xx_hash_md5_c_HASH_MD5____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
