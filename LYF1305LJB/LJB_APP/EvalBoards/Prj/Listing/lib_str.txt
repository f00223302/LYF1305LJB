; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\lib_str.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\lib_str.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\lib_str.crf ..\..\uC-LIB\lib_str.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Str_Len_N PROC
;;;278    
;;;279    CPU_SIZE_T  Str_Len_N (const  CPU_CHAR    *pstr,
000000  b510              PUSH     {r4,lr}
;;;280                                  CPU_SIZE_T   len_max)
;;;281    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;282        const  CPU_CHAR    *pstr_len;
;;;283               CPU_SIZE_T   len;
;;;284    
;;;285    
;;;286        pstr_len = pstr;
000006  4611              MOV      r1,r2
;;;287        len      = 0u;
000008  f04f0000          MOV      r0,#0
;;;288        while (( pstr_len != (const CPU_CHAR *)  0 ) &&             /* Calc str len until NULL ptr (see Note #3a) ...       */
00000c  e003              B        |L1.22|
                  |L1.14|
;;;289               (*pstr_len != (      CPU_CHAR  )'\0') &&             /* ... or NULL char found      (see Note #3b) ...       */
;;;290               ( len      <  (      CPU_SIZE_T)len_max)) {          /* ... or max nbr chars srch'd (see Note #3c).          */
;;;291            pstr_len++;
00000e  f1010101          ADD      r1,r1,#1
;;;292            len++;
000012  f1000001          ADD      r0,r0,#1
                  |L1.22|
000016  b119              CBZ      r1,|L1.32|
000018  780c              LDRB     r4,[r1,#0]            ;289
00001a  b10c              CBZ      r4,|L1.32|
00001c  4298              CMP      r0,r3                 ;290
00001e  d3f6              BCC      |L1.14|
                  |L1.32|
;;;293        }
;;;294    
;;;295        return (len);                                               /* Rtn str len (see Note #3b1).                         */
;;;296    }
000020  bd10              POP      {r4,pc}
;;;297    
                          ENDP

                  Str_Len PROC
;;;218    
;;;219    CPU_SIZE_T  Str_Len (const  CPU_CHAR  *pstr)
000022  b530              PUSH     {r4,r5,lr}
;;;220    {
000024  4604              MOV      r4,r0
;;;221        CPU_SIZE_T  len;
;;;222    
;;;223    
;;;224        len = Str_Len_N(pstr,
000026  f04f31ff          MOV      r1,#0xffffffff
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       Str_Len_N
000030  4605              MOV      r5,r0
;;;225                        DEF_INT_CPU_U_MAX_VAL);
;;;226    
;;;227        return (len);
000032  4628              MOV      r0,r5
;;;228    }
000034  bd30              POP      {r4,r5,pc}
;;;229    
                          ENDP

                  Str_Copy_N PROC
;;;442    /*$PAGE*/
;;;443    CPU_CHAR  *Str_Copy_N (       CPU_CHAR    *pstr_dest,
000036  b570              PUSH     {r4-r6,lr}
;;;444                           const  CPU_CHAR    *pstr_src,
;;;445                                  CPU_SIZE_T   len_max)
;;;446    {
000038  4604              MOV      r4,r0
00003a  460d              MOV      r5,r1
00003c  4616              MOV      r6,r2
;;;447               CPU_CHAR    *pstr_copy_dest;
;;;448        const  CPU_CHAR    *pstr_copy_src;
;;;449               CPU_SIZE_T   len_copy;
;;;450    
;;;451                                                                    /* Rtn NULL if str ptr(s) NULL (see Note #3a1).         */
;;;452        if (pstr_dest == (CPU_CHAR *)0) {
00003e  b90c              CBNZ     r4,|L1.68|
;;;453            return ((CPU_CHAR *)0);
000040  2000              MOVS     r0,#0
                  |L1.66|
;;;454        }
;;;455        if (pstr_src  == (const CPU_CHAR *)0) {
;;;456            return ((CPU_CHAR *)0);
;;;457        }
;;;458    
;;;459    
;;;460        pstr_copy_dest = pstr_dest;
;;;461        pstr_copy_src  = pstr_src;
;;;462        len_copy       = 0u;
;;;463    
;;;464        while (( pstr_copy_dest != (      CPU_CHAR *)  0 ) &&       /* Copy str until NULL ptr(s)  [see Note #3b]  ...      */
;;;465               ( pstr_copy_src  != (const CPU_CHAR *)  0 ) &&
;;;466               (*pstr_copy_src  != (      CPU_CHAR  )'\0') &&       /* ... or NULL char found      (see Note #3c); ...      */
;;;467               ( len_copy       <  (      CPU_SIZE_T)len_max)) {    /* ... or max nbr chars copied (see Note #3d).          */
;;;468           *pstr_copy_dest = *pstr_copy_src;
;;;469            pstr_copy_dest++;
;;;470            pstr_copy_src++;
;;;471            len_copy++;
;;;472        }
;;;473                                                                    /* Rtn NULL if NULL ptr(s) found  (see Note #3b1).      */
;;;474        if ((pstr_copy_dest == (      CPU_CHAR *)0) ||
;;;475            (pstr_copy_src  == (const CPU_CHAR *)0)) {
;;;476             return ((CPU_CHAR *)0);
;;;477        }
;;;478    
;;;479        if (len_copy < len_max) {                                   /* If  copy str len < max buf len (see Note #2a2A), ... */
;;;480           *pstr_copy_dest = (CPU_CHAR)'\0';                        /* ... copy NULL char  (see Note #3c1).                 */
;;;481        }
;;;482    
;;;483    
;;;484        return (pstr_dest);                                         /* Rtn ptr to dest str (see Note #2b1).                 */
;;;485    }
000042  bd70              POP      {r4-r6,pc}
                  |L1.68|
000044  b90d              CBNZ     r5,|L1.74|
000046  2000              MOVS     r0,#0                 ;456
000048  e7fb              B        |L1.66|
                  |L1.74|
00004a  4621              MOV      r1,r4                 ;460
00004c  462a              MOV      r2,r5                 ;461
00004e  f04f0300          MOV      r3,#0                 ;462
000052  e007              B        |L1.100|
                  |L1.84|
000054  7810              LDRB     r0,[r2,#0]            ;468
000056  7008              STRB     r0,[r1,#0]            ;468
000058  f1010101          ADD      r1,r1,#1              ;469
00005c  f1020201          ADD      r2,r2,#1              ;470
000060  f1030301          ADD      r3,r3,#1              ;471
                  |L1.100|
000064  b121              CBZ      r1,|L1.112|
000066  b11a              CBZ      r2,|L1.112|
000068  7810              LDRB     r0,[r2,#0]            ;466
00006a  b108              CBZ      r0,|L1.112|
00006c  42b3              CMP      r3,r6                 ;467
00006e  d3f1              BCC      |L1.84|
                  |L1.112|
000070  b101              CBZ      r1,|L1.116|
000072  b90a              CBNZ     r2,|L1.120|
                  |L1.116|
000074  2000              MOVS     r0,#0                 ;476
000076  e7e4              B        |L1.66|
                  |L1.120|
000078  42b3              CMP      r3,r6                 ;479
00007a  d202              BCS      |L1.130|
00007c  f04f0000          MOV      r0,#0                 ;480
000080  7008              STRB     r0,[r1,#0]            ;480
                  |L1.130|
000082  4620              MOV      r0,r4                 ;484
000084  e7dd              B        |L1.66|
;;;486    
                          ENDP

                  Str_Copy PROC
;;;351    
;;;352    CPU_CHAR  *Str_Copy (       CPU_CHAR  *pstr_dest,
000086  b570              PUSH     {r4-r6,lr}
;;;353                         const  CPU_CHAR  *pstr_src)
;;;354    {
000088  4604              MOV      r4,r0
00008a  460d              MOV      r5,r1
;;;355        CPU_CHAR  *pstr_rtn;
;;;356    
;;;357    
;;;358        pstr_rtn = Str_Copy_N(pstr_dest,
00008c  f04f32ff          MOV      r2,#0xffffffff
000090  4629              MOV      r1,r5
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       Str_Copy_N
000098  4606              MOV      r6,r0
;;;359                              pstr_src,
;;;360                              DEF_INT_CPU_U_MAX_VAL);
;;;361    
;;;362        return (pstr_rtn);
00009a  4630              MOV      r0,r6
;;;363    }
00009c  bd70              POP      {r4-r6,pc}
;;;364    
                          ENDP

                  Str_Cat_N PROC
;;;627    /*$PAGE*/
;;;628    CPU_CHAR  *Str_Cat_N (       CPU_CHAR    *pstr_dest,
00009e  b570              PUSH     {r4-r6,lr}
;;;629                          const  CPU_CHAR    *pstr_cat,
;;;630                                 CPU_SIZE_T   len_max)
;;;631    {
0000a0  4603              MOV      r3,r0
0000a2  460c              MOV      r4,r1
0000a4  4615              MOV      r5,r2
;;;632               CPU_CHAR    *pstr_cat_dest;
;;;633        const  CPU_CHAR    *pstr_cat_src;
;;;634               CPU_SIZE_T   len_cat;
;;;635    
;;;636                                                                    /* Rtn NULL if str ptr(s) NULL (see Note #3a1).         */
;;;637        if (pstr_dest == (CPU_CHAR *)0) {
0000a6  b90b              CBNZ     r3,|L1.172|
;;;638            return ((CPU_CHAR *)0);
0000a8  2000              MOVS     r0,#0
                  |L1.170|
;;;639        }
;;;640        if (pstr_cat  == (const CPU_CHAR *)0) {
;;;641            return ((CPU_CHAR *)0);
;;;642        }
;;;643    
;;;644        if (len_max < 1) {                                          /* Rtn dest str if cat len = 0 (see Note #3d2A).        */
;;;645            return ((CPU_CHAR *)pstr_dest);
;;;646        }
;;;647    
;;;648    
;;;649        pstr_cat_dest = pstr_dest;
;;;650        while (( pstr_cat_dest != (CPU_CHAR *)  0 ) &&              /* Adv to end of cur dest str until NULL ptr ...        */
;;;651               (*pstr_cat_dest != (CPU_CHAR  )'\0')) {              /* ... or NULL char found..                             */
;;;652            pstr_cat_dest++;
;;;653        }
;;;654        if (pstr_cat_dest == (CPU_CHAR *)0) {                       /* Rtn NULL if NULL ptr found (see Note #3b1).          */
;;;655            return ((CPU_CHAR *)0);
;;;656        }
;;;657    
;;;658        pstr_cat_src = pstr_cat;
;;;659        len_cat      = 0u;
;;;660    
;;;661        while (( pstr_cat_dest != (      CPU_CHAR *)  0 ) &&        /* Cat str until NULL ptr(s)  [see Note #3b]  ...       */
;;;662               ( pstr_cat_src  != (const CPU_CHAR *)  0 ) &&
;;;663               (*pstr_cat_src  != (      CPU_CHAR  )'\0') &&        /* ... or NULL char found     (see Note #3c); ...       */
;;;664               ( len_cat       <  (      CPU_SIZE_T)len_max)) {     /* ... or max nbr chars cat'd (see Note #3d).           */
;;;665           *pstr_cat_dest = *pstr_cat_src;
;;;666            pstr_cat_dest++;
;;;667            pstr_cat_src++;
;;;668            len_cat++;
;;;669        }
;;;670                                                                    /* Rtn NULL if NULL ptr(s) found (see Note #3b1).       */
;;;671        if ((pstr_cat_dest == (      CPU_CHAR *)0) ||
;;;672            (pstr_cat_src  == (const CPU_CHAR *)0)) {
;;;673             return ((CPU_CHAR *)0);
;;;674        }
;;;675    
;;;676       *pstr_cat_dest = (CPU_CHAR)'\0';                             /* Append NULL char    (see Note #2a2C).                */
;;;677    
;;;678    
;;;679        return (pstr_dest);                                         /* Rtn ptr to dest str (see Note #2b1).                 */
;;;680    }
0000aa  bd70              POP      {r4-r6,pc}
                  |L1.172|
0000ac  b90c              CBNZ     r4,|L1.178|
0000ae  2000              MOVS     r0,#0                 ;641
0000b0  e7fb              B        |L1.170|
                  |L1.178|
0000b2  b90d              CBNZ     r5,|L1.184|
0000b4  4618              MOV      r0,r3                 ;645
0000b6  e7f8              B        |L1.170|
                  |L1.184|
0000b8  4619              MOV      r1,r3                 ;649
0000ba  e001              B        |L1.192|
                  |L1.188|
0000bc  f1010101          ADD      r1,r1,#1              ;652
                  |L1.192|
0000c0  b111              CBZ      r1,|L1.200|
0000c2  7808              LDRB     r0,[r1,#0]            ;651
0000c4  2800              CMP      r0,#0                 ;651
0000c6  d1f9              BNE      |L1.188|
                  |L1.200|
0000c8  b909              CBNZ     r1,|L1.206|
0000ca  2000              MOVS     r0,#0                 ;655
0000cc  e7ed              B        |L1.170|
                  |L1.206|
0000ce  4622              MOV      r2,r4                 ;658
0000d0  f04f0600          MOV      r6,#0                 ;659
0000d4  e007              B        |L1.230|
                  |L1.214|
0000d6  7810              LDRB     r0,[r2,#0]            ;665
0000d8  7008              STRB     r0,[r1,#0]            ;665
0000da  f1010101          ADD      r1,r1,#1              ;666
0000de  f1020201          ADD      r2,r2,#1              ;667
0000e2  f1060601          ADD      r6,r6,#1              ;668
                  |L1.230|
0000e6  b121              CBZ      r1,|L1.242|
0000e8  b11a              CBZ      r2,|L1.242|
0000ea  7810              LDRB     r0,[r2,#0]            ;663
0000ec  b108              CBZ      r0,|L1.242|
0000ee  42ae              CMP      r6,r5                 ;664
0000f0  d3f1              BCC      |L1.214|
                  |L1.242|
0000f2  b101              CBZ      r1,|L1.246|
0000f4  b90a              CBNZ     r2,|L1.250|
                  |L1.246|
0000f6  2000              MOVS     r0,#0                 ;673
0000f8  e7d7              B        |L1.170|
                  |L1.250|
0000fa  f04f0000          MOV      r0,#0                 ;676
0000fe  7008              STRB     r0,[r1,#0]            ;676
000100  4618              MOV      r0,r3                 ;679
000102  e7d2              B        |L1.170|
;;;681    
                          ENDP

                  Str_Cat PROC
;;;544    
;;;545    CPU_CHAR  *Str_Cat (       CPU_CHAR  *pstr_dest,
000104  b570              PUSH     {r4-r6,lr}
;;;546                        const  CPU_CHAR  *pstr_cat)
;;;547    {
000106  4604              MOV      r4,r0
000108  460d              MOV      r5,r1
;;;548        CPU_CHAR  *pstr_rtn;
;;;549    
;;;550    
;;;551        pstr_rtn = Str_Cat_N(pstr_dest,
00010a  f04f32ff          MOV      r2,#0xffffffff
00010e  4629              MOV      r1,r5
000110  4620              MOV      r0,r4
000112  f7fffffe          BL       Str_Cat_N
000116  4606              MOV      r6,r0
;;;552                             pstr_cat,
;;;553                             DEF_INT_CPU_U_MAX_VAL);
;;;554    
;;;555        return (pstr_rtn);
000118  4630              MOV      r0,r6
;;;556    }
00011a  bd70              POP      {r4-r6,pc}
;;;557    
                          ENDP

                  Str_Cmp_N PROC
;;;860    /*$PAGE*/
;;;861    CPU_INT16S  Str_Cmp_N (const  CPU_CHAR    *p1_str,
00011c  e92d43f0          PUSH     {r4-r9,lr}
;;;862                           const  CPU_CHAR    *p2_str,
;;;863                                  CPU_SIZE_T   len_max)
;;;864    {
000120  4605              MOV      r5,r0
000122  460b              MOV      r3,r1
000124  4694              MOV      r12,r2
;;;865        const  CPU_CHAR    *p1_str_cmp;
;;;866        const  CPU_CHAR    *p2_str_cmp;
;;;867        const  CPU_CHAR    *p1_str_cmp_next;
;;;868        const  CPU_CHAR    *p2_str_cmp_next;
;;;869               CPU_INT16S   cmp_val;
;;;870               CPU_SIZE_T   cmp_len;
;;;871    
;;;872    
;;;873        if (len_max < 1) {                                          /* If cmp len = 0,        rtn 0       (see Note #3d1A). */
000126  f1bc0f00          CMP      r12,#0
00012a  d102              BNE      |L1.306|
;;;874            return (0);
00012c  2000              MOVS     r0,#0
                  |L1.302|
;;;875        }
;;;876    
;;;877        if (p1_str == (const CPU_CHAR *)0) {
;;;878            if (p2_str == (const CPU_CHAR *)0) {
;;;879                return (0);                                         /* If BOTH str ptrs NULL, rtn 0       (see Note #3a1A). */
;;;880            }
;;;881            cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
;;;882            return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #3a1B1).*/
;;;883        }
;;;884        if (p2_str == (const CPU_CHAR *)0) {
;;;885            cmp_val = (CPU_INT16S)(*p1_str);
;;;886            return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #3a1B2).*/
;;;887        }
;;;888    
;;;889    
;;;890        p1_str_cmp      = p1_str;
;;;891        p2_str_cmp      = p2_str;
;;;892        p1_str_cmp_next = p1_str_cmp;
;;;893        p2_str_cmp_next = p2_str_cmp;
;;;894        p1_str_cmp_next++;
;;;895        p2_str_cmp_next++;
;;;896        cmp_len         = 0u;
;;;897    
;;;898        while ((*p1_str_cmp      == *p2_str_cmp)            &&      /* Cmp strs until non-matching chars (see Note #3c) ... */
;;;899               (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
;;;900               ( p1_str_cmp_next != (const CPU_CHAR *)  0 ) &&      /* ... or NULL ptr(s) found          (see Note #3a2).   */
;;;901               ( p2_str_cmp_next != (const CPU_CHAR *)  0 ) &&
;;;902               ( cmp_len         <  (      CPU_SIZE_T)len_max)) {   /* ... or max nbr chars cmp'd        (see Note #3d2).   */
;;;903            p1_str_cmp++;
;;;904            p2_str_cmp++;
;;;905            p1_str_cmp_next++;
;;;906            p2_str_cmp_next++;
;;;907            cmp_len++;
;;;908        }
;;;909    
;;;910    
;;;911        if (cmp_len == len_max) {                                   /* If strs     identical for max len nbr of chars, ...  */
;;;912            return (0);                                             /* ... rtn 0                 (see Note #3d2A).          */
;;;913        }
;;;914    
;;;915        if (*p1_str_cmp != *p2_str_cmp) {                           /* If strs NOT identical, ...                           */
;;;916                                                                    /* ... calc & rtn char diff  (see Note #3c1).           */
;;;917             cmp_val = (CPU_INT16S)(*p1_str_cmp) - (CPU_INT16S)(*p2_str_cmp);
;;;918    
;;;919        } else if (*p1_str_cmp  == (CPU_CHAR)'\0') {                /* If NULL char(s) found, ...                           */
;;;920             cmp_val = (CPU_INT16S)0;                               /* ... strs identical; rtn 0 (see Note #3b).            */
;;;921    
;;;922        } else {
;;;923            if (p1_str_cmp_next == (const CPU_CHAR *)0) {
;;;924                if (p2_str_cmp_next == (const CPU_CHAR *)0) {       /* If BOTH next str ptrs NULL, ...                      */
;;;925                    cmp_val = (CPU_INT16S)0;                        /* ... rtn 0                       (see Note #3a2A).    */
;;;926                } else {                                            /* If p1_str_cmp_next NULL, ...                         */
;;;927                                                                    /* ... rtn neg p2_str_cmp_next val (see Note #3a2B1).   */
;;;928                    cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_cmp_next);
;;;929                }
;;;930            } else {                                                /* If p2_str_cmp_next NULL, ...                         */
;;;931                cmp_val = (CPU_INT16S)(*p1_str_cmp_next);           /* ... rtn pos p1_str_cmp_next val (see Note #3a2B2).   */
;;;932            }
;;;933        }
;;;934    
;;;935    
;;;936        return (cmp_val);
;;;937    }
00012e  e8bd83f0          POP      {r4-r9,pc}
                  |L1.306|
000132  b93d              CBNZ     r5,|L1.324|
000134  b90b              CBNZ     r3,|L1.314|
000136  2000              MOVS     r0,#0                 ;879
000138  e7f9              B        |L1.302|
                  |L1.314|
00013a  7818              LDRB     r0,[r3,#0]            ;881
00013c  f1c00200          RSB      r2,r0,#0              ;881
000140  4610              MOV      r0,r2                 ;882
000142  e7f4              B        |L1.302|
                  |L1.324|
000144  b913              CBNZ     r3,|L1.332|
000146  782a              LDRB     r2,[r5,#0]            ;885
000148  4610              MOV      r0,r2                 ;886
00014a  e7f0              B        |L1.302|
                  |L1.332|
00014c  4629              MOV      r1,r5                 ;890
00014e  461c              MOV      r4,r3                 ;891
000150  460f              MOV      r7,r1                 ;892
000152  4626              MOV      r6,r4                 ;893
000154  f1070701          ADD      r7,r7,#1              ;894
000158  f1060601          ADD      r6,r6,#1              ;895
00015c  f04f0800          MOV      r8,#0                 ;896
000160  e009              B        |L1.374|
                  |L1.354|
000162  f1010101          ADD      r1,r1,#1              ;903
000166  f1040401          ADD      r4,r4,#1              ;904
00016a  f1070701          ADD      r7,r7,#1              ;905
00016e  f1060601          ADD      r6,r6,#1              ;906
000172  f1080801          ADD      r8,r8,#1              ;907
                  |L1.374|
000176  7808              LDRB     r0,[r1,#0]            ;898
000178  f8949000          LDRB     r9,[r4,#0]            ;898
00017c  4548              CMP      r0,r9                 ;898
00017e  d105              BNE      |L1.396|
000180  7808              LDRB     r0,[r1,#0]            ;899
000182  b118              CBZ      r0,|L1.396|
000184  b117              CBZ      r7,|L1.396|
000186  b10e              CBZ      r6,|L1.396|
000188  45e0              CMP      r8,r12                ;902
00018a  d3ea              BCC      |L1.354|
                  |L1.396|
00018c  45e0              CMP      r8,r12                ;911
00018e  d101              BNE      |L1.404|
000190  2000              MOVS     r0,#0                 ;912
000192  e7cc              B        |L1.302|
                  |L1.404|
000194  7808              LDRB     r0,[r1,#0]            ;915
000196  f8949000          LDRB     r9,[r4,#0]            ;915
00019a  4548              CMP      r0,r9                 ;915
00019c  d005              BEQ      |L1.426|
00019e  7808              LDRB     r0,[r1,#0]            ;917
0001a0  f8949000          LDRB     r9,[r4,#0]            ;917
0001a4  eba00209          SUB      r2,r0,r9              ;917
0001a8  e00e              B        |L1.456|
                  |L1.426|
0001aa  7808              LDRB     r0,[r1,#0]            ;919
0001ac  b910              CBNZ     r0,|L1.436|
0001ae  f04f0200          MOV      r2,#0                 ;920
0001b2  e009              B        |L1.456|
                  |L1.436|
0001b4  b93f              CBNZ     r7,|L1.454|
0001b6  b916              CBNZ     r6,|L1.446|
0001b8  f04f0200          MOV      r2,#0                 ;925
0001bc  e004              B        |L1.456|
                  |L1.446|
0001be  7830              LDRB     r0,[r6,#0]            ;928
0001c0  f1c00200          RSB      r2,r0,#0              ;928
0001c4  e000              B        |L1.456|
                  |L1.454|
0001c6  783a              LDRB     r2,[r7,#0]            ;931
                  |L1.456|
0001c8  4610              MOV      r0,r2                 ;936
0001ca  e7b0              B        |L1.302|
;;;938    
                          ENDP

                  Str_Cmp PROC
;;;758    
;;;759    CPU_INT16S  Str_Cmp (const  CPU_CHAR  *p1_str,
0001cc  b570              PUSH     {r4-r6,lr}
;;;760                         const  CPU_CHAR  *p2_str)
;;;761    {
0001ce  4604              MOV      r4,r0
0001d0  460d              MOV      r5,r1
;;;762        CPU_INT16S  cmp_val;
;;;763    
;;;764    
;;;765        cmp_val = Str_Cmp_N(p1_str,
0001d2  f04f32ff          MOV      r2,#0xffffffff
0001d6  4629              MOV      r1,r5
0001d8  4620              MOV      r0,r4
0001da  f7fffffe          BL       Str_Cmp_N
0001de  4606              MOV      r6,r0
;;;766                            p2_str,
;;;767                            DEF_INT_CPU_U_MAX_VAL);
;;;768    
;;;769        return (cmp_val);
0001e0  4630              MOV      r0,r6
;;;770    }
0001e2  bd70              POP      {r4-r6,pc}
;;;771    
                          ENDP

                  Str_CmpIgnoreCase_N PROC
;;;1137   
;;;1138   CPU_INT16S  Str_CmpIgnoreCase_N (const  CPU_CHAR    *p1_str,
0001e4  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1139                                    const  CPU_CHAR    *p2_str,
;;;1140                                           CPU_SIZE_T   len_max)
;;;1141   {
0001e8  b082              SUB      sp,sp,#8
0001ea  4680              MOV      r8,r0
0001ec  460e              MOV      r6,r1
;;;1142       const  CPU_CHAR    *p1_str_cmp;
;;;1143       const  CPU_CHAR    *p2_str_cmp;
;;;1144       const  CPU_CHAR    *p1_str_cmp_next;
;;;1145       const  CPU_CHAR    *p2_str_cmp_next;
;;;1146              CPU_CHAR     char_1;
;;;1147              CPU_CHAR     char_2;
;;;1148              CPU_INT16S   cmp_val;
;;;1149              CPU_SIZE_T   cmp_len;
;;;1150   
;;;1151   
;;;1152       if (len_max < 1) {                                          /* If cmp len = 0,        rtn 0       (see Note #3d1A). */
0001ee  9804              LDR      r0,[sp,#0x10]
0001f0  b918              CBNZ     r0,|L1.506|
;;;1153           return (0);
0001f2  2000              MOVS     r0,#0
                  |L1.500|
;;;1154       }
;;;1155   
;;;1156       if (p1_str == (const CPU_CHAR *)0) {
;;;1157           if (p2_str == (const CPU_CHAR *)0) {
;;;1158               return (0);                                         /* If BOTH str ptrs NULL, rtn 0       (see Note #3a1A). */
;;;1159           }
;;;1160           char_2  =  ASCII_ToLower(*p2_str);
;;;1161           cmp_val = (CPU_INT16S)0 - (CPU_INT16S)char_2;
;;;1162           return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #3a1B1).*/
;;;1163       }
;;;1164       if (p2_str == (const CPU_CHAR *)0) {
;;;1165           char_1  =  ASCII_ToLower(*p1_str);
;;;1166           cmp_val = (CPU_INT16S)char_1;
;;;1167           return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #3a1B2).*/
;;;1168       }
;;;1169   
;;;1170   
;;;1171       p1_str_cmp      = p1_str;
;;;1172       p2_str_cmp      = p2_str;
;;;1173       p1_str_cmp_next = p1_str_cmp;
;;;1174       p2_str_cmp_next = p2_str_cmp;
;;;1175       p1_str_cmp_next++;
;;;1176       p2_str_cmp_next++;
;;;1177       char_1          = ASCII_ToLower(*p1_str_cmp);
;;;1178       char_2          = ASCII_ToLower(*p2_str_cmp);
;;;1179       cmp_len         = 0u;
;;;1180   
;;;1181       while (( char_1          ==  char_2)                &&      /* Cmp strs until non-matching chars (see Note #3c) ... */
;;;1182              (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
;;;1183              ( p1_str_cmp_next != (const CPU_CHAR *)  0 ) &&      /* ... or NULL ptr(s) found          (see Note #3a2).   */
;;;1184              ( p2_str_cmp_next != (const CPU_CHAR *)  0 ) &&
;;;1185              ( cmp_len         <  (      CPU_SIZE_T)len_max)) {   /* ... or max nbr chars cmp'd        (see Note #3d2).   */
;;;1186           p1_str_cmp++;
;;;1187           p2_str_cmp++;
;;;1188           p1_str_cmp_next++;
;;;1189           p2_str_cmp_next++;
;;;1190           cmp_len++;
;;;1191           char_1 = ASCII_ToLower(*p1_str_cmp);
;;;1192           char_2 = ASCII_ToLower(*p2_str_cmp);
;;;1193       }
;;;1194   
;;;1195   
;;;1196       if (cmp_len == len_max) {                                   /* If strs     identical for max len nbr of chars, ...  */
;;;1197           return (0);                                             /* ... rtn 0                 (see Note #3d2A).          */
;;;1198       }
;;;1199   
;;;1200       if (char_1 != char_2) {                                     /* If strs NOT identical, ...                           */
;;;1201            cmp_val = (CPU_INT16S)char_1 - (CPU_INT16S)char_2;     /* ... calc & rtn char diff  (see Note #3c1).           */
;;;1202   
;;;1203       } else if (char_1 == (CPU_CHAR)'\0') {                      /* If NULL char(s) found, ...                           */
;;;1204            cmp_val = (CPU_INT16S)0;                               /* ... strs identical; rtn 0 (see Note #3b).            */
;;;1205   
;;;1206       } else {
;;;1207           if (p1_str_cmp_next == (const CPU_CHAR *)0) {
;;;1208               if (p2_str_cmp_next == (const CPU_CHAR *)0) {       /* If BOTH next str ptrs NULL, ...                      */
;;;1209                   cmp_val = (CPU_INT16S)0;                        /* ... rtn 0                       (see Note #3a2A).    */
;;;1210               } else {                                            /* If p1_str_cmp_next NULL, ...                         */
;;;1211                   char_2  =  ASCII_ToLower(*p2_str_cmp_next);
;;;1212                   cmp_val = (CPU_INT16S)0 - (CPU_INT16S)char_2;   /* ... rtn neg p2_str_cmp_next val (see Note #3a2B1).   */
;;;1213               }
;;;1214           } else {                                                /* If p2_str_cmp_next NULL, ...                         */
;;;1215               char_1  =  ASCII_ToLower(*p1_str_cmp_next);
;;;1216               cmp_val = (CPU_INT16S)char_1;                       /* ... rtn pos p1_str_cmp_next val (see Note #3a2B2).   */
;;;1217           }
;;;1218       }
;;;1219   
;;;1220   
;;;1221       return (cmp_val);
;;;1222   }
0001f4  b005              ADD      sp,sp,#0x14
0001f6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.506|
0001fa  f1b80f00          CMP      r8,#0                 ;1156
0001fe  d10a              BNE      |L1.534|
000200  b90e              CBNZ     r6,|L1.518|
000202  2000              MOVS     r0,#0                 ;1158
000204  e7f6              B        |L1.500|
                  |L1.518|
000206  7830              LDRB     r0,[r6,#0]            ;1160
000208  f7fffffe          BL       ASCII_ToLower
00020c  4607              MOV      r7,r0                 ;1160
00020e  f1c70400          RSB      r4,r7,#0              ;1161
000212  4620              MOV      r0,r4                 ;1162
000214  e7ee              B        |L1.500|
                  |L1.534|
000216  b93e              CBNZ     r6,|L1.552|
000218  f8980000          LDRB     r0,[r8,#0]            ;1165
00021c  f7fffffe          BL       ASCII_ToLower
000220  4605              MOV      r5,r0                 ;1165
000222  462c              MOV      r4,r5                 ;1166
000224  4620              MOV      r0,r4                 ;1167
000226  e7e5              B        |L1.500|
                  |L1.552|
000228  46c1              MOV      r9,r8                 ;1171
00022a  46b2              MOV      r10,r6                ;1172
00022c  46c8              MOV      r8,r9                 ;1173
00022e  46c3              MOV      r11,r8                ;1173
000230  4656              MOV      r6,r10                ;1174
000232  f8cda004          STR      r10,[sp,#4]           ;1174
000236  46d8              MOV      r8,r11                ;1175
000238  f10b0b01          ADD      r11,r11,#1            ;1175
00023c  9e01              LDR      r6,[sp,#4]            ;1176
00023e  f1060001          ADD      r0,r6,#1              ;1176
000242  9001              STR      r0,[sp,#4]            ;1176
000244  46c8              MOV      r8,r9                 ;1177
000246  f8990000          LDRB     r0,[r9,#0]            ;1177
00024a  f7fffffe          BL       ASCII_ToLower
00024e  4605              MOV      r5,r0                 ;1177
000250  4656              MOV      r6,r10                ;1178
000252  f89a0000          LDRB     r0,[r10,#0]           ;1178
000256  f7fffffe          BL       ASCII_ToLower
00025a  4607              MOV      r7,r0                 ;1178
00025c  f04f0000          MOV      r0,#0                 ;1179
000260  9000              STR      r0,[sp,#0]            ;1179
000262  e017              B        |L1.660|
                  |L1.612|
000264  f1090901          ADD      r9,r9,#1              ;1186
000268  f10a0a01          ADD      r10,r10,#1            ;1187
00026c  f10b0b01          ADD      r11,r11,#1            ;1188
000270  9801              LDR      r0,[sp,#4]            ;1189
000272  f1000001          ADD      r0,r0,#1              ;1189
000276  9001              STR      r0,[sp,#4]            ;1189
000278  9800              LDR      r0,[sp,#0]            ;1190
00027a  f1000001          ADD      r0,r0,#1              ;1190
00027e  9000              STR      r0,[sp,#0]            ;1190
000280  f8990000          LDRB     r0,[r9,#0]            ;1191
000284  f7fffffe          BL       ASCII_ToLower
000288  4605              MOV      r5,r0                 ;1191
00028a  f89a0000          LDRB     r0,[r10,#0]           ;1192
00028e  f7fffffe          BL       ASCII_ToLower
000292  4607              MOV      r7,r0                 ;1192
                  |L1.660|
000294  42bd              CMP      r5,r7                 ;1181
000296  d10b              BNE      |L1.688|
000298  f8990000          LDRB     r0,[r9,#0]            ;1182
00029c  b140              CBZ      r0,|L1.688|
00029e  f1bb0f00          CMP      r11,#0                ;1183
0002a2  d005              BEQ      |L1.688|
0002a4  9801              LDR      r0,[sp,#4]            ;1184
0002a6  b118              CBZ      r0,|L1.688|
0002a8  9904              LDR      r1,[sp,#0x10]         ;1185
0002aa  9800              LDR      r0,[sp,#0]            ;1185
0002ac  4288              CMP      r0,r1                 ;1185
0002ae  d3d9              BCC      |L1.612|
                  |L1.688|
0002b0  9904              LDR      r1,[sp,#0x10]         ;1196
0002b2  9800              LDR      r0,[sp,#0]            ;1196
0002b4  4288              CMP      r0,r1                 ;1196
0002b6  d101              BNE      |L1.700|
0002b8  2000              MOVS     r0,#0                 ;1197
0002ba  e79b              B        |L1.500|
                  |L1.700|
0002bc  42bd              CMP      r5,r7                 ;1200
0002be  d002              BEQ      |L1.710|
0002c0  eba50407          SUB      r4,r5,r7              ;1201
0002c4  e019              B        |L1.762|
                  |L1.710|
0002c6  b915              CBNZ     r5,|L1.718|
0002c8  f04f0400          MOV      r4,#0                 ;1204
0002cc  e015              B        |L1.762|
                  |L1.718|
0002ce  f1bb0f00          CMP      r11,#0                ;1207
0002d2  d10c              BNE      |L1.750|
0002d4  9801              LDR      r0,[sp,#4]            ;1208
0002d6  b910              CBNZ     r0,|L1.734|
0002d8  f04f0400          MOV      r4,#0                 ;1209
0002dc  e00d              B        |L1.762|
                  |L1.734|
0002de  9901              LDR      r1,[sp,#4]            ;1211
0002e0  7808              LDRB     r0,[r1,#0]            ;1211
0002e2  f7fffffe          BL       ASCII_ToLower
0002e6  4607              MOV      r7,r0                 ;1211
0002e8  f1c70400          RSB      r4,r7,#0              ;1212
0002ec  e005              B        |L1.762|
                  |L1.750|
0002ee  f89b0000          LDRB     r0,[r11,#0]           ;1215
0002f2  f7fffffe          BL       ASCII_ToLower
0002f6  4605              MOV      r5,r0                 ;1215
0002f8  462c              MOV      r4,r5                 ;1216
                  |L1.762|
0002fa  4620              MOV      r0,r4                 ;1221
0002fc  e77a              B        |L1.500|
;;;1223   
                          ENDP

                  Str_CmpIgnoreCase PROC
;;;1025   /*$PAGE*/
;;;1026   CPU_INT16S  Str_CmpIgnoreCase (const  CPU_CHAR  *p1_str,
0002fe  b570              PUSH     {r4-r6,lr}
;;;1027                                  const  CPU_CHAR  *p2_str)
;;;1028   {
000300  4604              MOV      r4,r0
000302  460d              MOV      r5,r1
;;;1029       CPU_INT16S  cmp_val;
;;;1030   
;;;1031   
;;;1032       cmp_val = Str_CmpIgnoreCase_N(p1_str,
000304  f04f32ff          MOV      r2,#0xffffffff
000308  4629              MOV      r1,r5
00030a  4620              MOV      r0,r4
00030c  f7fffffe          BL       Str_CmpIgnoreCase_N
000310  4606              MOV      r6,r0
;;;1033                                     p2_str,
;;;1034                                     DEF_INT_CPU_U_MAX_VAL);
;;;1035   
;;;1036       return (cmp_val);
000312  4630              MOV      r0,r6
;;;1037   }
000314  bd70              POP      {r4-r6,pc}
;;;1038   
                          ENDP

                  Str_Char_N PROC
;;;1358   /*$PAGE*/
;;;1359   CPU_CHAR  *Str_Char_N (const  CPU_CHAR    *pstr,
000316  b530              PUSH     {r4,r5,lr}
;;;1360                                 CPU_SIZE_T   len_max,
;;;1361                                 CPU_CHAR     srch_char)
;;;1362   {
000318  4604              MOV      r4,r0
00031a  460b              MOV      r3,r1
00031c  4615              MOV      r5,r2
;;;1363       const  CPU_CHAR    *pstr_char;
;;;1364              CPU_SIZE_T   len_srch;
;;;1365   
;;;1366   
;;;1367       if (pstr == (const CPU_CHAR *)0) {                          /* Rtn NULL if srch str ptr NULL (see Note #3a1).       */
00031e  b90c              CBNZ     r4,|L1.804|
;;;1368           return ((CPU_CHAR *)0);
000320  2000              MOVS     r0,#0
                  |L1.802|
;;;1369       }
;;;1370   
;;;1371       if (len_max < 1) {                                          /* Rtn NULL if srch len = 0      (see Note #3e1).       */
;;;1372           return ((CPU_CHAR *)0);
;;;1373       }
;;;1374   
;;;1375   
;;;1376       pstr_char = pstr;
;;;1377       len_srch  = 0u;
;;;1378   
;;;1379       while (( pstr_char != (const CPU_CHAR *)  0 )      &&       /* Srch str until NULL ptr     [see Note #3b]  ...      */
;;;1380              (*pstr_char != (      CPU_CHAR  )'\0')      &&       /* ... or NULL char            (see Note #3c)  ...      */
;;;1381              (*pstr_char != (      CPU_CHAR  )srch_char) &&       /* ... or srch char found      (see Note #3d); ...      */
;;;1382              ( len_srch  <  (      CPU_SIZE_T)len_max)) {         /* ... or max nbr chars srch'd (see Note #3e).          */
;;;1383           pstr_char++;
;;;1384           len_srch++;
;;;1385       }
;;;1386   
;;;1387   
;;;1388       if (pstr_char == (const CPU_CHAR *)0) {                     /* Rtn NULL if NULL ptr found      (see Note #3b1).     */
;;;1389           return ((CPU_CHAR *)0);
;;;1390       }
;;;1391   
;;;1392       if (len_srch >= len_max) {                                  /* Rtn NULL if srch char NOT found ...                  */
;;;1393           return ((CPU_CHAR *)0);                                 /* ... within max nbr of chars     (see Note #3e1).     */
;;;1394       }
;;;1395   
;;;1396       if (*pstr_char != srch_char) {                              /* Rtn NULL if srch char NOT found (see Note #3c1).     */
;;;1397            return ((CPU_CHAR *)0);
;;;1398       }
;;;1399   
;;;1400   
;;;1401       return ((CPU_CHAR *)pstr_char);                             /* Else rtn ptr to found srch char (see Note #3d1).     */
;;;1402   }
000322  bd30              POP      {r4,r5,pc}
                  |L1.804|
000324  b90b              CBNZ     r3,|L1.810|
000326  2000              MOVS     r0,#0                 ;1372
000328  e7fb              B        |L1.802|
                  |L1.810|
00032a  4621              MOV      r1,r4                 ;1376
00032c  f04f0200          MOV      r2,#0                 ;1377
000330  e003              B        |L1.826|
                  |L1.818|
000332  f1010101          ADD      r1,r1,#1              ;1383
000336  f1020201          ADD      r2,r2,#1              ;1384
                  |L1.826|
00033a  b131              CBZ      r1,|L1.842|
00033c  7808              LDRB     r0,[r1,#0]            ;1380
00033e  b120              CBZ      r0,|L1.842|
000340  7808              LDRB     r0,[r1,#0]            ;1381
000342  42a8              CMP      r0,r5                 ;1381
000344  d001              BEQ      |L1.842|
000346  429a              CMP      r2,r3                 ;1382
000348  d3f3              BCC      |L1.818|
                  |L1.842|
00034a  b909              CBNZ     r1,|L1.848|
00034c  2000              MOVS     r0,#0                 ;1389
00034e  e7e8              B        |L1.802|
                  |L1.848|
000350  429a              CMP      r2,r3                 ;1392
000352  d301              BCC      |L1.856|
000354  2000              MOVS     r0,#0                 ;1393
000356  e7e4              B        |L1.802|
                  |L1.856|
000358  7808              LDRB     r0,[r1,#0]            ;1396
00035a  42a8              CMP      r0,r5                 ;1396
00035c  d001              BEQ      |L1.866|
00035e  2000              MOVS     r0,#0                 ;1397
000360  e7df              B        |L1.802|
                  |L1.866|
000362  4608              MOV      r0,r1                 ;1401
000364  e7dd              B        |L1.802|
;;;1403   
                          ENDP

                  Str_Char PROC
;;;1277   
;;;1278   CPU_CHAR  *Str_Char (const  CPU_CHAR  *pstr,
000366  b570              PUSH     {r4-r6,lr}
;;;1279                               CPU_CHAR   srch_char)
;;;1280   {
000368  4605              MOV      r5,r0
00036a  460c              MOV      r4,r1
;;;1281       CPU_CHAR  *pstr_rtn;
;;;1282   
;;;1283   
;;;1284       pstr_rtn = Str_Char_N(pstr,
00036c  4622              MOV      r2,r4
00036e  f04f31ff          MOV      r1,#0xffffffff
000372  4628              MOV      r0,r5
000374  f7fffffe          BL       Str_Char_N
000378  4606              MOV      r6,r0
;;;1285                             DEF_INT_CPU_U_MAX_VAL,
;;;1286                             srch_char);
;;;1287   
;;;1288       return (pstr_rtn);
00037a  4630              MOV      r0,r6
;;;1289   }
00037c  bd70              POP      {r4-r6,pc}
;;;1290   
                          ENDP

                  Str_Char_Last_N PROC
;;;1539   /*$PAGE*/
;;;1540   CPU_CHAR  *Str_Char_Last_N (const  CPU_CHAR    *pstr,
00037e  e92d43f0          PUSH     {r4-r9,lr}
;;;1541                                      CPU_SIZE_T   len_max,
;;;1542                                      CPU_CHAR     srch_char)
;;;1543   {
000382  4605              MOV      r5,r0
000384  460e              MOV      r6,r1
000386  4617              MOV      r7,r2
;;;1544       const  CPU_CHAR    *pstr_char;
;;;1545              CPU_SIZE_T   str_len_max;
;;;1546              CPU_SIZE_T   str_len;
;;;1547   
;;;1548   
;;;1549       if (pstr == (const CPU_CHAR *)0) {                          /* Rtn NULL if srch str ptr NULL (see Note #3a1).       */
000388  b915              CBNZ     r5,|L1.912|
;;;1550           return ((CPU_CHAR *)0);
00038a  2000              MOVS     r0,#0
                  |L1.908|
;;;1551       }
;;;1552   
;;;1553       if (len_max < 1) {                                          /* Rtn NULL if srch len = 0      (see Note #3e1).       */
;;;1554           return ((CPU_CHAR *)0);
;;;1555       }
;;;1556   
;;;1557   
;;;1558       pstr_char    = pstr;
;;;1559        str_len_max = len_max - sizeof((CPU_CHAR)'\0');            /* Str len adj'd for NULL char len.                     */
;;;1560        str_len     = Str_Len_N(pstr_char, str_len_max);
;;;1561       pstr_char   += str_len;
;;;1562   
;;;1563       if (pstr_char == (const CPU_CHAR *)0) {                     /* Rtn NULL if NULL ptr found        (see Note #3b1).   */
;;;1564           return ((CPU_CHAR *)0);
;;;1565       }
;;;1566   
;;;1567       while (( pstr_char != pstr) &&                              /* Srch str from end until beginning (see Note #3c) ... */
;;;1568              (*pstr_char != srch_char)) {                         /* ... until srch char found         (see Note #3d).    */
;;;1569           pstr_char--;
;;;1570       }
;;;1571   
;;;1572   
;;;1573       if (*pstr_char != srch_char) {                              /* Rtn NULL if srch char NOT found   (see Note #3c1).   */
;;;1574            return ((CPU_CHAR *)0);
;;;1575       }
;;;1576   
;;;1577   
;;;1578       return ((CPU_CHAR *)pstr_char);                             /* Else rtn ptr to found srch char   (see Note #3d1).   */
;;;1579   }
00038c  e8bd83f0          POP      {r4-r9,pc}
                  |L1.912|
000390  b90e              CBNZ     r6,|L1.918|
000392  2000              MOVS     r0,#0                 ;1554
000394  e7fa              B        |L1.908|
                  |L1.918|
000396  462c              MOV      r4,r5                 ;1558
000398  f1a60901          SUB      r9,r6,#1              ;1559
00039c  4649              MOV      r1,r9                 ;1560
00039e  4620              MOV      r0,r4                 ;1560
0003a0  f7fffffe          BL       Str_Len_N
0003a4  4680              MOV      r8,r0                 ;1560
0003a6  4444              ADD      r4,r4,r8              ;1561
0003a8  b90c              CBNZ     r4,|L1.942|
0003aa  2000              MOVS     r0,#0                 ;1564
0003ac  e7ee              B        |L1.908|
                  |L1.942|
0003ae  e001              B        |L1.948|
                  |L1.944|
0003b0  f1a40401          SUB      r4,r4,#1              ;1569
                  |L1.948|
0003b4  42ac              CMP      r4,r5                 ;1567
0003b6  d002              BEQ      |L1.958|
0003b8  7820              LDRB     r0,[r4,#0]            ;1568
0003ba  42b8              CMP      r0,r7                 ;1568
0003bc  d1f8              BNE      |L1.944|
                  |L1.958|
0003be  7820              LDRB     r0,[r4,#0]            ;1573
0003c0  42b8              CMP      r0,r7                 ;1573
0003c2  d001              BEQ      |L1.968|
0003c4  2000              MOVS     r0,#0                 ;1574
0003c6  e7e1              B        |L1.908|
                  |L1.968|
0003c8  4620              MOV      r0,r4                 ;1578
0003ca  e7df              B        |L1.908|
;;;1580   
                          ENDP

                  Str_Char_Last PROC
;;;1456   
;;;1457   CPU_CHAR  *Str_Char_Last (const  CPU_CHAR  *pstr,
0003cc  b570              PUSH     {r4-r6,lr}
;;;1458                                    CPU_CHAR   srch_char)
;;;1459   {
0003ce  4605              MOV      r5,r0
0003d0  460c              MOV      r4,r1
;;;1460       CPU_CHAR  *pstr_rtn;
;;;1461   
;;;1462   
;;;1463       pstr_rtn = Str_Char_Last_N(pstr,
0003d2  4622              MOV      r2,r4
0003d4  f04f31ff          MOV      r1,#0xffffffff
0003d8  4628              MOV      r0,r5
0003da  f7fffffe          BL       Str_Char_Last_N
0003de  4606              MOV      r6,r0
;;;1464                                  DEF_INT_CPU_U_MAX_VAL,
;;;1465                                  srch_char);
;;;1466   
;;;1467       return (pstr_rtn);
0003e0  4630              MOV      r0,r6
;;;1468   }
0003e2  bd70              POP      {r4-r6,pc}
;;;1469   
                          ENDP

                  Str_Char_Replace_N PROC
;;;1682   
;;;1683   CPU_CHAR  *Str_Char_Replace_N (CPU_CHAR    *pstr,
0003e4  b570              PUSH     {r4-r6,lr}
;;;1684                                  CPU_CHAR     char_srch,
;;;1685                                  CPU_CHAR     char_replace,
;;;1686                                  CPU_SIZE_T   len_max)
;;;1687   {
0003e6  4604              MOV      r4,r0
0003e8  460d              MOV      r5,r1
0003ea  4616              MOV      r6,r2
;;;1688       CPU_CHAR    *pstr_char;
;;;1689       CPU_SIZE_T   len;
;;;1690   
;;;1691   
;;;1692       if (pstr == (const CPU_CHAR *)0) {                          /* Rtn NULL if srch str ptr NULL (see Note #2a1).       */
0003ec  b90c              CBNZ     r4,|L1.1010|
;;;1693           return ((CPU_CHAR *)0);
0003ee  2000              MOVS     r0,#0
                  |L1.1008|
;;;1694       }
;;;1695   
;;;1696       if (len_max < 1) {                                          /* Rtn NULL if srch len = 0      (see Note #2e1).       */
;;;1697           return ((CPU_CHAR *)0);
;;;1698       }
;;;1699   
;;;1700       pstr_char = pstr;
;;;1701       len       = len_max;
;;;1702   
;;;1703       while (( pstr_char != (const CPU_CHAR *)0) &&               /* Srch str until NULL ptr     [see Note #2b]  ...      */
;;;1704              (*pstr_char !=  ASCII_CHAR_NULL   ) &&               /* ... or NULL char            (see Note #2c)  ...      */
;;;1705              ( len        >                   0)) {               /* ... or max nbr chars srch'd (see Note #2e).          */
;;;1706   
;;;1707           if (*pstr_char == char_srch) {
;;;1708               *pstr_char  = char_replace;                         /* Replace char if srch char is found.                  */
;;;1709           }
;;;1710   
;;;1711           pstr_char++;
;;;1712           len--;
;;;1713       }
;;;1714   
;;;1715       return (pstr);
;;;1716   }
0003f0  bd70              POP      {r4-r6,pc}
                  |L1.1010|
0003f2  b90b              CBNZ     r3,|L1.1016|
0003f4  2000              MOVS     r0,#0                 ;1697
0003f6  e7fb              B        |L1.1008|
                  |L1.1016|
0003f8  4621              MOV      r1,r4                 ;1700
0003fa  461a              MOV      r2,r3                 ;1701
0003fc  e007              B        |L1.1038|
                  |L1.1022|
0003fe  7808              LDRB     r0,[r1,#0]            ;1707
000400  42a8              CMP      r0,r5                 ;1707
000402  d100              BNE      |L1.1030|
000404  700e              STRB     r6,[r1,#0]            ;1708
                  |L1.1030|
000406  f1010101          ADD      r1,r1,#1              ;1711
00040a  f1a20201          SUB      r2,r2,#1              ;1712
                  |L1.1038|
00040e  b119              CBZ      r1,|L1.1048|
000410  7808              LDRB     r0,[r1,#0]            ;1704
000412  b108              CBZ      r0,|L1.1048|
000414  2a00              CMP      r2,#0                 ;1705
000416  d1f2              BNE      |L1.1022|
                  |L1.1048|
000418  4620              MOV      r0,r4                 ;1715
00041a  e7e9              B        |L1.1008|
;;;1717   
                          ENDP

                  Str_Char_Replace PROC
;;;1619   
;;;1620   CPU_CHAR  *Str_Char_Replace (CPU_CHAR  *pstr,
00041c  b5f0              PUSH     {r4-r7,lr}
;;;1621                                CPU_CHAR   char_srch,
;;;1622                                CPU_CHAR   char_replace)
;;;1623   {
00041e  4604              MOV      r4,r0
000420  460d              MOV      r5,r1
000422  4616              MOV      r6,r2
;;;1624       CPU_CHAR  *pstr_rtn;
;;;1625   
;;;1626   
;;;1627       pstr_rtn = Str_Char_Replace_N(pstr,
000424  f04f33ff          MOV      r3,#0xffffffff
000428  4632              MOV      r2,r6
00042a  4629              MOV      r1,r5
00042c  4620              MOV      r0,r4
00042e  f7fffffe          BL       Str_Char_Replace_N
000432  4607              MOV      r7,r0
;;;1628                                     char_srch,
;;;1629                                     char_replace,
;;;1630                                     DEF_INT_CPU_U_MAX_VAL);
;;;1631   
;;;1632       return (pstr_rtn);
000434  4638              MOV      r0,r7
;;;1633   }
000436  bdf0              POP      {r4-r7,pc}
;;;1634   
                          ENDP

                  Str_Str_N PROC
;;;1864   /*$PAGE*/
;;;1865   CPU_CHAR  *Str_Str_N (const  CPU_CHAR    *pstr,
000438  e92d4fff          PUSH     {r0-r11,lr}
;;;1866                         const  CPU_CHAR    *pstr_srch,
;;;1867                                CPU_SIZE_T   len_max)
;;;1868   {
00043c  4606              MOV      r6,r0
00043e  460f              MOV      r7,r1
000440  4615              MOV      r5,r2
;;;1869              CPU_SIZE_T    str_len;
;;;1870              CPU_SIZE_T    str_len_srch;
;;;1871              CPU_SIZE_T    len_max_srch;
;;;1872              CPU_SIZE_T    srch_len;
;;;1873              CPU_SIZE_T    srch_ix;
;;;1874              CPU_BOOLEAN   srch_done;
;;;1875              CPU_INT16S    srch_cmp;
;;;1876       const  CPU_CHAR     *pstr_str;
;;;1877       const  CPU_CHAR     *pstr_srch_ix;
;;;1878   
;;;1879                                                                   /* Rtn NULL if str ptr(s) NULL (see Note #3a).          */
;;;1880       if (pstr == (const CPU_CHAR *)0) {
000442  b91e              CBNZ     r6,|L1.1100|
;;;1881           return ((CPU_CHAR *)0);
000444  2000              MOVS     r0,#0
                  |L1.1094|
;;;1882       }
;;;1883       if (pstr_srch == (const CPU_CHAR *)0) {
;;;1884           return ((CPU_CHAR *)0);
;;;1885       }
;;;1886   
;;;1887       if (len_max < 1) {                                          /* Rtn NULL if srch len = 0    (see Note #3g).          */
;;;1888           return ((CPU_CHAR *)0);
;;;1889       }
;;;1890   
;;;1891                                                                   /* Lim max srch str len (to chk > str len).             */
;;;1892       len_max_srch = (len_max <       DEF_INT_CPU_U_MAX_VAL)
;;;1893                    ? (len_max + 1u) : DEF_INT_CPU_U_MAX_VAL;
;;;1894   
;;;1895       str_len      = Str_Len_N(pstr,      len_max);
;;;1896       str_len_srch = Str_Len_N(pstr_srch, len_max_srch);
;;;1897       if (str_len_srch < 1) {                                     /* Rtn ptr to str if srch str len = 0 (see Note #2b2).  */
;;;1898           return ((CPU_CHAR *)pstr);
;;;1899       }
;;;1900       if (str_len_srch > str_len) {                               /* Rtn NULL if srch str len > str len (see Note #3d).   */
;;;1901           return ((CPU_CHAR *)0);
;;;1902       }
;;;1903                                                                   /* Rtn NULL if NULL ptr found         (see Note #3b1).  */
;;;1904       pstr_str = pstr      + str_len;
;;;1905       if (pstr_str == (const CPU_CHAR *)0) {
;;;1906           return ((CPU_CHAR *)0);
;;;1907       }
;;;1908       pstr_str = pstr_srch + str_len_srch;
;;;1909       if (pstr_str == (const CPU_CHAR *)0) {
;;;1910           return ((CPU_CHAR *)0);
;;;1911       }
;;;1912   
;;;1913   
;;;1914       srch_len  = str_len - str_len_srch;                         /* Calc srch len (see Note #3e2).                       */
;;;1915       srch_ix   = 0u;
;;;1916       srch_done = DEF_NO;
;;;1917   
;;;1918       do {
;;;1919           pstr_srch_ix = (const CPU_CHAR *)(pstr + srch_ix);
;;;1920           srch_cmp     =  Str_Cmp_N(pstr_srch_ix, pstr_srch, str_len_srch);
;;;1921           srch_done    = (srch_cmp == 0) ? DEF_YES : DEF_NO;
;;;1922           srch_ix++;
;;;1923       } while ((srch_done == DEF_NO) && (srch_ix <= srch_len));
;;;1924   
;;;1925   
;;;1926       if (srch_cmp != 0) {                                        /* Rtn NULL if srch str NOT found (see Note #3e2).      */
;;;1927           return ((CPU_CHAR *)0);
;;;1928       }
;;;1929   
;;;1930       return ((CPU_CHAR *)pstr_srch_ix);                          /* Else rtn ptr to found srch str (see Note #3f1).      */
;;;1931   }
000446  b004              ADD      sp,sp,#0x10
000448  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1100|
00044c  b90f              CBNZ     r7,|L1.1106|
00044e  2000              MOVS     r0,#0                 ;1884
000450  e7f9              B        |L1.1094|
                  |L1.1106|
000452  b90d              CBNZ     r5,|L1.1112|
000454  2000              MOVS     r0,#0                 ;1888
000456  e7f6              B        |L1.1094|
                  |L1.1112|
000458  1c68              ADDS     r0,r5,#1              ;1892
00045a  d000              BEQ      |L1.1118|
00045c  e001              B        |L1.1122|
                  |L1.1118|
00045e  f04f30ff          MOV      r0,#0xffffffff        ;1893
                  |L1.1122|
000462  9003              STR      r0,[sp,#0xc]          ;1893
000464  4629              MOV      r1,r5                 ;1895
000466  4630              MOV      r0,r6                 ;1895
000468  f7fffffe          BL       Str_Len_N
00046c  4680              MOV      r8,r0                 ;1895
00046e  4638              MOV      r0,r7                 ;1896
000470  9903              LDR      r1,[sp,#0xc]          ;1896
000472  f7fffffe          BL       Str_Len_N
000476  4604              MOV      r4,r0                 ;1896
000478  b90c              CBNZ     r4,|L1.1150|
00047a  4630              MOV      r0,r6                 ;1898
00047c  e7e3              B        |L1.1094|
                  |L1.1150|
00047e  4544              CMP      r4,r8                 ;1900
000480  d901              BLS      |L1.1158|
000482  2000              MOVS     r0,#0                 ;1901
000484  e7df              B        |L1.1094|
                  |L1.1158|
000486  eb060b08          ADD      r11,r6,r8             ;1904
00048a  f1bb0f00          CMP      r11,#0                ;1905
00048e  d101              BNE      |L1.1172|
000490  2000              MOVS     r0,#0                 ;1906
000492  e7d8              B        |L1.1094|
                  |L1.1172|
000494  eb070b04          ADD      r11,r7,r4             ;1908
000498  f1bb0f00          CMP      r11,#0                ;1909
00049c  d101              BNE      |L1.1186|
00049e  2000              MOVS     r0,#0                 ;1910
0004a0  e7d1              B        |L1.1094|
                  |L1.1186|
0004a2  eba80004          SUB      r0,r8,r4              ;1914
0004a6  9002              STR      r0,[sp,#8]            ;1914
0004a8  f04f0900          MOV      r9,#0                 ;1915
0004ac  4648              MOV      r0,r9                 ;1916
0004ae  9001              STR      r0,[sp,#4]            ;1916
0004b0  bf00              NOP                            ;1918
                  |L1.1202|
0004b2  eb060009          ADD      r0,r6,r9              ;1919
0004b6  9000              STR      r0,[sp,#0]            ;1919
0004b8  4622              MOV      r2,r4                 ;1920
0004ba  4639              MOV      r1,r7                 ;1920
0004bc  9800              LDR      r0,[sp,#0]            ;1920
0004be  f7fffffe          BL       Str_Cmp_N
0004c2  4682              MOV      r10,r0                ;1920
0004c4  f1ba0f00          CMP      r10,#0                ;1921
0004c8  d102              BNE      |L1.1232|
0004ca  f04f0001          MOV      r0,#1                 ;1921
0004ce  e001              B        |L1.1236|
                  |L1.1232|
0004d0  f04f0000          MOV      r0,#0                 ;1921
                  |L1.1236|
0004d4  9001              STR      r0,[sp,#4]            ;1921
0004d6  f1090901          ADD      r9,r9,#1              ;1922
0004da  9801              LDR      r0,[sp,#4]            ;1923
0004dc  b910              CBNZ     r0,|L1.1252|
0004de  9802              LDR      r0,[sp,#8]            ;1923
0004e0  4581              CMP      r9,r0                 ;1923
0004e2  d9e6              BLS      |L1.1202|
                  |L1.1252|
0004e4  f1ba0f00          CMP      r10,#0                ;1926
0004e8  d001              BEQ      |L1.1262|
0004ea  2000              MOVS     r0,#0                 ;1927
0004ec  e7ab              B        |L1.1094|
                  |L1.1262|
0004ee  9800              LDR      r0,[sp,#0]            ;1930
0004f0  e7a9              B        |L1.1094|
;;;1932   
                          ENDP

                  Str_Str PROC
;;;1779   
;;;1780   CPU_CHAR  *Str_Str (const  CPU_CHAR  *pstr,
0004f2  b570              PUSH     {r4-r6,lr}
;;;1781                       const  CPU_CHAR  *pstr_srch)
;;;1782   {
0004f4  4604              MOV      r4,r0
0004f6  460d              MOV      r5,r1
;;;1783       CPU_CHAR  *pstr_rtn;
;;;1784   
;;;1785   
;;;1786       pstr_rtn = Str_Str_N(pstr,
0004f8  f04f32ff          MOV      r2,#0xffffffff
0004fc  4629              MOV      r1,r5
0004fe  4620              MOV      r0,r4
000500  f7fffffe          BL       Str_Str_N
000504  4606              MOV      r6,r0
;;;1787                            pstr_srch,
;;;1788                            DEF_INT_CPU_U_MAX_VAL);
;;;1789   
;;;1790       return (pstr_rtn);
000506  4630              MOV      r0,r6
;;;1791   }
000508  bd70              POP      {r4-r6,pc}
;;;1792   
                          ENDP

                  Str_FmtNbr_Int32 PROC
;;;3471   
;;;3472   static  CPU_CHAR  *Str_FmtNbr_Int32 (CPU_INT32U    nbr,
00050a  e92d4fff          PUSH     {r0-r11,lr}
;;;3473                                        CPU_INT08U    nbr_dig,
;;;3474                                        CPU_INT08U    nbr_base,
;;;3475                                        CPU_BOOLEAN   nbr_neg,
;;;3476                                        CPU_CHAR      lead_char,
;;;3477                                        CPU_BOOLEAN   lower_case,
;;;3478                                        CPU_BOOLEAN   nul,
;;;3479                                        CPU_CHAR     *pstr)
;;;3480   {
00050e  b08d              SUB      sp,sp,#0x34
000510  460f              MOV      r7,r1
000512  4615              MOV      r5,r2
000514  9e1a              LDR      r6,[sp,#0x68]
;;;3481       CPU_CHAR     *pstr_fmt;
;;;3482       CPU_DATA      i;
;;;3483       CPU_INT32U    nbr_fmt;
;;;3484       CPU_INT32U    nbr_log;
;;;3485       CPU_INT08U    nbr_dig_max;
;;;3486       CPU_INT08U    nbr_dig_min;
;;;3487       CPU_INT08U    nbr_dig_fmtd;
;;;3488       CPU_INT08U    nbr_neg_sign;
;;;3489       CPU_INT08U    nbr_lead_char;
;;;3490       CPU_INT08U    dig_val;
;;;3491       CPU_INT08U    lead_char_delta_0;
;;;3492       CPU_INT08U    lead_char_delta_a;
;;;3493       CPU_BOOLEAN   lead_char_dig;
;;;3494       CPU_BOOLEAN   lead_char_0;
;;;3495       CPU_BOOLEAN   fmt_invalid;
;;;3496       CPU_BOOLEAN   print_char;
;;;3497       CPU_BOOLEAN   nbr_neg_fmtd;
;;;3498   
;;;3499   
;;;3500   /*$PAGE*/
;;;3501                                                                   /* ---------------- VALIDATE FMT ARGS ----------------- */
;;;3502       if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if str ptr NULL (see Note #6a).             */
000516  981d              LDR      r0,[sp,#0x74]
000518  b918              CBNZ     r0,|L1.1314|
;;;3503           return ((CPU_CHAR *)0);
00051a  2000              MOVS     r0,#0
                  |L1.1308|
;;;3504       }
;;;3505   
;;;3506       fmt_invalid = DEF_NO;
;;;3507   
;;;3508       if (nbr_dig < 1) {                                          /* If nbr digs = 0, ...                                 */
;;;3509           fmt_invalid = DEF_YES;                                  /* ... fmt invalid str (see Note #6b).                  */
;;;3510       }
;;;3511                                                                   /* If invalid base, ...                                 */
;;;3512       if ((nbr_base <  2u) ||
;;;3513           (nbr_base > 36u)) {
;;;3514           fmt_invalid = DEF_YES;                                  /* ... fmt invalid str (see Note #6d).                  */
;;;3515       }
;;;3516   
;;;3517       if (lead_char != (CPU_CHAR)'\0') {
;;;3518           print_char =  ASCII_IsPrint(lead_char);
;;;3519           if (print_char != DEF_YES) {                            /* If lead char non-printable (see Note #3a1), ...      */
;;;3520               fmt_invalid = DEF_YES;                              /* ... fmt invalid str        (see Note #6e).           */
;;;3521   
;;;3522           } else if (lead_char != '0') {                          /* Chk lead char for non-0 nbr base dig.                */
;;;3523               lead_char_delta_0 = (CPU_INT08U)(lead_char - '0');
;;;3524               if (lower_case != DEF_YES) {
;;;3525                   lead_char_delta_a = (CPU_INT08U)(lead_char - 'A');
;;;3526               } else {
;;;3527                   lead_char_delta_a = (CPU_INT08U)(lead_char - 'a');
;;;3528               }
;;;3529   
;;;3530               lead_char_dig = (((nbr_base <= 10u) &&  (lead_char_delta_0 <  nbr_base))      ||
;;;3531                                ((nbr_base >  10u) && ((lead_char_delta_0 <             10u) ||
;;;3532                                                       (lead_char_delta_a < (nbr_base - 10u))))) ? DEF_YES : DEF_NO;
;;;3533   
;;;3534               if (lead_char_dig == DEF_YES) {                     /* If lead char non-0 nbr base dig (see Note #3a2A), ...*/
;;;3535                   fmt_invalid = DEF_YES;                          /* ... fmt invalid str             (see Note #6e).      */
;;;3536               }
;;;3537           }
;;;3538       }
;;;3539   
;;;3540   
;;;3541                                                                   /* ----------------- PREPARE NBR FMT ------------------ */
;;;3542       pstr_fmt = pstr;
;;;3543   
;;;3544       if (fmt_invalid == DEF_NO) {
;;;3545           nbr_fmt     = nbr;
;;;3546           nbr_log     = nbr;
;;;3547           nbr_dig_max = 1u;
;;;3548           while (nbr_log >= nbr_base) {                           /* While nbr base digs avail, ...                       */
;;;3549               nbr_dig_max++;                                      /* ... calc max nbr digs.                               */
;;;3550               nbr_log /= nbr_base;
;;;3551           }
;;;3552   
;;;3553           nbr_neg_sign = (nbr_neg == DEF_YES) ? 1u : 0u;
;;;3554           if (nbr_dig >= (nbr_dig_max + nbr_neg_sign)) {          /* If req'd nbr digs >= (max nbr digs + neg sign), ...  */
;;;3555               nbr_neg_fmtd = DEF_NO;
;;;3556               nbr_dig_min  = DEF_MIN(nbr_dig_max, nbr_dig);
;;;3557                                                                   /* ... calc nbr digs to fmt & nbr lead chars.           */
;;;3558               if (lead_char != (CPU_CHAR)'\0') {
;;;3559                   nbr_dig_fmtd  = nbr_dig;
;;;3560                   nbr_lead_char = nbr_dig     -
;;;3561                                   nbr_dig_min - nbr_neg_sign;
;;;3562               } else {
;;;3563                   nbr_dig_fmtd  = nbr_dig_min + nbr_neg_sign;
;;;3564                   nbr_lead_char = 0u;
;;;3565               }
;;;3566   
;;;3567               if (nbr_lead_char > 0) {                            /* If lead chars to fmt, ...                            */
;;;3568                   lead_char_0 = (lead_char == '0')                /* ... chk if lead char a '0' dig (see Note #3a2B).     */
;;;3569                               ?  DEF_YES : DEF_NO;
;;;3570               } else {
;;;3571                   lead_char_0 =  DEF_NO;
;;;3572               }
;;;3573   
;;;3574           } else {                                                /* Else if nbr trunc'd, ...                             */
;;;3575               fmt_invalid = DEF_YES;                              /* ... fmt invalid str (see Note #6c).                  */
;;;3576           }
;;;3577       }
;;;3578   
;;;3579       if (fmt_invalid != DEF_NO) {
;;;3580           nbr_dig_fmtd = nbr_dig;
;;;3581       }
;;;3582   
;;;3583   
;;;3584   /*$PAGE*/
;;;3585                                                                   /* ------------------- FMT NBR STR -------------------- */
;;;3586       pstr_fmt += nbr_dig_fmtd;                                   /* Start fmt @ least-sig dig.                           */
;;;3587   
;;;3588       if (nul != DEF_NO) {                                        /* If NOT DISABLED, append NULL char (see Note #4).     */
;;;3589          *pstr_fmt = (CPU_CHAR)'\0';
;;;3590       }
;;;3591       pstr_fmt--;
;;;3592   
;;;3593   
;;;3594       for (i = 0u; i < nbr_dig_fmtd; i++) {                       /* Fmt str for desired nbr digs :                       */
;;;3595           if (fmt_invalid == DEF_NO) {
;;;3596               if ((nbr_fmt > 0) ||                                /* If fmt nbr > 0                               ...     */
;;;3597                   (i == 0u)) {                                    /* ... OR on one's  dig to fmt (see Note #3c1), ...     */
;;;3598                                                                   /* ... calc & fmt dig val;                      ...     */
;;;3599                   dig_val = (CPU_INT08U)(nbr_fmt % nbr_base);
;;;3600                   if (dig_val < 10u) {
;;;3601                      *pstr_fmt-- = (CPU_CHAR)(dig_val + '0');
;;;3602                   } else {
;;;3603                       if (lower_case !=  DEF_YES) {
;;;3604                          *pstr_fmt--  = (CPU_CHAR)((dig_val - 10u) + 'A');
;;;3605                       } else {
;;;3606                          *pstr_fmt--  = (CPU_CHAR)((dig_val - 10u) + 'a');
;;;3607                       }
;;;3608                   }
;;;3609   
;;;3610                   nbr_fmt /= nbr_base;                            /* Shift to next more-sig dig.                          */
;;;3611   
;;;3612               } else if ((nbr_neg      == DEF_YES)  &&            /* ... else if nbr neg             AND          ...     */
;;;3613                        (((lead_char_0  == DEF_NO )  &&            /* ... lead char NOT a '0' dig                  ...     */
;;;3614                          (nbr_neg_fmtd == DEF_NO )) ||            /* ... but neg sign NOT yet fmt'd  OR           ...     */
;;;3615                         ((lead_char_0  != DEF_NO )  &&            /* ... lead char is  a '0' dig                  ...     */
;;;3616                          (i == (nbr_dig_fmtd - 1u))))) {          /* ... & on most-sig dig to fmt,                ...     */
;;;3617   
;;;3618                  *pstr_fmt--   = '-';                             /* ... prepend neg sign (see Note #3b);         ...     */
;;;3619                   nbr_neg_fmtd = DEF_YES;
;;;3620   
;;;3621               } else if (lead_char != (CPU_CHAR)'\0') {           /* ... else if avail,                           ...     */
;;;3622                  *pstr_fmt-- = lead_char;                         /* ... fmt lead char.                                   */
;;;3623               }
;;;3624   
;;;3625           } else {                                                /* Else fmt '?' for invalid str (see Note #7).          */
;;;3626              *pstr_fmt-- = '?';
;;;3627           }
;;;3628       }
;;;3629   
;;;3630   
;;;3631       if (fmt_invalid != DEF_NO) {                                /* Rtn NULL for invalid str fmt (see Notes #6a - #6e).  */
;;;3632           return ((CPU_CHAR *)0);
;;;3633       }
;;;3634   
;;;3635   
;;;3636       return (pstr);                                              /* Rtn ptr to fmt'd str (see Note #6f).                 */
;;;3637   }
00051c  b011              ADD      sp,sp,#0x44
00051e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1314|
000522  f04f0000          MOV      r0,#0                 ;3506
000526  9003              STR      r0,[sp,#0xc]          ;3506
000528  2f01              CMP      r7,#1                 ;3508
00052a  da02              BGE      |L1.1330|
00052c  f04f0001          MOV      r0,#1                 ;3509
000530  9003              STR      r0,[sp,#0xc]          ;3509
                  |L1.1330|
000532  2d02              CMP      r5,#2                 ;3512
000534  d301              BCC      |L1.1338|
000536  2d24              CMP      r5,#0x24              ;3513
000538  d902              BLS      |L1.1344|
                  |L1.1338|
00053a  f04f0001          MOV      r0,#1                 ;3514
00053e  9003              STR      r0,[sp,#0xc]          ;3514
                  |L1.1344|
000540  b3ae              CBZ      r6,|L1.1454|
000542  4630              MOV      r0,r6                 ;3518
000544  f7fffffe          BL       ASCII_IsPrint
000548  9002              STR      r0,[sp,#8]            ;3518
00054a  9802              LDR      r0,[sp,#8]            ;3519
00054c  2801              CMP      r0,#1                 ;3519
00054e  d003              BEQ      |L1.1368|
000550  f04f0001          MOV      r0,#1                 ;3520
000554  9003              STR      r0,[sp,#0xc]          ;3520
000556  e02a              B        |L1.1454|
                  |L1.1368|
000558  2e30              CMP      r6,#0x30              ;3522
00055a  d028              BEQ      |L1.1454|
00055c  f1a60030          SUB      r0,r6,#0x30           ;3523
000560  b2c0              UXTB     r0,r0                 ;3523
000562  9007              STR      r0,[sp,#0x1c]         ;3523
000564  981b              LDR      r0,[sp,#0x6c]         ;3524
000566  2801              CMP      r0,#1                 ;3524
000568  d004              BEQ      |L1.1396|
00056a  f1a60041          SUB      r0,r6,#0x41           ;3525
00056e  b2c0              UXTB     r0,r0                 ;3525
000570  9006              STR      r0,[sp,#0x18]         ;3525
000572  e003              B        |L1.1404|
                  |L1.1396|
000574  f1a60061          SUB      r0,r6,#0x61           ;3527
000578  b2c0              UXTB     r0,r0                 ;3527
00057a  9006              STR      r0,[sp,#0x18]         ;3527
                  |L1.1404|
00057c  2d0a              CMP      r5,#0xa               ;3530
00057e  d802              BHI      |L1.1414|
000580  9807              LDR      r0,[sp,#0x1c]         ;3530
000582  42a8              CMP      r0,r5                 ;3530
000584  db09              BLT      |L1.1434|
                  |L1.1414|
000586  2d0a              CMP      r5,#0xa               ;3531
000588  d90a              BLS      |L1.1440|
00058a  9807              LDR      r0,[sp,#0x1c]         ;3531
00058c  280a              CMP      r0,#0xa               ;3531
00058e  d304              BCC      |L1.1434|
000590  f1a5000a          SUB      r0,r5,#0xa            ;3532
000594  9906              LDR      r1,[sp,#0x18]         ;3532
000596  4288              CMP      r0,r1                 ;3532
000598  d902              BLS      |L1.1440|
                  |L1.1434|
00059a  f04f0001          MOV      r0,#1                 ;3532
00059e  e001              B        |L1.1444|
                  |L1.1440|
0005a0  f04f0000          MOV      r0,#0                 ;3532
                  |L1.1444|
0005a4  9005              STR      r0,[sp,#0x14]         ;3532
0005a6  9805              LDR      r0,[sp,#0x14]         ;3534
0005a8  2801              CMP      r0,#1                 ;3534
0005aa  d100              BNE      |L1.1454|
0005ac  9003              STR      r0,[sp,#0xc]          ;3535
                  |L1.1454|
0005ae  9c1d              LDR      r4,[sp,#0x74]         ;3542
0005b0  9803              LDR      r0,[sp,#0xc]          ;3544
0005b2  2800              CMP      r0,#0                 ;3544
0005b4  d151              BNE      |L1.1626|
0005b6  f8dda034          LDR      r10,[sp,#0x34]        ;3545
0005ba  f8dda034          LDR      r10,[sp,#0x34]        ;3546
0005be  f8cda030          STR      r10,[sp,#0x30]        ;3546
0005c2  f04f0001          MOV      r0,#1                 ;3547
0005c6  900b              STR      r0,[sp,#0x2c]         ;3547
0005c8  e008              B        |L1.1500|
                  |L1.1482|
0005ca  980b              LDR      r0,[sp,#0x2c]         ;3549
0005cc  f1000001          ADD      r0,r0,#1              ;3549
0005d0  b2c0              UXTB     r0,r0                 ;3549
0005d2  900b              STR      r0,[sp,#0x2c]         ;3549
0005d4  980c              LDR      r0,[sp,#0x30]         ;3550
0005d6  fbb0f0f5          UDIV     r0,r0,r5              ;3550
0005da  900c              STR      r0,[sp,#0x30]         ;3550
                  |L1.1500|
0005dc  980c              LDR      r0,[sp,#0x30]         ;3548
0005de  42a8              CMP      r0,r5                 ;3548
0005e0  d2f3              BCS      |L1.1482|
0005e2  9810              LDR      r0,[sp,#0x40]         ;3553
0005e4  2801              CMP      r0,#1                 ;3553
0005e6  d100              BNE      |L1.1514|
0005e8  e001              B        |L1.1518|
                  |L1.1514|
0005ea  f04f0000          MOV      r0,#0                 ;3553
                  |L1.1518|
0005ee  9009              STR      r0,[sp,#0x24]         ;3553
0005f0  990b              LDR      r1,[sp,#0x2c]         ;3554
0005f2  9809              LDR      r0,[sp,#0x24]         ;3554
0005f4  4408              ADD      r0,r0,r1              ;3554
0005f6  42b8              CMP      r0,r7                 ;3554
0005f8  dc2c              BGT      |L1.1620|
0005fa  f04f0000          MOV      r0,#0                 ;3555
0005fe  9001              STR      r0,[sp,#4]            ;3555
000600  980b              LDR      r0,[sp,#0x2c]         ;3556
000602  42b8              CMP      r0,r7                 ;3556
000604  da01              BGE      |L1.1546|
000606  980b              LDR      r0,[sp,#0x2c]         ;3556
000608  e000              B        |L1.1548|
                  |L1.1546|
00060a  4638              MOV      r0,r7                 ;3556
                  |L1.1548|
00060c  900a              STR      r0,[sp,#0x28]         ;3556
00060e  b14e              CBZ      r6,|L1.1572|
000610  46b8              MOV      r8,r7                 ;3559
000612  980a              LDR      r0,[sp,#0x28]         ;3560
000614  eba70100          SUB      r1,r7,r0              ;3560
000618  9809              LDR      r0,[sp,#0x24]         ;3560
00061a  eba10000          SUB      r0,r1,r0              ;3560
00061e  b2c0              UXTB     r0,r0                 ;3560
000620  9008              STR      r0,[sp,#0x20]         ;3560
000622  e007              B        |L1.1588|
                  |L1.1572|
000624  e9dd1009          LDRD     r1,r0,[sp,#0x24]      ;3563
000628  4408              ADD      r0,r0,r1              ;3563
00062a  f00008ff          AND      r8,r0,#0xff           ;3563
00062e  f04f0000          MOV      r0,#0                 ;3564
000632  9008              STR      r0,[sp,#0x20]         ;3564
                  |L1.1588|
000634  9808              LDR      r0,[sp,#0x20]         ;3567
000636  2800              CMP      r0,#0                 ;3567
000638  dd08              BLE      |L1.1612|
00063a  2e30              CMP      r6,#0x30              ;3568
00063c  d102              BNE      |L1.1604|
00063e  f04f0001          MOV      r0,#1                 ;3569
000642  e001              B        |L1.1608|
                  |L1.1604|
000644  f04f0000          MOV      r0,#0                 ;3569
                  |L1.1608|
000648  9004              STR      r0,[sp,#0x10]         ;3569
00064a  e006              B        |L1.1626|
                  |L1.1612|
00064c  f04f0000          MOV      r0,#0                 ;3571
000650  9004              STR      r0,[sp,#0x10]         ;3571
000652  e002              B        |L1.1626|
                  |L1.1620|
000654  f04f0001          MOV      r0,#1                 ;3575
000658  9003              STR      r0,[sp,#0xc]          ;3575
                  |L1.1626|
00065a  9803              LDR      r0,[sp,#0xc]          ;3579
00065c  b100              CBZ      r0,|L1.1632|
00065e  46b8              MOV      r8,r7                 ;3580
                  |L1.1632|
000660  4444              ADD      r4,r4,r8              ;3586
000662  981c              LDR      r0,[sp,#0x70]         ;3588
000664  b110              CBZ      r0,|L1.1644|
000666  f04f0000          MOV      r0,#0                 ;3589
00066a  7020              STRB     r0,[r4,#0]            ;3589
                  |L1.1644|
00066c  f1a40401          SUB      r4,r4,#1              ;3591
000670  f04f0900          MOV      r9,#0                 ;3594
000674  e044              B        |L1.1792|
                  |L1.1654|
000676  9803              LDR      r0,[sp,#0xc]          ;3595
000678  bbb8              CBNZ     r0,|L1.1770|
00067a  f1ba0f00          CMP      r10,#0                ;3596
00067e  d102              BNE      |L1.1670|
000680  f1b90f00          CMP      r9,#0                 ;3597
000684  d11c              BNE      |L1.1728|
                  |L1.1670|
000686  fbbaf0f5          UDIV     r0,r10,r5             ;3599
00068a  fb05a010          MLS      r0,r5,r0,r10          ;3599
00068e  f0000bff          AND      r11,r0,#0xff          ;3599
000692  f1bb0f0a          CMP      r11,#0xa              ;3600
000696  d204              BCS      |L1.1698|
000698  f10b0030          ADD      r0,r11,#0x30          ;3601
00069c  f8040901          STRB     r0,[r4],#-1           ;3601
0006a0  e00b              B        |L1.1722|
                  |L1.1698|
0006a2  981b              LDR      r0,[sp,#0x6c]         ;3603
0006a4  2801              CMP      r0,#1                 ;3603
0006a6  d004              BEQ      |L1.1714|
0006a8  f10b0037          ADD      r0,r11,#0x37          ;3604
0006ac  f8040901          STRB     r0,[r4],#-1           ;3604
0006b0  e003              B        |L1.1722|
                  |L1.1714|
0006b2  f10b0057          ADD      r0,r11,#0x57          ;3606
0006b6  f8040901          STRB     r0,[r4],#-1           ;3606
                  |L1.1722|
0006ba  fbbafaf5          UDIV     r10,r10,r5            ;3610
0006be  e01d              B        |L1.1788|
                  |L1.1728|
0006c0  9810              LDR      r0,[sp,#0x40]         ;3612
0006c2  2801              CMP      r0,#1                 ;3612
0006c4  d112              BNE      |L1.1772|
0006c6  9804              LDR      r0,[sp,#0x10]         ;3613
0006c8  b908              CBNZ     r0,|L1.1742|
0006ca  9801              LDR      r0,[sp,#4]            ;3614
0006cc  b128              CBZ      r0,|L1.1754|
                  |L1.1742|
0006ce  9804              LDR      r0,[sp,#0x10]         ;3615
0006d0  b160              CBZ      r0,|L1.1772|
0006d2  f1a80001          SUB      r0,r8,#1              ;3616
0006d6  4548              CMP      r0,r9                 ;3616
0006d8  d108              BNE      |L1.1772|
                  |L1.1754|
0006da  f04f002d          MOV      r0,#0x2d              ;3618
0006de  f8040901          STRB     r0,[r4],#-1           ;3618
0006e2  f04f0001          MOV      r0,#1                 ;3619
0006e6  9001              STR      r0,[sp,#4]            ;3619
0006e8  e008              B        |L1.1788|
                  |L1.1770|
0006ea  e003              B        |L1.1780|
                  |L1.1772|
0006ec  b136              CBZ      r6,|L1.1788|
0006ee  f8046901          STRB     r6,[r4],#-1           ;3622
0006f2  e003              B        |L1.1788|
                  |L1.1780|
0006f4  f04f003f          MOV      r0,#0x3f              ;3626
0006f8  f8040901          STRB     r0,[r4],#-1           ;3626
                  |L1.1788|
0006fc  f1090901          ADD      r9,r9,#1              ;3594
                  |L1.1792|
000700  45c1              CMP      r9,r8                 ;3594
000702  d3b8              BCC      |L1.1654|
000704  9803              LDR      r0,[sp,#0xc]          ;3631
000706  b108              CBZ      r0,|L1.1804|
000708  2000              MOVS     r0,#0                 ;3632
00070a  e707              B        |L1.1308|
                  |L1.1804|
00070c  981d              LDR      r0,[sp,#0x74]         ;3636
00070e  e705              B        |L1.1308|
;;;3638   
                          ENDP

                  Str_FmtNbr_Int32U PROC
;;;2058   
;;;2059   CPU_CHAR  *Str_FmtNbr_Int32U (CPU_INT32U    nbr,
000710  e92d5fff          PUSH     {r0-r12,lr}
;;;2060                                 CPU_INT08U    nbr_dig,
;;;2061                                 CPU_INT08U    nbr_base,
;;;2062                                 CPU_CHAR      lead_char,
;;;2063                                 CPU_BOOLEAN   lower_case,
;;;2064                                 CPU_BOOLEAN   nul,
;;;2065                                 CPU_CHAR     *pstr)
;;;2066   {
000714  4605              MOV      r5,r0
000716  460e              MOV      r6,r1
000718  4617              MOV      r7,r2
00071a  461c              MOV      r4,r3
00071c  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
000720  f8dd8038          LDR      r8,[sp,#0x38]
;;;2067       CPU_CHAR  *pstr_fmt;
;;;2068   
;;;2069   
;;;2070       pstr_fmt = Str_FmtNbr_Int32(nbr,                            /* Fmt unsigned int into str.                           */
000724  f04f0300          MOV      r3,#0
000728  463a              MOV      r2,r7
00072a  4631              MOV      r1,r6
00072c  4628              MOV      r0,r5
00072e  e88d0710          STM      sp,{r4,r8-r10}
000732  f7fffffe          BL       Str_FmtNbr_Int32
000736  4683              MOV      r11,r0
;;;2071                                   nbr_dig,
;;;2072                                   nbr_base,
;;;2073                                   DEF_NO,
;;;2074                                   lead_char,
;;;2075                                   lower_case,
;;;2076                                   nul,
;;;2077                                   pstr);
;;;2078   
;;;2079       return (pstr_fmt);
000738  4658              MOV      r0,r11
;;;2080   }
00073a  b004              ADD      sp,sp,#0x10
00073c  e8bd9ff0          POP      {r4-r12,pc}
;;;2081   
                          ENDP

                  Str_FmtNbr_Int32S PROC
;;;2275   
;;;2276   CPU_CHAR  *Str_FmtNbr_Int32S (CPU_INT32S    nbr,
000740  e92d4fff          PUSH     {r0-r11,lr}
;;;2277                                 CPU_INT08U    nbr_dig,
;;;2278                                 CPU_INT08U    nbr_base,
;;;2279                                 CPU_CHAR      lead_char,
;;;2280                                 CPU_BOOLEAN   lower_case,
;;;2281                                 CPU_BOOLEAN   nul,
;;;2282                                 CPU_CHAR     *pstr)
;;;2283   {
000744  b085              SUB      sp,sp,#0x14
000746  4604              MOV      r4,r0
000748  4689              MOV      r9,r1
00074a  461f              MOV      r7,r3
00074c  e9ddab13          LDRD     r10,r11,[sp,#0x4c]
;;;2284       CPU_CHAR     *pstr_fmt;
;;;2285       CPU_INT32S    nbr_fmt;
;;;2286       CPU_BOOLEAN   nbr_neg;
;;;2287   
;;;2288   
;;;2289       if (nbr < 0) {                                              /* If nbr neg, ...                                      */
000750  2c00              CMP      r4,#0
000752  da04              BGE      |L1.1886|
;;;2290           nbr_fmt = -nbr;                                         /* ... negate nbr.                                      */
000754  f1c40500          RSB      r5,r4,#0
;;;2291           nbr_neg =  DEF_YES;
000758  f04f0601          MOV      r6,#1
00075c  e002              B        |L1.1892|
                  |L1.1886|
;;;2292       } else {
;;;2293           nbr_fmt =  nbr;
00075e  4625              MOV      r5,r4
;;;2294           nbr_neg =  DEF_NO;
000760  f04f0600          MOV      r6,#0
                  |L1.1892|
;;;2295       }
;;;2296   
;;;2297       pstr_fmt = Str_FmtNbr_Int32((CPU_INT32U)nbr_fmt,            /* Fmt signed int into str.                             */
000764  9812              LDR      r0,[sp,#0x48]
000766  4633              MOV      r3,r6
000768  e9cdab02          STRD     r10,r11,[sp,#8]
00076c  e9cd7000          STRD     r7,r0,[sp,#0]
000770  4649              MOV      r1,r9
000772  4628              MOV      r0,r5
000774  9a07              LDR      r2,[sp,#0x1c]
000776  f7fffffe          BL       Str_FmtNbr_Int32
00077a  4680              MOV      r8,r0
;;;2298                                               nbr_dig,
;;;2299                                               nbr_base,
;;;2300                                               nbr_neg,
;;;2301                                               lead_char,
;;;2302                                               lower_case,
;;;2303                                               nul,
;;;2304                                               pstr);
;;;2305   
;;;2306       return (pstr_fmt);
00077c  4640              MOV      r0,r8
;;;2307   }
00077e  b009              ADD      sp,sp,#0x24
000780  e8bd8ff0          POP      {r4-r11,pc}
;;;2308   
                          ENDP

                  Str_ParseNbr_Int32 PROC
;;;3866   /*$PAGE*/
;;;3867   static  CPU_INT32U  Str_ParseNbr_Int32 (const  CPU_CHAR      *pstr,
000784  e92d4fff          PUSH     {r0-r11,lr}
;;;3868                                                  CPU_CHAR     **pstr_next,
;;;3869                                                  CPU_INT08U     nbr_base,
;;;3870                                                  CPU_BOOLEAN    nbr_signed,
;;;3871                                                  CPU_BOOLEAN   *pnbr_neg)
;;;3872   {
000788  b08b              SUB      sp,sp,#0x2c
00078a  4606              MOV      r6,r0
00078c  4689              MOV      r9,r1
00078e  4615              MOV      r5,r2
;;;3873       const  CPU_CHAR     *pstr_parse;
;;;3874       const  CPU_CHAR     *pstr_parse_nbr;
;;;3875              CPU_CHAR     *pstr_parse_unused;
;;;3876              CPU_CHAR      parse_char;
;;;3877              CPU_INT08U    parse_dig;
;;;3878              CPU_INT32U    nbr;
;;;3879              CPU_BOOLEAN   nbr_neg_unused;
;;;3880              CPU_BOOLEAN   nbr_dig;
;;;3881              CPU_BOOLEAN   nbr_alpha;
;;;3882              CPU_BOOLEAN   nbr_hex;
;;;3883              CPU_BOOLEAN   nbr_hex_lower;
;;;3884              CPU_BOOLEAN   whitespace;
;;;3885              CPU_BOOLEAN   neg;
;;;3886              CPU_BOOLEAN   ovf;
;;;3887              CPU_BOOLEAN   done;
;;;3888   
;;;3889                                                                   /* --------------- VALIDATE PARSE ARGS ---------------- */
;;;3890       if (pstr_next == (CPU_CHAR **) 0) {                         /* If NOT avail, ...                                    */
000790  f1b90f00          CMP      r9,#0
000794  d102              BNE      |L1.1948|
;;;3891           pstr_next  = (CPU_CHAR **)&pstr_parse_unused;           /* ... re-cfg NULL rtn ptr to unused local var.         */
000796  f10d0924          ADD      r9,sp,#0x24
;;;3892          (void)&pstr_parse_unused;                                /* Prevent possible 'variable unused' warning.          */
00079a  bf00              NOP      
                  |L1.1948|
;;;3893       }
;;;3894      *pstr_next = (CPU_CHAR *)pstr;                               /* Init rtn str for err (see Note #5).                  */
00079c  f8c96000          STR      r6,[r9,#0]
;;;3895   
;;;3896       if (pnbr_neg == (CPU_BOOLEAN *) 0) {                        /* If NOT avail, ...                                    */
0007a0  9818              LDR      r0,[sp,#0x60]
0007a2  b910              CBNZ     r0,|L1.1962|
;;;3897           pnbr_neg  = (CPU_BOOLEAN *)&nbr_neg_unused;             /* ... re-cfg NULL rtn ptr to unused local var.         */
0007a4  a807              ADD      r0,sp,#0x1c
0007a6  9018              STR      r0,[sp,#0x60]
;;;3898          (void)&nbr_neg_unused;                                   /* Prevent possible 'variable unused' warning.          */
0007a8  bf00              NOP      
                  |L1.1962|
;;;3899       }
;;;3900      *pnbr_neg = DEF_NO;                                          /* Init nbr neg for err (see Note #5).                  */
0007aa  f04f0100          MOV      r1,#0
0007ae  9818              LDR      r0,[sp,#0x60]
0007b0  7001              STRB     r1,[r0,#0]
;;;3901   
;;;3902   
;;;3903       if (pstr == (CPU_CHAR *)0) {                                /* Rtn zero if str ptr NULL (see Note #4b1).            */
0007b2  b91e              CBNZ     r6,|L1.1980|
;;;3904           return (0u);
0007b4  2000              MOVS     r0,#0
                  |L1.1974|
;;;3905       }
;;;3906                                                                   /* Rtn zero if invalid base (see Note #4a).             */
;;;3907       if ((nbr_base == 1u) ||
;;;3908           (nbr_base > 36u)) {
;;;3909           return (0u);
;;;3910       }
;;;3911   
;;;3912   
;;;3913                                                                   /* ------------- IGNORE PRECEDING CHAR(S) ------------- */
;;;3914       pstr_parse = pstr;                                          /* Save ptr to init'l str for err (see Note #2a2A2).    */
;;;3915   
;;;3916       whitespace = ASCII_IsSpace(*pstr_parse);
;;;3917       while (whitespace == DEF_YES) {                             /* Ignore initial white-space char(s) [see Note #2a1A]. */
;;;3918           pstr_parse++;
;;;3919           whitespace = ASCII_IsSpace(*pstr_parse);
;;;3920       }
;;;3921   
;;;3922       switch (*pstr_parse) {
;;;3923           case '+':                                               /* Ignore   pos sign (see Note #2a1B2).                 */
;;;3924                pstr_parse++;
;;;3925                neg = DEF_NO;
;;;3926                break;
;;;3927   
;;;3928   
;;;3929           case '-':                                               /* Validate neg sign (see Note #2a1B2a).                */
;;;3930                if (nbr_signed == DEF_YES) {
;;;3931                    pstr_parse++;
;;;3932                }
;;;3933                neg = DEF_YES;
;;;3934                break;
;;;3935   
;;;3936   
;;;3937           default:
;;;3938                neg = DEF_NO;
;;;3939                break;
;;;3940       }
;;;3941   
;;;3942   
;;;3943   /*$PAGE*/
;;;3944                                                                   /* --------- IGNORE NBR BASE PRECEDING CHAR(S) -------- */
;;;3945       pstr_parse_nbr = pstr_parse;                                /* Save ptr to str's nbr (see Note #2a1A1).             */
;;;3946   
;;;3947       switch (nbr_base) {
;;;3948           case  0u:                                               /* Determine unspecified nbr base (see Notes #2a1B1a).  */
;;;3949                if (*pstr_parse == '0') {                          /* If avail, ...                                        */
;;;3950                     pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2).        */
;;;3951                     switch (*pstr_parse) {
;;;3952                         case 'x':                                 /* For '0x' prefix, ...                                 */
;;;3953                         case 'X':
;;;3954                              nbr_base   = 16u;                    /* ... set nbr base = 16    (see Note #2a1B1a3).        */
;;;3955                              parse_char = (CPU_CHAR)(*(pstr_parse + 1));
;;;3956                              nbr_hex    =  ASCII_IsDigHex(parse_char);
;;;3957                              if (nbr_hex == DEF_YES) {            /* If next char is valid hex dig, ...                   */
;;;3958                                  pstr_parse++;                    /* ... adv past '0x' prefix (see Note #2a1B1b2A).       */
;;;3959                              }
;;;3960                              break;
;;;3961   
;;;3962   
;;;3963                         default:                                  /* For '0'  prefix, ...                                 */
;;;3964                              nbr_base =  8u;                      /* ... set nbr base =  8    (see Note #2a1B1a2).        */
;;;3965                              break;
;;;3966                     }
;;;3967   
;;;3968                } else {                                           /* For non-'0' prefix, ...                              */
;;;3969                    nbr_base = 10u;                                /* ... set nbr base = 10    (see Note #2a1B1a1).        */
;;;3970                }
;;;3971                break;
;;;3972   
;;;3973   
;;;3974           case  8u:                                               /* See Note #2a1B1a2.                                   */
;;;3975                if (*pstr_parse == '0') {                          /* If avail, ...                                        */
;;;3976                     pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2B).       */
;;;3977                }
;;;3978                break;
;;;3979   
;;;3980   
;;;3981           case 16u:                                               /* See Note #2a1B1a3.                                   */
;;;3982                if (*pstr_parse == '0') {                          /* If avail, ...                                        */
;;;3983                     pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2).        */
;;;3984                     switch (*pstr_parse) {
;;;3985                         case 'x':
;;;3986                         case 'X':
;;;3987                              parse_char = (CPU_CHAR)(*(pstr_parse + 1));
;;;3988                              nbr_hex    =  ASCII_IsDigHex(parse_char);
;;;3989                              if (nbr_hex == DEF_YES) {            /* If next char is valid hex dig, ...                   */
;;;3990                                  pstr_parse++;                    /* ... adv past '0x' prefix (see Note #2a1B1b2A).       */
;;;3991                              }
;;;3992                              break;
;;;3993   
;;;3994   
;;;3995                         default:
;;;3996                              break;
;;;3997                     }
;;;3998                }
;;;3999                break;
;;;4000   
;;;4001   
;;;4002           default:                                                /* See Note #2a1B1b.                                    */
;;;4003                break;
;;;4004       }
;;;4005   
;;;4006   
;;;4007   /*$PAGE*/
;;;4008                                                                   /* ------------------ PARSE INT STR ------------------- */
;;;4009       nbr  = 0u;
;;;4010       ovf  = DEF_NO;
;;;4011       done = DEF_NO;
;;;4012   
;;;4013       while (done == DEF_NO) {                                    /* Parse str for desired nbr base digs (see Note #2a2). */
;;;4014           parse_char = (CPU_CHAR)*pstr_parse;
;;;4015           nbr_alpha  =  ASCII_IsAlphaNum(parse_char);
;;;4016           if (nbr_alpha == DEF_YES) {                             /* If valid alpha num nbr dig avail, ...                */
;;;4017                                                                   /* ... convert parse char into nbr dig.                 */
;;;4018               nbr_dig = ASCII_IsDig(parse_char);
;;;4019               if (nbr_dig == DEF_YES) {
;;;4020                   parse_dig = (CPU_INT08U)(parse_char - '0');
;;;4021               } else {
;;;4022                   nbr_hex_lower = ASCII_IsLower(parse_char);
;;;4023                   if (nbr_hex_lower == DEF_YES) {
;;;4024                       parse_dig = (CPU_INT08U)((parse_char - 'a') + 10u);
;;;4025                   } else {
;;;4026                       parse_dig = (CPU_INT08U)((parse_char - 'A') + 10u);
;;;4027                   }
;;;4028               }
;;;4029   
;;;4030               if (parse_dig < nbr_base) {                         /* If parse char valid for nbr base ...                 */
;;;4031                   if (ovf == DEF_NO) {                            /* ... & nbr NOT yet ovf'd,         ...                 */
;;;4032                       if (nbr <= Str_MultOvfThTbl_Int32U[nbr_base]) {
;;;4033                                                                   /* ... merge parse char dig into nbr.                   */
;;;4034                           nbr *= nbr_base;
;;;4035                           nbr += parse_dig;
;;;4036                           if (nbr < parse_dig) {
;;;4037                               ovf = DEF_YES;
;;;4038                           }
;;;4039                       } else {
;;;4040                           ovf = DEF_YES;
;;;4041                       }
;;;4042                   }
;;;4043                   pstr_parse++;
;;;4044   
;;;4045               } else {                                            /* Invalid         char parsed (see Note #2a1C1a).      */
;;;4046                   done = DEF_YES;
;;;4047               }
;;;4048   
;;;4049           } else {                                                /* Invalid OR NULL char parsed (see Note #2a1C1).       */
;;;4050               done = DEF_YES;
;;;4051           }
;;;4052       }
;;;4053   
;;;4054       if (ovf == DEF_YES) {                                       /* If nbr ovf'd, ...                                    */
;;;4055           nbr  = DEF_INT_32U_MAX_VAL;                             /* ... rtn max int val (see Note #2a3A1).               */
;;;4056       }
;;;4057   
;;;4058   
;;;4059       if (pstr_parse !=             pstr_parse_nbr) {             /* If final parse str != init'l parse nbr str,       .. */
;;;4060          *pstr_next   = (CPU_CHAR *)pstr_parse;                   /* .. rtn   parse str's next char (see Note #2a2B2); .. */
;;;4061       } else {
;;;4062          *pstr_next   = (CPU_CHAR *)pstr;                         /* .. else rtn initial parse str  (see Note #2a2A2).    */
;;;4063       }
;;;4064   
;;;4065      *pnbr_neg = neg;                                             /* Rtn neg nbr status.                                  */
;;;4066   
;;;4067   
;;;4068       return (nbr);
;;;4069   }
0007b6  b00f              ADD      sp,sp,#0x3c
0007b8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1980|
0007bc  2d01              CMP      r5,#1                 ;3907
0007be  d001              BEQ      |L1.1988|
0007c0  2d24              CMP      r5,#0x24              ;3908
0007c2  d901              BLS      |L1.1992|
                  |L1.1988|
0007c4  2000              MOVS     r0,#0                 ;3909
0007c6  e7f6              B        |L1.1974|
                  |L1.1992|
0007c8  4634              MOV      r4,r6                 ;3914
0007ca  7820              LDRB     r0,[r4,#0]            ;3916
0007cc  f7fffffe          BL       ASCII_IsSpace
0007d0  9003              STR      r0,[sp,#0xc]          ;3916
0007d2  e005              B        |L1.2016|
                  |L1.2004|
0007d4  f1040401          ADD      r4,r4,#1              ;3918
0007d8  7820              LDRB     r0,[r4,#0]            ;3919
0007da  f7fffffe          BL       ASCII_IsSpace
0007de  9003              STR      r0,[sp,#0xc]          ;3919
                  |L1.2016|
0007e0  9803              LDR      r0,[sp,#0xc]          ;3917
0007e2  2801              CMP      r0,#1                 ;3917
0007e4  d0f6              BEQ      |L1.2004|
0007e6  7820              LDRB     r0,[r4,#0]            ;3922
0007e8  282b              CMP      r0,#0x2b              ;3922
0007ea  d002              BEQ      |L1.2034|
0007ec  282d              CMP      r0,#0x2d              ;3922
0007ee  d10d              BNE      |L1.2060|
0007f0  e004              B        |L1.2044|
                  |L1.2034|
0007f2  f1040401          ADD      r4,r4,#1              ;3924
0007f6  f04f0b00          MOV      r11,#0                ;3925
0007fa  e00a              B        |L1.2066|
                  |L1.2044|
0007fc  980e              LDR      r0,[sp,#0x38]         ;3930
0007fe  2801              CMP      r0,#1                 ;3930
000800  d101              BNE      |L1.2054|
000802  f1040401          ADD      r4,r4,#1              ;3931
                  |L1.2054|
000806  f04f0b01          MOV      r11,#1                ;3933
00080a  e002              B        |L1.2066|
                  |L1.2060|
00080c  f04f0b00          MOV      r11,#0                ;3938
000810  bf00              NOP                            ;3939
                  |L1.2066|
000812  bf00              NOP                            ;3926
000814  940a              STR      r4,[sp,#0x28]         ;3945
000816  b125              CBZ      r5,|L1.2082|
000818  2d08              CMP      r5,#8                 ;3947
00081a  d021              BEQ      |L1.2144|
00081c  2d10              CMP      r5,#0x10              ;3947
00081e  d13e              BNE      |L1.2206|
000820  e024              B        |L1.2156|
                  |L1.2082|
000822  7820              LDRB     r0,[r4,#0]            ;3949
000824  2830              CMP      r0,#0x30              ;3949
000826  d118              BNE      |L1.2138|
000828  f1040401          ADD      r4,r4,#1              ;3950
00082c  7820              LDRB     r0,[r4,#0]            ;3951
00082e  2858              CMP      r0,#0x58              ;3951
000830  d002              BEQ      |L1.2104|
000832  2878              CMP      r0,#0x78              ;3951
000834  d10d              BNE      |L1.2130|
000836  bf00              NOP                            ;3953
                  |L1.2104|
000838  f04f0510          MOV      r5,#0x10              ;3954
00083c  7867              LDRB     r7,[r4,#1]            ;3955
00083e  4638              MOV      r0,r7                 ;3956
000840  f7fffffe          BL       ASCII_IsDigHex
000844  4682              MOV      r10,r0                ;3956
000846  f1ba0f01          CMP      r10,#1                ;3957
00084a  d101              BNE      |L1.2128|
00084c  f1040401          ADD      r4,r4,#1              ;3958
                  |L1.2128|
000850  e002              B        |L1.2136|
                  |L1.2130|
000852  f04f0508          MOV      r5,#8                 ;3964
000856  bf00              NOP                            ;3965
                  |L1.2136|
000858  e001              B        |L1.2142|
                  |L1.2138|
00085a  f04f050a          MOV      r5,#0xa               ;3969
                  |L1.2142|
00085e  e01f              B        |L1.2208|
                  |L1.2144|
000860  7820              LDRB     r0,[r4,#0]            ;3975
000862  2830              CMP      r0,#0x30              ;3975
000864  d101              BNE      |L1.2154|
000866  f1040401          ADD      r4,r4,#1              ;3976
                  |L1.2154|
00086a  e019              B        |L1.2208|
                  |L1.2156|
00086c  7820              LDRB     r0,[r4,#0]            ;3982
00086e  2830              CMP      r0,#0x30              ;3982
000870  d114              BNE      |L1.2204|
000872  f1040401          ADD      r4,r4,#1              ;3983
000876  7820              LDRB     r0,[r4,#0]            ;3984
000878  2858              CMP      r0,#0x58              ;3984
00087a  d002              BEQ      |L1.2178|
00087c  2878              CMP      r0,#0x78              ;3984
00087e  d10b              BNE      |L1.2200|
000880  bf00              NOP                            ;3986
                  |L1.2178|
000882  7867              LDRB     r7,[r4,#1]            ;3987
000884  4638              MOV      r0,r7                 ;3988
000886  f7fffffe          BL       ASCII_IsDigHex
00088a  4682              MOV      r10,r0                ;3988
00088c  f1ba0f01          CMP      r10,#1                ;3989
000890  d101              BNE      |L1.2198|
000892  f1040401          ADD      r4,r4,#1              ;3990
                  |L1.2198|
000896  e000              B        |L1.2202|
                  |L1.2200|
000898  bf00              NOP                            ;3996
                  |L1.2202|
00089a  bf00              NOP                            ;3992
                  |L1.2204|
00089c  e000              B        |L1.2208|
                  |L1.2206|
00089e  bf00              NOP                            ;4003
                  |L1.2208|
0008a0  bf00              NOP                            ;3971
0008a2  f04f0800          MOV      r8,#0                 ;4009
0008a6  4640              MOV      r0,r8                 ;4010
0008a8  9002              STR      r0,[sp,#8]            ;4010
0008aa  9001              STR      r0,[sp,#4]            ;4011
0008ac  e045              B        |L1.2362|
                  |L1.2222|
0008ae  7827              LDRB     r7,[r4,#0]            ;4014
0008b0  4638              MOV      r0,r7                 ;4015
0008b2  f7fffffe          BL       ASCII_IsAlphaNum
0008b6  9005              STR      r0,[sp,#0x14]         ;4015
0008b8  9805              LDR      r0,[sp,#0x14]         ;4016
0008ba  2801              CMP      r0,#1                 ;4016
0008bc  d13a              BNE      |L1.2356|
0008be  4638              MOV      r0,r7                 ;4018
0008c0  f7fffffe          BL       ASCII_IsDig
0008c4  9006              STR      r0,[sp,#0x18]         ;4018
0008c6  9806              LDR      r0,[sp,#0x18]         ;4019
0008c8  2801              CMP      r0,#1                 ;4019
0008ca  d104              BNE      |L1.2262|
0008cc  f1a70030          SUB      r0,r7,#0x30           ;4020
0008d0  b2c0              UXTB     r0,r0                 ;4020
0008d2  9008              STR      r0,[sp,#0x20]         ;4020
0008d4  e00f              B        |L1.2294|
                  |L1.2262|
0008d6  4638              MOV      r0,r7                 ;4022
0008d8  f7fffffe          BL       ASCII_IsLower
0008dc  9004              STR      r0,[sp,#0x10]         ;4022
0008de  9804              LDR      r0,[sp,#0x10]         ;4023
0008e0  2801              CMP      r0,#1                 ;4023
0008e2  d104              BNE      |L1.2286|
0008e4  f1a70057          SUB      r0,r7,#0x57           ;4024
0008e8  b2c0              UXTB     r0,r0                 ;4024
0008ea  9008              STR      r0,[sp,#0x20]         ;4024
0008ec  e003              B        |L1.2294|
                  |L1.2286|
0008ee  f1a70037          SUB      r0,r7,#0x37           ;4026
0008f2  b2c0              UXTB     r0,r0                 ;4026
0008f4  9008              STR      r0,[sp,#0x20]         ;4026
                  |L1.2294|
0008f6  9808              LDR      r0,[sp,#0x20]         ;4030
0008f8  42a8              CMP      r0,r5                 ;4030
0008fa  da17              BGE      |L1.2348|
0008fc  9802              LDR      r0,[sp,#8]            ;4031
0008fe  b990              CBNZ     r0,|L1.2342|
000900  4834              LDR      r0,|L1.2516|
000902  f8500025          LDR      r0,[r0,r5,LSL #2]     ;4032
000906  4540              CMP      r0,r8                 ;4032
000908  d30a              BCC      |L1.2336|
00090a  fb08f805          MUL      r8,r8,r5              ;4034
00090e  9808              LDR      r0,[sp,#0x20]         ;4035
000910  4480              ADD      r8,r8,r0              ;4035
000912  9808              LDR      r0,[sp,#0x20]         ;4036
000914  4580              CMP      r8,r0                 ;4036
000916  d206              BCS      |L1.2342|
000918  f04f0001          MOV      r0,#1                 ;4037
00091c  9002              STR      r0,[sp,#8]            ;4037
00091e  e002              B        |L1.2342|
                  |L1.2336|
000920  f04f0001          MOV      r0,#1                 ;4040
000924  9002              STR      r0,[sp,#8]            ;4040
                  |L1.2342|
000926  f1040401          ADD      r4,r4,#1              ;4043
00092a  e006              B        |L1.2362|
                  |L1.2348|
00092c  f04f0001          MOV      r0,#1                 ;4046
000930  9001              STR      r0,[sp,#4]            ;4046
000932  e002              B        |L1.2362|
                  |L1.2356|
000934  f04f0001          MOV      r0,#1                 ;4050
000938  9001              STR      r0,[sp,#4]            ;4050
                  |L1.2362|
00093a  9801              LDR      r0,[sp,#4]            ;4013
00093c  2800              CMP      r0,#0                 ;4013
00093e  d0b6              BEQ      |L1.2222|
000940  9802              LDR      r0,[sp,#8]            ;4054
000942  2801              CMP      r0,#1                 ;4054
000944  d101              BNE      |L1.2378|
000946  f04f38ff          MOV      r8,#0xffffffff        ;4055
                  |L1.2378|
00094a  980a              LDR      r0,[sp,#0x28]         ;4059
00094c  4284              CMP      r4,r0                 ;4059
00094e  d002              BEQ      |L1.2390|
000950  f8c94000          STR      r4,[r9,#0]            ;4060
000954  e001              B        |L1.2394|
                  |L1.2390|
000956  f8c96000          STR      r6,[r9,#0]            ;4062
                  |L1.2394|
00095a  9818              LDR      r0,[sp,#0x60]         ;4065
00095c  f880b000          STRB     r11,[r0,#0]           ;4065
000960  4640              MOV      r0,r8                 ;4068
000962  e728              B        |L1.1974|
;;;4070   
                          ENDP

                  Str_ParseNbr_Int32U PROC
;;;2998   
;;;2999   CPU_INT32U  Str_ParseNbr_Int32U (const  CPU_CHAR     *pstr,
000964  b5f8              PUSH     {r3-r7,lr}
;;;3000                                           CPU_CHAR    **pstr_next,
;;;3001                                           CPU_INT08U    nbr_base)
;;;3002   {
000966  4604              MOV      r4,r0
000968  460d              MOV      r5,r1
00096a  4616              MOV      r6,r2
;;;3003       CPU_INT32U  nbr;
;;;3004   
;;;3005   
;;;3006       nbr = Str_ParseNbr_Int32(               pstr,               /* Parse/convert str ...                                */
00096c  f04f0000          MOV      r0,#0
000970  4603              MOV      r3,r0
000972  4632              MOV      r2,r6
000974  4629              MOV      r1,r5
000976  9000              STR      r0,[sp,#0]
000978  4620              MOV      r0,r4
00097a  f7fffffe          BL       Str_ParseNbr_Int32
00097e  4607              MOV      r7,r0
;;;3007                                               pstr_next,
;;;3008                                               nbr_base,
;;;3009                                               DEF_NO,             /* ... as unsigned int (see Note #2a2).                 */
;;;3010                                (CPU_BOOLEAN *)0);
;;;3011   
;;;3012       return (nbr);
000980  4638              MOV      r0,r7
;;;3013   }
000982  bdf8              POP      {r3-r7,pc}
;;;3014   
                          ENDP

                  Str_ParseNbr_Int32S PROC
;;;3215   
;;;3216   CPU_INT32S  Str_ParseNbr_Int32S (const  CPU_CHAR     *pstr,
000984  e92d41fc          PUSH     {r2-r8,lr}
;;;3217                                           CPU_CHAR    **pstr_next,
;;;3218                                           CPU_INT08U    nbr_base)
;;;3219   {
000988  4605              MOV      r5,r0
00098a  460e              MOV      r6,r1
00098c  4617              MOV      r7,r2
;;;3220       CPU_INT32S   nbr;
;;;3221       CPU_INT32U   nbr_abs;
;;;3222       CPU_BOOLEAN  nbr_neg;
;;;3223   
;;;3224   
;;;3225       nbr_abs = Str_ParseNbr_Int32(pstr,                          /* Parse/convert str ...                                */
00098e  a801              ADD      r0,sp,#4
000990  f04f0301          MOV      r3,#1
000994  463a              MOV      r2,r7
000996  4631              MOV      r1,r6
000998  9000              STR      r0,[sp,#0]
00099a  4628              MOV      r0,r5
00099c  f7fffffe          BL       Str_ParseNbr_Int32
0009a0  4604              MOV      r4,r0
;;;3226                                    pstr_next,
;;;3227                                    nbr_base,
;;;3228                                    DEF_YES,                       /* ... as signed int (see Note #2a2).                   */
;;;3229                                   &nbr_neg);
;;;3230   
;;;3231       if (nbr_neg == DEF_NO) {                                    /* Chk for neg nbr & ovf/undf (see Note #2a3A1).        */
0009a2  f89d0004          LDRB     r0,[sp,#4]
0009a6  b940              CBNZ     r0,|L1.2490|
;;;3232           nbr = (nbr_abs > (CPU_INT32U) DEF_INT_32S_MAX_VAL)          ?  (CPU_INT32S)DEF_INT_32S_MAX_VAL
0009a8  f1b44f00          CMP      r4,#0x80000000
0009ac  d302              BCC      |L1.2484|
0009ae  f06f4000          MVN      r0,#0x80000000
0009b2  e000              B        |L1.2486|
                  |L1.2484|
;;;3233                                                                       :  (CPU_INT32S)nbr_abs;
0009b4  4620              MOV      r0,r4
                  |L1.2486|
0009b6  4680              MOV      r8,r0
0009b8  e008              B        |L1.2508|
                  |L1.2490|
;;;3234       } else {
;;;3235           nbr = (nbr_abs > (CPU_INT32U)-DEF_INT_32S_MIN_VAL_ONES_CPL) ?  (CPU_INT32S)DEF_INT_32S_MIN_VAL
0009ba  f1b44f00          CMP      r4,#0x80000000
0009be  d302              BCC      |L1.2502|
0009c0  f04f4000          MOV      r0,#0x80000000
0009c4  e001              B        |L1.2506|
                  |L1.2502|
;;;3236                                                                       : -(CPU_INT32S)nbr_abs;
0009c6  f1c40000          RSB      r0,r4,#0
                  |L1.2506|
0009ca  4680              MOV      r8,r0
                  |L1.2508|
;;;3237       }
;;;3238   
;;;3239       return (nbr);
0009cc  4640              MOV      r0,r8
;;;3240   }
0009ce  e8bd81fc          POP      {r2-r8,pc}
;;;3241   
                          ENDP

0009d2  0000              DCW      0x0000
                  |L1.2516|
                          DCD      Str_MultOvfThTbl_Int32U

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Str_MultOvfThTbl_Int32U
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0x7fffffff
                          DCD      0x55555555
                          DCD      0x3fffffff
                          DCD      0x33333333
                          DCD      0x2aaaaaaa
                          DCD      0x24924924
                          DCD      0x1fffffff
                          DCD      0x1c71c71c
                          DCD      0x19999999
                          DCD      0x1745d174
                          DCD      0x15555555
                          DCD      0x13b13b13
                          DCD      0x12492492
                          DCD      0x11111111
                          DCD      0x0fffffff
                          DCD      0x0f0f0f0f
                          DCD      0x0e38e38e
                          DCD      0x0d79435e
                          DCD      0x0ccccccc
                          DCD      0x0c30c30c
                          DCD      0x0ba2e8ba
                          DCD      0x0b21642c
                          DCD      0x0aaaaaaa
                          DCD      0x0a3d70a3
                          DCD      0x09d89d89
                          DCD      0x097b425e
                          DCD      0x09249249
                          DCD      0x08d3dcb0
                          DCD      0x08888888
                          DCD      0x08421084
                          DCD      0x07ffffff
                          DCD      0x07c1f07c
                          DCD      0x07878787
                          DCD      0x07507507
                          DCD      0x071c71c7
