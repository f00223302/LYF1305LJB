; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_wwdg.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_wwdg.crf ..\BSP\STM32F2xx\src\stm32f2xx_wwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WWDG_DeInit PROC
;;;133      */
;;;134    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;137      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;138    }
000014  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  WWDG_SetPrescaler PROC
;;;149      */
;;;150    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000016  f04f0100          MOV      r1,#0
;;;151    {
;;;152      uint32_t tmpreg = 0;
;;;153      /* Check the parameters */
;;;154      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;155      /* Clear WDGTB[1:0] bits */
;;;156      tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
00001a  4a1a              LDR      r2,|L1.132|
00001c  6812              LDR      r2,[r2,#0]
00001e  f42271c0          BIC      r1,r2,#0x180
;;;157      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;158      tmpreg |= WWDG_Prescaler;
000022  ea410100          ORR      r1,r1,r0
;;;159      /* Store the new value */
;;;160      WWDG->CFR = tmpreg;
000026  4a17              LDR      r2,|L1.132|
000028  6011              STR      r1,[r2,#0]
;;;161    }
00002a  4770              BX       lr
;;;162    
                          ENDP

                  WWDG_SetWindowValue PROC
;;;168      */
;;;169    void WWDG_SetWindowValue(uint8_t WindowValue)
00002c  f04f0100          MOV      r1,#0
;;;170    {
;;;171      __IO uint32_t tmpreg = 0;
;;;172    
;;;173      /* Check the parameters */
;;;174      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;175      /* Clear W[6:0] bits */
;;;176    
;;;177      tmpreg = WWDG->CFR & CFR_W_MASK;
000030  4a14              LDR      r2,|L1.132|
000032  6812              LDR      r2,[r2,#0]
000034  f022017f          BIC      r1,r2,#0x7f
;;;178    
;;;179      /* Set W[6:0] bits according to WindowValue value */
;;;180      tmpreg |= WindowValue & (uint32_t) BIT_MASK;
000038  f000027f          AND      r2,r0,#0x7f
00003c  ea420101          ORR      r1,r2,r1
;;;181    
;;;182      /* Store the new value */
;;;183      WWDG->CFR = tmpreg;
000040  4a10              LDR      r2,|L1.132|
000042  6011              STR      r1,[r2,#0]
;;;184    }
000044  4770              BX       lr
;;;185    
                          ENDP

                  WWDG_EnableIT PROC
;;;191      */
;;;192    void WWDG_EnableIT(void)
000046  f04f0001          MOV      r0,#1
;;;193    {
;;;194      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
00004a  490f              LDR      r1,|L1.136|
00004c  6008              STR      r0,[r1,#0]
;;;195    }
00004e  4770              BX       lr
;;;196    
                          ENDP

                  WWDG_SetCounter PROC
;;;203      */
;;;204    void WWDG_SetCounter(uint8_t Counter)
000050  f000017f          AND      r1,r0,#0x7f
;;;205    {
;;;206      /* Check the parameters */
;;;207      assert_param(IS_WWDG_COUNTER(Counter));
;;;208      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;209         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;210      WWDG->CR = Counter & BIT_MASK;
000054  4a0d              LDR      r2,|L1.140|
000056  6011              STR      r1,[r2,#0]
;;;211    }
000058  4770              BX       lr
;;;212    /**
                          ENDP

                  WWDG_Enable PROC
;;;234      */
;;;235    void WWDG_Enable(uint8_t Counter)
00005a  f0400180          ORR      r1,r0,#0x80
;;;236    {
;;;237      /* Check the parameters */
;;;238      assert_param(IS_WWDG_COUNTER(Counter));
;;;239      WWDG->CR = WWDG_CR_WDGA | Counter;
00005e  4a0b              LDR      r2,|L1.140|
000060  6011              STR      r1,[r2,#0]
;;;240    }
000062  4770              BX       lr
;;;241    /**
                          ENDP

                  WWDG_GetFlagStatus PROC
;;;261      */
;;;262    FlagStatus WWDG_GetFlagStatus(void)
000064  f04f0000          MOV      r0,#0
;;;263    {
;;;264      FlagStatus bitstatus = RESET;
;;;265        
;;;266      if ((WWDG->SR) != (uint32_t)RESET)
000068  4909              LDR      r1,|L1.144|
00006a  6809              LDR      r1,[r1,#0]
00006c  b111              CBZ      r1,|L1.116|
;;;267      {
;;;268        bitstatus = SET;
00006e  f04f0001          MOV      r0,#1
000072  e001              B        |L1.120|
                  |L1.116|
;;;269      }
;;;270      else
;;;271      {
;;;272        bitstatus = RESET;
000074  f04f0000          MOV      r0,#0
                  |L1.120|
;;;273      }
;;;274      return bitstatus;
;;;275    }
000078  4770              BX       lr
;;;276    
                          ENDP

                  WWDG_ClearFlag PROC
;;;281      */
;;;282    void WWDG_ClearFlag(void)
00007a  f04f0000          MOV      r0,#0
;;;283    {
;;;284      WWDG->SR = (uint32_t)RESET;
00007e  4904              LDR      r1,|L1.144|
000080  6008              STR      r0,[r1,#0]
;;;285    }
000082  4770              BX       lr
;;;286    
                          ENDP

                  |L1.132|
                          DCD      0x40002c04
                  |L1.136|
                          DCD      0x420580a4
                  |L1.140|
                          DCD      0x40002c00
                  |L1.144|
                          DCD      0x40002c08

;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_wwdg.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f2xx_wwdg_c_9668c0ca____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___16_stm32f2xx_wwdg_c_9668c0ca____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f2xx_wwdg_c_9668c0ca____REVSH|
#line 130
|__asm___16_stm32f2xx_wwdg_c_9668c0ca____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
