; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\os_mutex.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\os_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\os_mutex.crf ..\..\uCOS-II\Source\os_mutex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSMutexAccept PROC
;;;85     #if OS_MUTEX_ACCEPT_EN > 0u
;;;86     BOOLEAN  OSMutexAccept (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;87                             INT8U     *perr)
;;;88     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;89         INT8U      pcp;                                    /* Priority Ceiling Priority (PCP)              */
;;;90     #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;91         OS_CPU_SR  cpu_sr = 0u;
000008  f04f0700          MOV      r7,#0
;;;92     #endif
;;;93     
;;;94     
;;;95     
;;;96     #ifdef OS_SAFETY_CRITICAL
;;;97         if (perr == (INT8U *)0) {
;;;98             OS_SAFETY_CRITICAL_EXCEPTION();
;;;99             return (OS_FALSE);
;;;100        }
;;;101    #endif
;;;102    
;;;103    #if OS_ARG_CHK_EN > 0u
;;;104        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;105            *perr = OS_ERR_PEVENT_NULL;
;;;106            return (OS_FALSE);
;;;107        }
;;;108    #endif
;;;109        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2804              CMP      r0,#4
000010  d006              BEQ      |L1.32|
;;;110            *perr = OS_ERR_EVENT_TYPE;
000012  f04f0001          MOV      r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;111            return (OS_FALSE);
000018  f04f0000          MOV      r0,#0
                  |L1.28|
;;;112        }
;;;113        if (OSIntNesting > 0u) {                           /* Make sure it's not called from an ISR        */
;;;114            *perr = OS_ERR_PEND_ISR;
;;;115            return (OS_FALSE);
;;;116        }
;;;117        OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
;;;118        pcp = (INT8U)(pevent->OSEventCnt >> 8u);           /* Get PCP from mutex                           */
;;;119        if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;120            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
;;;121            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
;;;122            pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
;;;123            if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;124                (OSTCBCur->OSTCBPrio <= pcp)) {            /*      PCP 'must' have a SMALLER prio ...      */
;;;125                 OS_EXIT_CRITICAL();                       /*      ... than current task!                  */
;;;126                *perr = OS_ERR_PCP_LOWER;
;;;127            } else {
;;;128                 OS_EXIT_CRITICAL();
;;;129                *perr = OS_ERR_NONE;
;;;130            }
;;;131            return (OS_TRUE);
;;;132        }
;;;133        OS_EXIT_CRITICAL();
;;;134        *perr = OS_ERR_NONE;
;;;135        return (OS_FALSE);
;;;136    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  48fe              LDR      r0,|L1.1052|
000022  7800              LDRB     r0,[r0,#0]            ;113  ; OSIntNesting
000024  b128              CBZ      r0,|L1.50|
000026  f04f0002          MOV      r0,#2                 ;114
00002a  7028              STRB     r0,[r5,#0]            ;114
00002c  f04f0000          MOV      r0,#0                 ;115
000030  e7f4              B        |L1.28|
                  |L1.50|
000032  f7fffffe          BL       OS_CPU_SR_Save
000036  4607              MOV      r7,r0                 ;117
000038  8920              LDRH     r0,[r4,#8]            ;118
00003a  ea4f2620          ASR      r6,r0,#8              ;118
00003e  8920              LDRH     r0,[r4,#8]            ;119
000040  b2c0              UXTB     r0,r0                 ;119
000042  28ff              CMP      r0,#0xff              ;119
000044  d125              BNE      |L1.146|
000046  8920              LDRH     r0,[r4,#8]            ;120
000048  f400407f          AND      r0,r0,#0xff00         ;120
00004c  8120              STRH     r0,[r4,#8]            ;120
00004e  8920              LDRH     r0,[r4,#8]            ;121
000050  49f3              LDR      r1,|L1.1056|
000052  6809              LDR      r1,[r1,#0]            ;121  ; OSTCBCur
000054  f8911036          LDRB     r1,[r1,#0x36]         ;121
000058  ea400001          ORR      r0,r0,r1              ;121
00005c  8120              STRH     r0,[r4,#8]            ;121
00005e  48f0              LDR      r0,|L1.1056|
000060  6800              LDR      r0,[r0,#0]            ;122  ; OSTCBCur
000062  6060              STR      r0,[r4,#4]            ;122
000064  2eff              CMP      r6,#0xff              ;123
000066  d00c              BEQ      |L1.130|
000068  48ed              LDR      r0,|L1.1056|
00006a  6800              LDR      r0,[r0,#0]            ;124  ; OSTCBCur
00006c  f8900036          LDRB     r0,[r0,#0x36]         ;124
000070  42b0              CMP      r0,r6                 ;124
000072  dc06              BGT      |L1.130|
000074  4638              MOV      r0,r7                 ;125
000076  f7fffffe          BL       OS_CPU_SR_Restore
00007a  f04f0078          MOV      r0,#0x78              ;126
00007e  7028              STRB     r0,[r5,#0]            ;126
000080  e005              B        |L1.142|
                  |L1.130|
000082  4638              MOV      r0,r7                 ;128
000084  f7fffffe          BL       OS_CPU_SR_Restore
000088  f04f0000          MOV      r0,#0                 ;129
00008c  7028              STRB     r0,[r5,#0]            ;129
                  |L1.142|
00008e  2001              MOVS     r0,#1                 ;131
000090  e7c4              B        |L1.28|
                  |L1.146|
000092  4638              MOV      r0,r7                 ;133
000094  f7fffffe          BL       OS_CPU_SR_Restore
000098  f04f0000          MOV      r0,#0                 ;134
00009c  7028              STRB     r0,[r5,#0]            ;134
00009e  bf00              NOP                            ;135
0000a0  e7bc              B        |L1.28|
;;;137    #endif
                          ENDP

                  OSMutexCreate PROC
;;;176    
;;;177    OS_EVENT  *OSMutexCreate (INT8U   prio,
0000a2  e92d41f0          PUSH     {r4-r8,lr}
;;;178                              INT8U  *perr)
;;;179    {
0000a6  4604              MOV      r4,r0
0000a8  460e              MOV      r6,r1
;;;180        OS_EVENT  *pevent;
;;;181    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;182        OS_CPU_SR  cpu_sr = 0u;
0000aa  f04f0700          MOV      r7,#0
;;;183    #endif
;;;184    
;;;185    
;;;186    
;;;187    #ifdef OS_SAFETY_CRITICAL
;;;188        if (perr == (INT8U *)0) {
;;;189            OS_SAFETY_CRITICAL_EXCEPTION();
;;;190            return ((OS_EVENT *)0);
;;;191        }
;;;192    #endif
;;;193    
;;;194    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;195        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;196            OS_SAFETY_CRITICAL_EXCEPTION();
;;;197            return ((OS_EVENT *)0);
;;;198        }
;;;199    #endif
;;;200    
;;;201    #if OS_ARG_CHK_EN > 0u
;;;202        if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;203            if (prio >= OS_LOWEST_PRIO) {                      /* Validate PCP                             */
;;;204               *perr = OS_ERR_PRIO_INVALID;
;;;205                return ((OS_EVENT *)0);
;;;206            }
;;;207        }
;;;208    #endif
;;;209        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
0000ae  48db              LDR      r0,|L1.1052|
0000b0  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0000b2  b130              CBZ      r0,|L1.194|
;;;210            *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
0000b4  f04f0010          MOV      r0,#0x10
0000b8  7030              STRB     r0,[r6,#0]
;;;211            return ((OS_EVENT *)0);
0000ba  f04f0000          MOV      r0,#0
                  |L1.190|
;;;212        }
;;;213        OS_ENTER_CRITICAL();
;;;214        if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;215            if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {           /* Mutex priority must not already exist    */
;;;216                OS_EXIT_CRITICAL();                            /* Task already exist at priority ...       */
;;;217               *perr = OS_ERR_PRIO_EXIST;                      /* ... ceiling priority                     */
;;;218                return ((OS_EVENT *)0);
;;;219            }
;;;220            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;              /* Reserve the table entry                  */
;;;221        }
;;;222    
;;;223        pevent = OSEventFreeList;                              /* Get next free event control block        */
;;;224        if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
;;;225            if (prio != OS_PRIO_MUTEX_CEIL_DIS) {
;;;226                OSTCBPrioTbl[prio] = (OS_TCB *)0;              /* No, Release the table entry              */
;;;227            }
;;;228            OS_EXIT_CRITICAL();
;;;229           *perr = OS_ERR_PEVENT_NULL;                         /* No more event control blocks             */
;;;230            return (pevent);
;;;231        }
;;;232        OSEventFreeList     = (OS_EVENT *)OSEventFreeList->OSEventPtr; /* Adjust the free list             */
;;;233        OS_EXIT_CRITICAL();
;;;234        pevent->OSEventType = OS_EVENT_TYPE_MUTEX;
;;;235        pevent->OSEventCnt  = (INT16U)((INT16U)prio << 8u) | OS_MUTEX_AVAILABLE; /* Resource is avail.     */
;;;236        pevent->OSEventPtr  = (void *)0;                       /* No task owning the mutex                 */
;;;237    #if OS_EVENT_NAME_EN > 0u
;;;238        pevent->OSEventName = (INT8U *)(void *)"?";
;;;239    #endif
;;;240        OS_EventWaitListInit(pevent);
;;;241       *perr = OS_ERR_NONE;
;;;242        return (pevent);
;;;243    }
0000be  e8bd81f0          POP      {r4-r8,pc}
                  |L1.194|
0000c2  f7fffffe          BL       OS_CPU_SR_Save
0000c6  4607              MOV      r7,r0                 ;213
0000c8  2cff              CMP      r4,#0xff              ;214
0000ca  d011              BEQ      |L1.240|
0000cc  48d5              LDR      r0,|L1.1060|
0000ce  f8500024          LDR      r0,[r0,r4,LSL #2]     ;215
0000d2  b140              CBZ      r0,|L1.230|
0000d4  4638              MOV      r0,r7                 ;216
0000d6  f7fffffe          BL       OS_CPU_SR_Restore
0000da  f04f0028          MOV      r0,#0x28              ;217
0000de  7030              STRB     r0,[r6,#0]            ;217
0000e0  f04f0000          MOV      r0,#0                 ;218
0000e4  e7eb              B        |L1.190|
                  |L1.230|
0000e6  f04f0001          MOV      r0,#1                 ;220
0000ea  49ce              LDR      r1,|L1.1060|
0000ec  f8410024          STR      r0,[r1,r4,LSL #2]     ;220
                  |L1.240|
0000f0  48cd              LDR      r0,|L1.1064|
0000f2  6805              LDR      r5,[r0,#0]            ;223  ; OSEventFreeList
0000f4  b975              CBNZ     r5,|L1.276|
0000f6  2cff              CMP      r4,#0xff              ;225
0000f8  d004              BEQ      |L1.260|
0000fa  f04f0000          MOV      r0,#0                 ;226
0000fe  49c9              LDR      r1,|L1.1060|
000100  f8410024          STR      r0,[r1,r4,LSL #2]     ;226
                  |L1.260|
000104  4638              MOV      r0,r7                 ;228
000106  f7fffffe          BL       OS_CPU_SR_Restore
00010a  f04f0004          MOV      r0,#4                 ;229
00010e  7030              STRB     r0,[r6,#0]            ;229
000110  4628              MOV      r0,r5                 ;230
000112  e7d4              B        |L1.190|
                  |L1.276|
000114  48c4              LDR      r0,|L1.1064|
000116  6800              LDR      r0,[r0,#0]            ;232  ; OSEventFreeList
000118  6840              LDR      r0,[r0,#4]            ;232
00011a  49c3              LDR      r1,|L1.1064|
00011c  6008              STR      r0,[r1,#0]            ;232  ; OSEventFreeList
00011e  4638              MOV      r0,r7                 ;233
000120  f7fffffe          BL       OS_CPU_SR_Restore
000124  f04f0004          MOV      r0,#4                 ;234
000128  7028              STRB     r0,[r5,#0]            ;234
00012a  f04f00ff          MOV      r0,#0xff              ;235
00012e  ea402004          ORR      r0,r0,r4,LSL #8       ;235
000132  8128              STRH     r0,[r5,#8]            ;235
000134  f04f0000          MOV      r0,#0                 ;236
000138  6068              STR      r0,[r5,#4]            ;236
00013a  a0bc              ADR      r0,|L1.1068|
00013c  6168              STR      r0,[r5,#0x14]         ;238
00013e  4628              MOV      r0,r5                 ;240
000140  f7fffffe          BL       OS_EventWaitListInit
000144  f04f0000          MOV      r0,#0                 ;241
000148  7030              STRB     r0,[r6,#0]            ;241
00014a  4628              MOV      r0,r5                 ;242
00014c  e7b7              B        |L1.190|
;;;244    
                          ENDP

                  OSMutex_RdyAtPrio PROC
;;;734    
;;;735    static  void  OSMutex_RdyAtPrio (OS_TCB  *ptcb,
00014e  b530              PUSH     {r4,r5,lr}
;;;736                                     INT8U    prio)
;;;737    {
;;;738        INT8U  y;
;;;739    
;;;740    
;;;741        y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pcp'    */
000150  f8902038          LDRB     r2,[r0,#0x38]
;;;742        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
000154  4bb6              LDR      r3,|L1.1072|
000156  5c9b              LDRB     r3,[r3,r2]
000158  f8904039          LDRB     r4,[r0,#0x39]
00015c  ea6f0404          MVN      r4,r4
000160  b2e4              UXTB     r4,r4
000162  ea030304          AND      r3,r3,r4
000166  4cb2              LDR      r4,|L1.1072|
000168  54a3              STRB     r3,[r4,r2]
;;;743        if (OSRdyTbl[y] == 0u) {
00016a  4623              MOV      r3,r4
00016c  5c9b              LDRB     r3,[r3,r2]
00016e  b953              CBNZ     r3,|L1.390|
;;;744            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
000170  f890303a          LDRB     r3,[r0,#0x3a]
000174  ea6f0303          MVN      r3,r3
000178  b2db              UXTB     r3,r3
00017a  4cae              LDR      r4,|L1.1076|
00017c  7824              LDRB     r4,[r4,#0]  ; OSRdyGrp
00017e  ea030304          AND      r3,r3,r4
000182  4cac              LDR      r4,|L1.1076|
000184  7023              STRB     r3,[r4,#0]
                  |L1.390|
;;;745        }
;;;746        ptcb->OSTCBPrio         = prio;
000186  f8001f36          STRB     r1,[r0,#0x36]!
;;;747        OSPrioCur               = prio;                        /* The current task is now at this priority */
00018a  4bab              LDR      r3,|L1.1080|
00018c  7019              STRB     r1,[r3,#0]
;;;748    #if OS_LOWEST_PRIO <= 63u
;;;749        ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 3u) & 0x07u);
00018e  f3c103c2          UBFX     r3,r1,#3,#3
000192  7083              STRB     r3,[r0,#2]
;;;750        ptcb->OSTCBX            = (INT8U)(prio & 0x07u);
000194  f0010307          AND      r3,r1,#7
000198  7043              STRB     r3,[r0,#1]
;;;751    #else
;;;752        ptcb->OSTCBY            = (INT8U)((INT8U)(prio >> 4u) & 0x0Fu);
;;;753        ptcb->OSTCBX            = (INT8U) (prio & 0x0Fu);
;;;754    #endif
;;;755        ptcb->OSTCBBitY         = (OS_PRIO)(1uL << ptcb->OSTCBY);
00019a  7884              LDRB     r4,[r0,#2]
00019c  f04f0301          MOV      r3,#1
0001a0  fa03f304          LSL      r3,r3,r4
0001a4  7103              STRB     r3,[r0,#4]
;;;756        ptcb->OSTCBBitX         = (OS_PRIO)(1uL << ptcb->OSTCBX);
0001a6  7844              LDRB     r4,[r0,#1]
0001a8  f04f0301          MOV      r3,#1
0001ac  fa03f304          LSL      r3,r3,r4
0001b0  70c3              STRB     r3,[r0,#3]
;;;757        OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
0001b2  7903              LDRB     r3,[r0,#4]
0001b4  4c9f              LDR      r4,|L1.1076|
0001b6  7824              LDRB     r4,[r4,#0]  ; OSRdyGrp
0001b8  ea430304          ORR      r3,r3,r4
0001bc  4c9d              LDR      r4,|L1.1076|
0001be  7023              STRB     r3,[r4,#0]
;;;758        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
0001c0  7883              LDRB     r3,[r0,#2]
0001c2  4c9b              LDR      r4,|L1.1072|
0001c4  5ce3              LDRB     r3,[r4,r3]
0001c6  78c4              LDRB     r4,[r0,#3]
0001c8  ea430304          ORR      r3,r3,r4
0001cc  7884              LDRB     r4,[r0,#2]
0001ce  f1a00036          SUB      r0,r0,#0x36
0001d2  4d97              LDR      r5,|L1.1072|
0001d4  552b              STRB     r3,[r5,r4]
;;;759        OSTCBPrioTbl[prio]      = ptcb;
0001d6  4b93              LDR      r3,|L1.1060|
0001d8  f8430021          STR      r0,[r3,r1,LSL #2]
;;;760    }
0001dc  bd30              POP      {r4,r5,pc}
;;;761    
                          ENDP

                  OSMutexDel PROC
;;;286    #if OS_MUTEX_DEL_EN > 0u
;;;287    OS_EVENT  *OSMutexDel (OS_EVENT  *pevent,
0001de  e92d4ff8          PUSH     {r3-r11,lr}
;;;288                           INT8U      opt,
;;;289                           INT8U     *perr)
;;;290    {
0001e2  4604              MOV      r4,r0
0001e4  468a              MOV      r10,r1
0001e6  4616              MOV      r6,r2
;;;291        BOOLEAN    tasks_waiting;
;;;292        OS_EVENT  *pevent_return;
;;;293        INT8U      pcp;                                        /* Priority ceiling priority                */
;;;294        INT8U      prio;
;;;295        OS_TCB    *ptcb;
;;;296    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;297        OS_CPU_SR  cpu_sr = 0u;
0001e8  f04f0000          MOV      r0,#0
0001ec  9000              STR      r0,[sp,#0]
;;;298    #endif
;;;299    
;;;300    
;;;301    
;;;302    #ifdef OS_SAFETY_CRITICAL
;;;303        if (perr == (INT8U *)0) {
;;;304            OS_SAFETY_CRITICAL_EXCEPTION();
;;;305            return ((OS_EVENT *)0);
;;;306        }
;;;307    #endif
;;;308    
;;;309    #if OS_ARG_CHK_EN > 0u
;;;310        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;311            *perr = OS_ERR_PEVENT_NULL;
;;;312            return (pevent);
;;;313        }
;;;314    #endif
;;;315        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
0001ee  7820              LDRB     r0,[r4,#0]
0001f0  2804              CMP      r0,#4
0001f2  d005              BEQ      |L1.512|
;;;316            *perr = OS_ERR_EVENT_TYPE;
0001f4  f04f0001          MOV      r0,#1
0001f8  7030              STRB     r0,[r6,#0]
;;;317            return (pevent);
0001fa  4620              MOV      r0,r4
                  |L1.508|
;;;318        }
;;;319        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;320            *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
;;;321            return (pevent);
;;;322        }
;;;323        OS_ENTER_CRITICAL();
;;;324        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mutex        */
;;;325            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;326        } else {
;;;327            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;328        }
;;;329        switch (opt) {
;;;330            case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
;;;331                 if (tasks_waiting == OS_FALSE) {
;;;332    #if OS_EVENT_NAME_EN > 0u
;;;333                     pevent->OSEventName   = (INT8U *)(void *)"?";
;;;334    #endif
;;;335                     pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
;;;336                     if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;337                         OSTCBPrioTbl[pcp] = (OS_TCB *)0;      /* Free up the PCP                          */
;;;338                     }
;;;339                     pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
;;;340                     pevent->OSEventPtr    = OSEventFreeList;  /* Return Event Control Block to free list  */
;;;341                     pevent->OSEventCnt    = 0u;
;;;342                     OSEventFreeList       = pevent;
;;;343                     OS_EXIT_CRITICAL();
;;;344                     *perr                 = OS_ERR_NONE;
;;;345                     pevent_return         = (OS_EVENT *)0;    /* Mutex has been deleted                   */
;;;346                 } else {
;;;347                     OS_EXIT_CRITICAL();
;;;348                     *perr                 = OS_ERR_TASK_WAITING;
;;;349                     pevent_return         = pevent;
;;;350                 }
;;;351                 break;
;;;352    
;;;353            case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
;;;354                 pcp  = (INT8U)(pevent->OSEventCnt >> 8u);                       /* Get PCP of mutex       */
;;;355                 if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;356                     prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /* Get owner's orig prio  */
;;;357                     ptcb = (OS_TCB *)pevent->OSEventPtr;
;;;358                     if (ptcb != (OS_TCB *)0) {                /* See if any task owns the mutex           */
;;;359                         if (ptcb->OSTCBPrio == pcp) {         /* See if original prio was changed         */
;;;360                             OSMutex_RdyAtPrio(ptcb, prio);    /* Yes, Restore the task's original prio    */
;;;361                         }
;;;362                     }
;;;363                 }
;;;364                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mutex        */
;;;365                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_ABORT);
;;;366                 }
;;;367    #if OS_EVENT_NAME_EN > 0u
;;;368                 pevent->OSEventName   = (INT8U *)(void *)"?";
;;;369    #endif
;;;370                 pcp                   = (INT8U)(pevent->OSEventCnt >> 8u);
;;;371                 if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;372                     OSTCBPrioTbl[pcp] = (OS_TCB *)0;          /* Free up the PCP                          */
;;;373                 }
;;;374                 pevent->OSEventType   = OS_EVENT_TYPE_UNUSED;
;;;375                 pevent->OSEventPtr    = OSEventFreeList;      /* Return Event Control Block to free list  */
;;;376                 pevent->OSEventCnt    = 0u;
;;;377                 OSEventFreeList       = pevent;               /* Get next free event control block        */
;;;378                 OS_EXIT_CRITICAL();
;;;379                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;380                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;381                 }
;;;382                 *perr         = OS_ERR_NONE;
;;;383                 pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
;;;384                 break;
;;;385    
;;;386            default:
;;;387                 OS_EXIT_CRITICAL();
;;;388                 *perr         = OS_ERR_INVALID_OPT;
;;;389                 pevent_return = pevent;
;;;390                 break;
;;;391        }
;;;392        return (pevent_return);
;;;393    }
0001fc  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.512|
000200  4886              LDR      r0,|L1.1052|
000202  7800              LDRB     r0,[r0,#0]            ;319  ; OSIntNesting
000204  b120              CBZ      r0,|L1.528|
000206  f04f000f          MOV      r0,#0xf               ;320
00020a  7030              STRB     r0,[r6,#0]            ;320
00020c  4620              MOV      r0,r4                 ;321
00020e  e7f5              B        |L1.508|
                  |L1.528|
000210  f7fffffe          BL       OS_CPU_SR_Save
000214  9000              STR      r0,[sp,#0]            ;323
000216  7aa0              LDRB     r0,[r4,#0xa]          ;324
000218  b110              CBZ      r0,|L1.544|
00021a  f04f0801          MOV      r8,#1                 ;325
00021e  e001              B        |L1.548|
                  |L1.544|
000220  f04f0800          MOV      r8,#0                 ;327
                  |L1.548|
000224  f1ba0f00          CMP      r10,#0                ;329
000228  d003              BEQ      |L1.562|
00022a  f1ba0f01          CMP      r10,#1                ;329
00022e  d16d              BNE      |L1.780|
000230  e029              B        |L1.646|
                  |L1.562|
000232  f1b80f00          CMP      r8,#0                 ;331
000236  d11e              BNE      |L1.630|
000238  a07c              ADR      r0,|L1.1068|
00023a  6160              STR      r0,[r4,#0x14]         ;333
00023c  8920              LDRH     r0,[r4,#8]            ;335
00023e  ea4f2520          ASR      r5,r0,#8              ;335
000242  2dff              CMP      r5,#0xff              ;336
000244  d004              BEQ      |L1.592|
000246  f04f0000          MOV      r0,#0                 ;337
00024a  4976              LDR      r1,|L1.1060|
00024c  f8410025          STR      r0,[r1,r5,LSL #2]     ;337
                  |L1.592|
000250  f04f0000          MOV      r0,#0                 ;339
000254  7020              STRB     r0,[r4,#0]            ;339
000256  4874              LDR      r0,|L1.1064|
000258  6800              LDR      r0,[r0,#0]            ;340  ; OSEventFreeList
00025a  6060              STR      r0,[r4,#4]            ;340
00025c  f04f0000          MOV      r0,#0                 ;341
000260  8120              STRH     r0,[r4,#8]            ;341
000262  4871              LDR      r0,|L1.1064|
000264  6004              STR      r4,[r0,#0]            ;342  ; OSEventFreeList
000266  9800              LDR      r0,[sp,#0]            ;343
000268  f7fffffe          BL       OS_CPU_SR_Restore
00026c  f04f0000          MOV      r0,#0                 ;344
000270  7030              STRB     r0,[r6,#0]            ;344
000272  4607              MOV      r7,r0                 ;345
000274  e006              B        |L1.644|
                  |L1.630|
000276  9800              LDR      r0,[sp,#0]            ;347
000278  f7fffffe          BL       OS_CPU_SR_Restore
00027c  f04f0049          MOV      r0,#0x49              ;348
000280  7030              STRB     r0,[r6,#0]            ;348
000282  4627              MOV      r7,r4                 ;349
                  |L1.644|
000284  e04a              B        |L1.796|
                  |L1.646|
000286  8920              LDRH     r0,[r4,#8]            ;354
000288  ea4f2520          ASR      r5,r0,#8              ;354
00028c  2dff              CMP      r5,#0xff              ;355
00028e  d00f              BEQ      |L1.688|
000290  8920              LDRH     r0,[r4,#8]            ;356
000292  f0000bff          AND      r11,r0,#0xff          ;356
000296  f8d49004          LDR      r9,[r4,#4]            ;357
00029a  f1b90f00          CMP      r9,#0                 ;358
00029e  d007              BEQ      |L1.688|
0002a0  f8990036          LDRB     r0,[r9,#0x36]         ;359
0002a4  42a8              CMP      r0,r5                 ;359
0002a6  d103              BNE      |L1.688|
0002a8  4659              MOV      r1,r11                ;360
0002aa  4648              MOV      r0,r9                 ;360
0002ac  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L1.688|
0002b0  e005              B        |L1.702|
                  |L1.690|
0002b2  2302              MOVS     r3,#2                 ;365
0002b4  2210              MOVS     r2,#0x10              ;365
0002b6  2100              MOVS     r1,#0                 ;365
0002b8  4620              MOV      r0,r4                 ;365
0002ba  f7fffffe          BL       OS_EventTaskRdy
                  |L1.702|
0002be  7aa0              LDRB     r0,[r4,#0xa]          ;364
0002c0  2800              CMP      r0,#0                 ;364
0002c2  d1f6              BNE      |L1.690|
0002c4  a059              ADR      r0,|L1.1068|
0002c6  6160              STR      r0,[r4,#0x14]         ;368
0002c8  8920              LDRH     r0,[r4,#8]            ;370
0002ca  ea4f2520          ASR      r5,r0,#8              ;370
0002ce  2dff              CMP      r5,#0xff              ;371
0002d0  d004              BEQ      |L1.732|
0002d2  f04f0000          MOV      r0,#0                 ;372
0002d6  4953              LDR      r1,|L1.1060|
0002d8  f8410025          STR      r0,[r1,r5,LSL #2]     ;372
                  |L1.732|
0002dc  f04f0000          MOV      r0,#0                 ;374
0002e0  7020              STRB     r0,[r4,#0]            ;374
0002e2  4851              LDR      r0,|L1.1064|
0002e4  6800              LDR      r0,[r0,#0]            ;375  ; OSEventFreeList
0002e6  6060              STR      r0,[r4,#4]            ;375
0002e8  f04f0000          MOV      r0,#0                 ;376
0002ec  8120              STRH     r0,[r4,#8]            ;376
0002ee  484e              LDR      r0,|L1.1064|
0002f0  6004              STR      r4,[r0,#0]            ;377  ; OSEventFreeList
0002f2  9800              LDR      r0,[sp,#0]            ;378
0002f4  f7fffffe          BL       OS_CPU_SR_Restore
0002f8  f1b80f01          CMP      r8,#1                 ;379
0002fc  d101              BNE      |L1.770|
0002fe  f7fffffe          BL       OS_Sched
                  |L1.770|
000302  f04f0000          MOV      r0,#0                 ;382
000306  7030              STRB     r0,[r6,#0]            ;382
000308  4607              MOV      r7,r0                 ;383
00030a  e007              B        |L1.796|
                  |L1.780|
00030c  9800              LDR      r0,[sp,#0]            ;387
00030e  f7fffffe          BL       OS_CPU_SR_Restore
000312  f04f0007          MOV      r0,#7                 ;388
000316  7030              STRB     r0,[r6,#0]            ;388
000318  4627              MOV      r7,r4                 ;389
00031a  bf00              NOP                            ;390
                  |L1.796|
00031c  bf00              NOP                            ;351
00031e  4638              MOV      r0,r7                 ;392
000320  e76c              B        |L1.508|
;;;394    #endif
                          ENDP

                  OSMutexPend PROC
;;;436    
;;;437    void  OSMutexPend (OS_EVENT  *pevent,
000322  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;438                       INT32U     timeout,
;;;439                       INT8U     *perr)
;;;440    {
000326  b082              SUB      sp,sp,#8
000328  4605              MOV      r5,r0
00032a  4617              MOV      r7,r2
;;;441        INT8U      pcp;                                        /* Priority Ceiling Priority (PCP)          */
;;;442        INT8U      mprio;                                      /* Mutex owner priority                     */
;;;443        BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
;;;444        OS_TCB    *ptcb;
;;;445        OS_EVENT  *pevent2;
;;;446        INT8U      y;
;;;447    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;448        OS_CPU_SR  cpu_sr = 0u;
00032c  f04f0000          MOV      r0,#0
000330  9001              STR      r0,[sp,#4]
;;;449    #endif
;;;450    
;;;451    
;;;452    
;;;453    #ifdef OS_SAFETY_CRITICAL
;;;454        if (perr == (INT8U *)0) {
;;;455            OS_SAFETY_CRITICAL_EXCEPTION();
;;;456            return;
;;;457        }
;;;458    #endif
;;;459    
;;;460    #if OS_ARG_CHK_EN > 0u
;;;461        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;462            *perr = OS_ERR_PEVENT_NULL;
;;;463            return;
;;;464        }
;;;465    #endif
;;;466        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
000332  7828              LDRB     r0,[r5,#0]
000334  2804              CMP      r0,#4
000336  d005              BEQ      |L1.836|
;;;467            *perr = OS_ERR_EVENT_TYPE;
000338  f04f0001          MOV      r0,#1
00033c  7038              STRB     r0,[r7,#0]
                  |L1.830|
;;;468            return;
;;;469        }
;;;470        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;471            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
;;;472            return;
;;;473        }
;;;474        if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
;;;475            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;476            return;
;;;477        }
;;;478    /*$PAGE*/
;;;479        OS_ENTER_CRITICAL();
;;;480        pcp = (INT8U)(pevent->OSEventCnt >> 8u);               /* Get PCP from mutex                       */
;;;481                                                               /* Is Mutex available?                      */
;;;482        if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;483            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
;;;484            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
;;;485            pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
;;;486            if ((pcp != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;487                (OSTCBCur->OSTCBPrio <= pcp)) {                /*      PCP 'must' have a SMALLER prio ...  */
;;;488                 OS_EXIT_CRITICAL();                           /*      ... than current task!              */
;;;489                *perr = OS_ERR_PCP_LOWER;
;;;490            } else {
;;;491                 OS_EXIT_CRITICAL();
;;;492                *perr = OS_ERR_NONE;
;;;493            }
;;;494            return;
;;;495        }
;;;496        if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;497            mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8); /*  Get priority of mutex owner   */
;;;498            ptcb  = (OS_TCB *)(pevent->OSEventPtr);                   /*     Point to TCB of mutex owner   */
;;;499            if (ptcb->OSTCBPrio > pcp) {                              /*     Need to promote prio of owner?*/
;;;500                if (mprio > OSTCBCur->OSTCBPrio) {
;;;501                    y = ptcb->OSTCBY;
;;;502                    if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0u) {      /*     See if mutex owner is ready   */
;;;503                        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;     /*     Yes, Remove owner from Rdy ...*/
;;;504                        if (OSRdyTbl[y] == 0u) {                      /*          ... list at current prio */
;;;505                            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;506                        }
;;;507                        rdy = OS_TRUE;
;;;508                    } else {
;;;509                        pevent2 = ptcb->OSTCBEventPtr;
;;;510                        if (pevent2 != (OS_EVENT *)0) {               /* Remove from event wait list       */
;;;511                            y = ptcb->OSTCBY;
;;;512                            pevent2->OSEventTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;
;;;513                            if (pevent2->OSEventTbl[y] == 0u) {
;;;514                                pevent2->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;515                            }
;;;516                        }
;;;517                        rdy = OS_FALSE;                        /* No                                       */
;;;518                    }
;;;519                    ptcb->OSTCBPrio = pcp;                     /* Change owner task prio to PCP            */
;;;520    #if OS_LOWEST_PRIO <= 63u
;;;521                    ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3u);
;;;522                    ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07u);
;;;523    #else
;;;524                    ptcb->OSTCBY    = (INT8U)((INT8U)(ptcb->OSTCBPrio >> 4u) & 0xFFu);
;;;525                    ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0Fu);
;;;526    #endif
;;;527                    ptcb->OSTCBBitY = (OS_PRIO)(1uL << ptcb->OSTCBY);
;;;528                    ptcb->OSTCBBitX = (OS_PRIO)(1uL << ptcb->OSTCBX);
;;;529    
;;;530                    if (rdy == OS_TRUE) {                      /* If task was ready at owner's priority ...*/
;;;531                        OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.   */
;;;532                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;533                    } else {
;;;534                        pevent2 = ptcb->OSTCBEventPtr;
;;;535                        if (pevent2 != (OS_EVENT *)0) {        /* Add to event wait list                   */
;;;536                            pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
;;;537                            pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;538                        }
;;;539                    }
;;;540                    OSTCBPrioTbl[pcp] = ptcb;
;;;541                }
;;;542            }
;;;543        }
;;;544        OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
;;;545        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;546        OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
;;;547        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;548        OS_EXIT_CRITICAL();
;;;549        OS_Sched();                                       /* Find next highest priority task ready         */
;;;550        OS_ENTER_CRITICAL();
;;;551        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;552            case OS_STAT_PEND_OK:
;;;553                 *perr = OS_ERR_NONE;
;;;554                 break;
;;;555    
;;;556            case OS_STAT_PEND_ABORT:
;;;557                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
;;;558                 break;
;;;559    
;;;560            case OS_STAT_PEND_TO:
;;;561            default:
;;;562                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;563                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
;;;564                 break;
;;;565        }
;;;566        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;567        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;568        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;569    #if (OS_EVENT_MULTI_EN > 0u)
;;;570        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;571    #endif
;;;572        OS_EXIT_CRITICAL();
;;;573    }
00033e  b005              ADD      sp,sp,#0x14
000340  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.836|
000344  4835              LDR      r0,|L1.1052|
000346  7800              LDRB     r0,[r0,#0]            ;470  ; OSIntNesting
000348  b118              CBZ      r0,|L1.850|
00034a  f04f0002          MOV      r0,#2                 ;471
00034e  7038              STRB     r0,[r7,#0]            ;471
000350  e7f5              B        |L1.830|
                  |L1.850|
000352  483a              LDR      r0,|L1.1084|
000354  7800              LDRB     r0,[r0,#0]            ;474  ; OSLockNesting
000356  b118              CBZ      r0,|L1.864|
000358  f04f000d          MOV      r0,#0xd               ;475
00035c  7038              STRB     r0,[r7,#0]            ;475
00035e  e7ee              B        |L1.830|
                  |L1.864|
000360  f7fffffe          BL       OS_CPU_SR_Save
000364  9001              STR      r0,[sp,#4]            ;479
000366  8928              LDRH     r0,[r5,#8]            ;480
000368  ea4f2920          ASR      r9,r0,#8              ;480
00036c  8928              LDRH     r0,[r5,#8]            ;482
00036e  b2c0              UXTB     r0,r0                 ;482
000370  28ff              CMP      r0,#0xff              ;482
000372  d125              BNE      |L1.960|
000374  8928              LDRH     r0,[r5,#8]            ;483
000376  f400407f          AND      r0,r0,#0xff00         ;483
00037a  8128              STRH     r0,[r5,#8]            ;483
00037c  8928              LDRH     r0,[r5,#8]            ;484
00037e  4928              LDR      r1,|L1.1056|
000380  6809              LDR      r1,[r1,#0]            ;484  ; OSTCBCur
000382  f8911036          LDRB     r1,[r1,#0x36]         ;484
000386  ea400001          ORR      r0,r0,r1              ;484
00038a  8128              STRH     r0,[r5,#8]            ;484
00038c  4824              LDR      r0,|L1.1056|
00038e  6800              LDR      r0,[r0,#0]            ;485  ; OSTCBCur
000390  6068              STR      r0,[r5,#4]            ;485
000392  f1b90fff          CMP      r9,#0xff              ;486
000396  d00c              BEQ      |L1.946|
000398  4821              LDR      r0,|L1.1056|
00039a  6800              LDR      r0,[r0,#0]            ;487  ; OSTCBCur
00039c  f8900036          LDRB     r0,[r0,#0x36]         ;487
0003a0  4548              CMP      r0,r9                 ;487
0003a2  dc06              BGT      |L1.946|
0003a4  9801              LDR      r0,[sp,#4]            ;488
0003a6  f7fffffe          BL       OS_CPU_SR_Restore
0003aa  f04f0078          MOV      r0,#0x78              ;489
0003ae  7038              STRB     r0,[r7,#0]            ;489
0003b0  e005              B        |L1.958|
                  |L1.946|
0003b2  9801              LDR      r0,[sp,#4]            ;491
0003b4  f7fffffe          BL       OS_CPU_SR_Restore
0003b8  f04f0000          MOV      r0,#0                 ;492
0003bc  7038              STRB     r0,[r7,#0]            ;492
                  |L1.958|
0003be  e7be              B        |L1.830|
                  |L1.960|
0003c0  f1b90fff          CMP      r9,#0xff              ;496
0003c4  d07e              BEQ      |L1.1220|
0003c6  8928              LDRH     r0,[r5,#8]            ;497
0003c8  f0000bff          AND      r11,r0,#0xff          ;497
0003cc  686c              LDR      r4,[r5,#4]            ;498
0003ce  f8940036          LDRB     r0,[r4,#0x36]         ;499
0003d2  4548              CMP      r0,r9                 ;499
0003d4  dd76              BLE      |L1.1220|
0003d6  4812              LDR      r0,|L1.1056|
0003d8  6800              LDR      r0,[r0,#0]            ;500  ; OSTCBCur
0003da  f8900036          LDRB     r0,[r0,#0x36]         ;500
0003de  4558              CMP      r0,r11                ;500
0003e0  da70              BGE      |L1.1220|
0003e2  f8948038          LDRB     r8,[r4,#0x38]         ;501
0003e6  4812              LDR      r0,|L1.1072|
0003e8  f8100008          LDRB     r0,[r0,r8]            ;502
0003ec  f8941039          LDRB     r1,[r4,#0x39]         ;502
0003f0  4208              TST      r0,r1                 ;502
0003f2  d031              BEQ      |L1.1112|
0003f4  480e              LDR      r0,|L1.1072|
0003f6  f8100008          LDRB     r0,[r0,r8]            ;503
0003fa  f8941039          LDRB     r1,[r4,#0x39]         ;503
0003fe  ea6f0101          MVN      r1,r1                 ;503
000402  b2c9              UXTB     r1,r1                 ;503
000404  ea000001          AND      r0,r0,r1              ;503
000408  4909              LDR      r1,|L1.1072|
00040a  f8010008          STRB     r0,[r1,r8]            ;503
00040e  4608              MOV      r0,r1                 ;504
000410  f8100008          LDRB     r0,[r0,r8]            ;504
000414  b9e8              CBNZ     r0,|L1.1106|
000416  f894003a          LDRB     r0,[r4,#0x3a]         ;505
00041a  e011              B        |L1.1088|
                  |L1.1052|
                          DCD      OSIntNesting
                  |L1.1056|
                          DCD      OSTCBCur
                  |L1.1060|
                          DCD      OSTCBPrioTbl
                  |L1.1064|
                          DCD      OSEventFreeList
                  |L1.1068|
00042c  3f00              DCB      "?",0
00042e  00                DCB      0
00042f  00                DCB      0
                  |L1.1072|
                          DCD      OSRdyTbl
                  |L1.1076|
                          DCD      OSRdyGrp
                  |L1.1080|
                          DCD      OSPrioCur
                  |L1.1084|
                          DCD      OSLockNesting
                  |L1.1088|
000440  ea6f0000          MVN      r0,r0                 ;505
000444  b2c0              UXTB     r0,r0                 ;505
000446  49b3              LDR      r1,|L1.1812|
000448  7809              LDRB     r1,[r1,#0]            ;505  ; OSRdyGrp
00044a  ea000001          AND      r0,r0,r1              ;505
00044e  49b1              LDR      r1,|L1.1812|
000450  7008              STRB     r0,[r1,#0]            ;505
                  |L1.1106|
000452  f04f0a01          MOV      r10,#1                ;507
000456  e021              B        |L1.1180|
                  |L1.1112|
000458  69e6              LDR      r6,[r4,#0x1c]         ;509
00045a  b1ee              CBZ      r6,|L1.1176|
00045c  f8948038          LDRB     r8,[r4,#0x38]         ;511
000460  f106000b          ADD      r0,r6,#0xb            ;512
000464  f8100008          LDRB     r0,[r0,r8]            ;512
000468  f8941039          LDRB     r1,[r4,#0x39]         ;512
00046c  ea6f0101          MVN      r1,r1                 ;512
000470  b2c9              UXTB     r1,r1                 ;512
000472  ea000001          AND      r0,r0,r1              ;512
000476  f106010b          ADD      r1,r6,#0xb            ;512
00047a  f8010008          STRB     r0,[r1,r8]            ;512
00047e  4608              MOV      r0,r1                 ;513
000480  f8100008          LDRB     r0,[r0,r8]            ;513
000484  b940              CBNZ     r0,|L1.1176|
000486  7ab0              LDRB     r0,[r6,#0xa]          ;514
000488  f894103a          LDRB     r1,[r4,#0x3a]         ;514
00048c  ea6f0101          MVN      r1,r1                 ;514
000490  b2c9              UXTB     r1,r1                 ;514
000492  ea000001          AND      r0,r0,r1              ;514
000496  72b0              STRB     r0,[r6,#0xa]          ;514
                  |L1.1176|
000498  f04f0a00          MOV      r10,#0                ;517
                  |L1.1180|
00049c  f8049f36          STRB     r9,[r4,#0x36]!        ;519
0004a0  7820              LDRB     r0,[r4,#0]            ;521
0004a2  ea4f00e0          ASR      r0,r0,#3              ;521
0004a6  70a0              STRB     r0,[r4,#2]            ;521
0004a8  7820              LDRB     r0,[r4,#0]            ;522
0004aa  f0000007          AND      r0,r0,#7              ;522
0004ae  7060              STRB     r0,[r4,#1]            ;522
0004b0  78a1              LDRB     r1,[r4,#2]            ;527
0004b2  f04f0001          MOV      r0,#1                 ;527
0004b6  fa00f001          LSL      r0,r0,r1              ;527
0004ba  7120              STRB     r0,[r4,#4]            ;527
0004bc  7861              LDRB     r1,[r4,#1]            ;528
0004be  f04f0001          MOV      r0,#1                 ;528
0004c2  e000              B        |L1.1222|
                  |L1.1220|
0004c4  e033              B        |L1.1326|
                  |L1.1222|
0004c6  fa00f001          LSL      r0,r0,r1              ;528
0004ca  70e0              STRB     r0,[r4,#3]            ;528
0004cc  f1a40436          SUB      r4,r4,#0x36           ;528
0004d0  f1ba0f01          CMP      r10,#1                ;530
0004d4  d113              BNE      |L1.1278|
0004d6  f1040438          ADD      r4,r4,#0x38           ;531
0004da  78a0              LDRB     r0,[r4,#2]            ;531
0004dc  498d              LDR      r1,|L1.1812|
0004de  7809              LDRB     r1,[r1,#0]            ;531  ; OSRdyGrp
0004e0  ea400001          ORR      r0,r0,r1              ;531
0004e4  498b              LDR      r1,|L1.1812|
0004e6  7008              STRB     r0,[r1,#0]            ;531
0004e8  7820              LDRB     r0,[r4,#0]            ;532
0004ea  498b              LDR      r1,|L1.1816|
0004ec  5c08              LDRB     r0,[r1,r0]            ;532
0004ee  7861              LDRB     r1,[r4,#1]            ;532
0004f0  ea400001          ORR      r0,r0,r1              ;532
0004f4  f8141938          LDRB     r1,[r4],#-0x38        ;532
0004f8  4a87              LDR      r2,|L1.1816|
0004fa  5450              STRB     r0,[r2,r1]            ;532
0004fc  e014              B        |L1.1320|
                  |L1.1278|
0004fe  69e6              LDR      r6,[r4,#0x1c]         ;534
000500  b196              CBZ      r6,|L1.1320|
000502  7ab0              LDRB     r0,[r6,#0xa]          ;536
000504  f1040438          ADD      r4,r4,#0x38           ;536
000508  78a1              LDRB     r1,[r4,#2]            ;536
00050a  ea400001          ORR      r0,r0,r1              ;536
00050e  72b0              STRB     r0,[r6,#0xa]          ;536
000510  7821              LDRB     r1,[r4,#0]            ;537
000512  f106000b          ADD      r0,r6,#0xb            ;537
000516  5c40              LDRB     r0,[r0,r1]            ;537
000518  7861              LDRB     r1,[r4,#1]            ;537
00051a  ea400001          ORR      r0,r0,r1              ;537
00051e  f8142938          LDRB     r2,[r4],#-0x38        ;537
000522  f106010b          ADD      r1,r6,#0xb            ;537
000526  5488              STRB     r0,[r1,r2]            ;537
                  |L1.1320|
000528  487c              LDR      r0,|L1.1820|
00052a  f8404029          STR      r4,[r0,r9,LSL #2]     ;540
                  |L1.1326|
00052e  487c              LDR      r0,|L1.1824|
000530  6800              LDR      r0,[r0,#0]            ;544  ; OSTCBCur
000532  f8900034          LDRB     r0,[r0,#0x34]         ;544
000536  f0400010          ORR      r0,r0,#0x10           ;544
00053a  4979              LDR      r1,|L1.1824|
00053c  6809              LDR      r1,[r1,#0]            ;544  ; OSTCBCur
00053e  f8810034          STRB     r0,[r1,#0x34]         ;544
000542  f04f0000          MOV      r0,#0                 ;545
000546  4976              LDR      r1,|L1.1824|
000548  6809              LDR      r1,[r1,#0]            ;545  ; OSTCBCur
00054a  f8810035          STRB     r0,[r1,#0x35]         ;545
00054e  4974              LDR      r1,|L1.1824|
000550  9803              LDR      r0,[sp,#0xc]          ;546
000552  6809              LDR      r1,[r1,#0]            ;546  ; OSTCBCur
000554  6308              STR      r0,[r1,#0x30]         ;546
000556  4628              MOV      r0,r5                 ;547
000558  f7fffffe          BL       OS_EventTaskWait
00055c  9801              LDR      r0,[sp,#4]            ;548
00055e  f7fffffe          BL       OS_CPU_SR_Restore
000562  f7fffffe          BL       OS_Sched
000566  f7fffffe          BL       OS_CPU_SR_Save
00056a  9001              STR      r0,[sp,#4]            ;550
00056c  486c              LDR      r0,|L1.1824|
00056e  6800              LDR      r0,[r0,#0]            ;551  ; OSTCBCur
000570  f8900035          LDRB     r0,[r0,#0x35]         ;551
000574  b120              CBZ      r0,|L1.1408|
000576  2801              CMP      r0,#1                 ;551
000578  d00b              BEQ      |L1.1426|
00057a  2802              CMP      r0,#2                 ;551
00057c  d108              BNE      |L1.1424|
00057e  e003              B        |L1.1416|
                  |L1.1408|
000580  f04f0000          MOV      r0,#0                 ;553
000584  7038              STRB     r0,[r7,#0]            ;553
000586  e00d              B        |L1.1444|
                  |L1.1416|
000588  f04f000e          MOV      r0,#0xe               ;557
00058c  7038              STRB     r0,[r7,#0]            ;557
00058e  e009              B        |L1.1444|
                  |L1.1424|
000590  bf00              NOP                            ;560
                  |L1.1426|
000592  4629              MOV      r1,r5                 ;562
000594  4862              LDR      r0,|L1.1824|
000596  6800              LDR      r0,[r0,#0]            ;562  ; OSTCBCur
000598  f7fffffe          BL       OS_EventTaskRemove
00059c  f04f000a          MOV      r0,#0xa               ;563
0005a0  7038              STRB     r0,[r7,#0]            ;563
0005a2  bf00              NOP                            ;564
                  |L1.1444|
0005a4  bf00              NOP                            ;554
0005a6  f04f0000          MOV      r0,#0                 ;566
0005aa  495d              LDR      r1,|L1.1824|
0005ac  6809              LDR      r1,[r1,#0]            ;566  ; OSTCBCur
0005ae  f8810034          STRB     r0,[r1,#0x34]         ;566
0005b2  495b              LDR      r1,|L1.1824|
0005b4  6809              LDR      r1,[r1,#0]            ;567  ; OSTCBCur
0005b6  f8810035          STRB     r0,[r1,#0x35]         ;567
0005ba  4959              LDR      r1,|L1.1824|
0005bc  6809              LDR      r1,[r1,#0]            ;568  ; OSTCBCur
0005be  61c8              STR      r0,[r1,#0x1c]         ;568
0005c0  4957              LDR      r1,|L1.1824|
0005c2  6809              LDR      r1,[r1,#0]            ;570  ; OSTCBCur
0005c4  6208              STR      r0,[r1,#0x20]         ;570
0005c6  9801              LDR      r0,[sp,#4]            ;572
0005c8  f7fffffe          BL       OS_CPU_SR_Restore
0005cc  bf00              NOP      
0005ce  e6b6              B        |L1.830|
;;;574    /*$PAGE*/
                          ENDP

                  OSMutexPost PROC
;;;598    
;;;599    INT8U  OSMutexPost (OS_EVENT *pevent)
0005d0  e92d41f0          PUSH     {r4-r8,lr}
;;;600    {
0005d4  4604              MOV      r4,r0
;;;601        INT8U      pcp;                                   /* Priority ceiling priority                     */
;;;602        INT8U      prio;
;;;603    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;604        OS_CPU_SR  cpu_sr = 0u;
0005d6  f04f0700          MOV      r7,#0
;;;605    #endif
;;;606    
;;;607    
;;;608    
;;;609        if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
0005da  4852              LDR      r0,|L1.1828|
0005dc  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0005de  b110              CBZ      r0,|L1.1510|
;;;610            return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
0005e0  2005              MOVS     r0,#5
                  |L1.1506|
;;;611        }
;;;612    #if OS_ARG_CHK_EN > 0u
;;;613        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;614            return (OS_ERR_PEVENT_NULL);
;;;615        }
;;;616    #endif
;;;617        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
;;;618            return (OS_ERR_EVENT_TYPE);
;;;619        }
;;;620        OS_ENTER_CRITICAL();
;;;621        pcp  = (INT8U)(pevent->OSEventCnt >> 8u);         /* Get priority ceiling priority of mutex        */
;;;622        prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
;;;623        if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
;;;624            OS_EXIT_CRITICAL();
;;;625            return (OS_ERR_NOT_MUTEX_OWNER);
;;;626        }
;;;627        if (pcp != OS_PRIO_MUTEX_CEIL_DIS) {
;;;628            if (OSTCBCur->OSTCBPrio == pcp) {             /* Did we have to raise current task's priority? */
;;;629                OSMutex_RdyAtPrio(OSTCBCur, prio);        /* Restore the task's original priority          */
;;;630            }
;;;631            OSTCBPrioTbl[pcp] = OS_TCB_RESERVED;          /* Reserve table entry                           */
;;;632        }
;;;633        if (pevent->OSEventGrp != 0u) {                   /* Any task waiting for the mutex?               */
;;;634                                                          /* Yes, Make HPT waiting for mutex ready         */
;;;635            prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;636            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
;;;637            pevent->OSEventCnt |= prio;
;;;638            pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
;;;639            if ((pcp  != OS_PRIO_MUTEX_CEIL_DIS) &&
;;;640                (prio <= pcp)) {                          /*      PCP 'must' have a SMALLER prio ...       */
;;;641                OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
;;;642                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;643                return (OS_ERR_PCP_LOWER);
;;;644            } else {
;;;645                OS_EXIT_CRITICAL();
;;;646                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;647                return (OS_ERR_NONE);
;;;648            }
;;;649        }
;;;650        pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
;;;651        pevent->OSEventPtr  = (void *)0;
;;;652        OS_EXIT_CRITICAL();
;;;653        return (OS_ERR_NONE);
;;;654    }
0005e2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1510|
0005e6  7820              LDRB     r0,[r4,#0]            ;617
0005e8  2804              CMP      r0,#4                 ;617
0005ea  d001              BEQ      |L1.1520|
0005ec  2001              MOVS     r0,#1                 ;618
0005ee  e7f8              B        |L1.1506|
                  |L1.1520|
0005f0  f7fffffe          BL       OS_CPU_SR_Save
0005f4  4607              MOV      r7,r0                 ;620
0005f6  8920              LDRH     r0,[r4,#8]            ;621
0005f8  ea4f2520          ASR      r5,r0,#8              ;621
0005fc  8920              LDRH     r0,[r4,#8]            ;622
0005fe  b2c6              UXTB     r6,r0                 ;622
000600  4947              LDR      r1,|L1.1824|
000602  6860              LDR      r0,[r4,#4]            ;623
000604  6809              LDR      r1,[r1,#0]            ;623  ; OSTCBCur
000606  4288              CMP      r0,r1                 ;623
000608  d004              BEQ      |L1.1556|
00060a  4638              MOV      r0,r7                 ;624
00060c  f7fffffe          BL       OS_CPU_SR_Restore
000610  2064              MOVS     r0,#0x64              ;625
000612  e7e6              B        |L1.1506|
                  |L1.1556|
000614  2dff              CMP      r5,#0xff              ;627
000616  d00f              BEQ      |L1.1592|
000618  4841              LDR      r0,|L1.1824|
00061a  6800              LDR      r0,[r0,#0]            ;628  ; OSTCBCur
00061c  f8900036          LDRB     r0,[r0,#0x36]         ;628
000620  42a8              CMP      r0,r5                 ;628
000622  d104              BNE      |L1.1582|
000624  4631              MOV      r1,r6                 ;629
000626  483e              LDR      r0,|L1.1824|
000628  6800              LDR      r0,[r0,#0]            ;629  ; OSTCBCur
00062a  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L1.1582|
00062e  f04f0001          MOV      r0,#1                 ;631
000632  493a              LDR      r1,|L1.1820|
000634  f8410025          STR      r0,[r1,r5,LSL #2]     ;631
                  |L1.1592|
000638  7aa0              LDRB     r0,[r4,#0xa]          ;633
00063a  b320              CBZ      r0,|L1.1670|
00063c  2300              MOVS     r3,#0                 ;635
00063e  2210              MOVS     r2,#0x10              ;635
000640  4619              MOV      r1,r3                 ;635
000642  4620              MOV      r0,r4                 ;635
000644  f7fffffe          BL       OS_EventTaskRdy
000648  4606              MOV      r6,r0                 ;635
00064a  8920              LDRH     r0,[r4,#8]            ;636
00064c  f400407f          AND      r0,r0,#0xff00         ;636
000650  8120              STRH     r0,[r4,#8]            ;636
000652  8920              LDRH     r0,[r4,#8]            ;637
000654  ea400006          ORR      r0,r0,r6              ;637
000658  8120              STRH     r0,[r4,#8]            ;637
00065a  4830              LDR      r0,|L1.1820|
00065c  f8500026          LDR      r0,[r0,r6,LSL #2]     ;638
000660  6060              STR      r0,[r4,#4]            ;638
000662  2dff              CMP      r5,#0xff              ;639
000664  d008              BEQ      |L1.1656|
000666  42ae              CMP      r6,r5                 ;640
000668  dc06              BGT      |L1.1656|
00066a  4638              MOV      r0,r7                 ;641
00066c  f7fffffe          BL       OS_CPU_SR_Restore
000670  f7fffffe          BL       OS_Sched
000674  2078              MOVS     r0,#0x78              ;643
000676  e7b4              B        |L1.1506|
                  |L1.1656|
000678  4638              MOV      r0,r7                 ;645
00067a  f7fffffe          BL       OS_CPU_SR_Restore
00067e  f7fffffe          BL       OS_Sched
000682  2000              MOVS     r0,#0                 ;647
000684  e7ad              B        |L1.1506|
                  |L1.1670|
000686  8920              LDRH     r0,[r4,#8]            ;650
000688  f04000ff          ORR      r0,r0,#0xff           ;650
00068c  8120              STRH     r0,[r4,#8]            ;650
00068e  f04f0000          MOV      r0,#0                 ;651
000692  6060              STR      r0,[r4,#4]            ;651
000694  4638              MOV      r0,r7                 ;652
000696  f7fffffe          BL       OS_CPU_SR_Restore
00069a  2000              MOVS     r0,#0                 ;653
00069c  e7a1              B        |L1.1506|
;;;655    /*$PAGE*/
                          ENDP

                  OSMutexQuery PROC
;;;674    #if OS_MUTEX_QUERY_EN > 0u
;;;675    INT8U  OSMutexQuery (OS_EVENT       *pevent,
00069e  e92d47f0          PUSH     {r4-r10,lr}
;;;676                         OS_MUTEX_DATA  *p_mutex_data)
;;;677    {
0006a2  4605              MOV      r5,r0
0006a4  460c              MOV      r4,r1
;;;678        INT8U       i;
;;;679        OS_PRIO    *psrc;
;;;680        OS_PRIO    *pdest;
;;;681    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;682        OS_CPU_SR   cpu_sr = 0u;
0006a6  f04f0900          MOV      r9,#0
;;;683    #endif
;;;684    
;;;685    
;;;686    
;;;687        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
0006aa  481e              LDR      r0,|L1.1828|
0006ac  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0006ae  b110              CBZ      r0,|L1.1718|
;;;688            return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
0006b0  2006              MOVS     r0,#6
                  |L1.1714|
;;;689        }
;;;690    #if OS_ARG_CHK_EN > 0u
;;;691        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;692            return (OS_ERR_PEVENT_NULL);
;;;693        }
;;;694        if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
;;;695            return (OS_ERR_PDATA_NULL);
;;;696        }
;;;697    #endif
;;;698        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;699            return (OS_ERR_EVENT_TYPE);
;;;700        }
;;;701        OS_ENTER_CRITICAL();
;;;702        p_mutex_data->OSMutexPCP  = (INT8U)(pevent->OSEventCnt >> 8u);
;;;703        p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
;;;704        if (p_mutex_data->OSOwnerPrio == 0xFFu) {
;;;705            p_mutex_data->OSValue = OS_TRUE;
;;;706        } else {
;;;707            p_mutex_data->OSValue = OS_FALSE;
;;;708        }
;;;709        p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
;;;710        psrc                      = &pevent->OSEventTbl[0];
;;;711        pdest                     = &p_mutex_data->OSEventTbl[0];
;;;712        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;713            *pdest++ = *psrc++;
;;;714        }
;;;715        OS_EXIT_CRITICAL();
;;;716        return (OS_ERR_NONE);
;;;717    }
0006b2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1718|
0006b6  7828              LDRB     r0,[r5,#0]            ;698
0006b8  2804              CMP      r0,#4                 ;698
0006ba  d001              BEQ      |L1.1728|
0006bc  2001              MOVS     r0,#1                 ;699
0006be  e7f8              B        |L1.1714|
                  |L1.1728|
0006c0  f7fffffe          BL       OS_CPU_SR_Save
0006c4  4681              MOV      r9,r0                 ;701
0006c6  8928              LDRH     r0,[r5,#8]            ;702
0006c8  ea4f2020          ASR      r0,r0,#8              ;702
0006cc  72e0              STRB     r0,[r4,#0xb]          ;702
0006ce  8928              LDRH     r0,[r5,#8]            ;703
0006d0  72a0              STRB     r0,[r4,#0xa]          ;703
0006d2  7aa0              LDRB     r0,[r4,#0xa]          ;704
0006d4  28ff              CMP      r0,#0xff              ;704
0006d6  d103              BNE      |L1.1760|
0006d8  f04f0001          MOV      r0,#1                 ;705
0006dc  7260              STRB     r0,[r4,#9]            ;705
0006de  e002              B        |L1.1766|
                  |L1.1760|
0006e0  f04f0000          MOV      r0,#0                 ;707
0006e4  7260              STRB     r0,[r4,#9]            ;707
                  |L1.1766|
0006e6  7aa8              LDRB     r0,[r5,#0xa]          ;709
0006e8  7220              STRB     r0,[r4,#8]            ;709
0006ea  f105080b          ADD      r8,r5,#0xb            ;710
0006ee  4626              MOV      r6,r4                 ;711
0006f0  f04f0700          MOV      r7,#0                 ;712
0006f4  e006              B        |L1.1796|
                  |L1.1782|
0006f6  f8180b01          LDRB     r0,[r8],#1            ;713
0006fa  f8060b01          STRB     r0,[r6],#1            ;713
0006fe  f1070001          ADD      r0,r7,#1              ;712
000702  b2c7              UXTB     r7,r0                 ;712
                  |L1.1796|
000704  2f08              CMP      r7,#8                 ;712
000706  d3f6              BCC      |L1.1782|
000708  4648              MOV      r0,r9                 ;715
00070a  f7fffffe          BL       OS_CPU_SR_Restore
00070e  2000              MOVS     r0,#0                 ;716
000710  e7cf              B        |L1.1714|
;;;718    #endif                                                     /* OS_MUTEX_QUERY_EN                        */
                          ENDP

000712  0000              DCW      0x0000
                  |L1.1812|
                          DCD      OSRdyGrp
                  |L1.1816|
                          DCD      OSRdyTbl
                  |L1.1820|
                          DCD      OSTCBPrioTbl
                  |L1.1824|
                          DCD      OSTCBCur
                  |L1.1828|
                          DCD      OSIntNesting
