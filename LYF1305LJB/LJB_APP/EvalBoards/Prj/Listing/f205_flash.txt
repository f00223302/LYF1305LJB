; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\f205_flash.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\f205_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\f205_flash.crf ..\App\F205_Flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  F205_EraseSectors PROC
;;;21     
;;;22     uint8_t F205_EraseSectors(uint32_t StartSec, uint32_t EndSec)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;23     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;24     	uint8_t try = 3;
000008  f04f0803          MOV      r8,#3
;;;25     	uint8_t err;
;;;26     	uint32_t i;
;;;27     
;;;28     	while (try--){
00000c  e015              B        |L1.58|
                  |L1.14|
;;;29     
;;;30     		err = 0;
00000e  f04f0700          MOV      r7,#0
;;;31     		/* Unlock the Flash to enable the flash control register access *************/ 
;;;32       		FLASH_Unlock();
000012  f7fffffe          BL       FLASH_Unlock
;;;33     
;;;34       		for (i = StartSec; i <= EndSec; i += 8)
000016  462c              MOV      r4,r5
000018  e00a              B        |L1.48|
                  |L1.26|
;;;35       		{
;;;36         		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
;;;37            			be done by word */ 
;;;38         		if (FLASH_EraseSector(i, VoltageRange_3) != FLASH_COMPLETE)
00001a  2102              MOVS     r1,#2
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       FLASH_EraseSector
000022  2808              CMP      r0,#8
000024  d002              BEQ      |L1.44|
;;;39         		{ 
;;;40           			/* Error occurred while sector erase. 
;;;41              			User can add here some code to deal with this error  */
;;;42           			err = 1;
000026  f04f0701          MOV      r7,#1
;;;43     				break;
00002a  e003              B        |L1.52|
                  |L1.44|
00002c  f1040408          ADD      r4,r4,#8              ;34
                  |L1.48|
000030  42b4              CMP      r4,r6                 ;34
000032  d9f2              BLS      |L1.26|
                  |L1.52|
000034  bf00              NOP      
;;;44     			}
;;;45         	}
;;;46     		if (!err)
000036  b907              CBNZ     r7,|L1.58|
;;;47     			break;
000038  e006              B        |L1.72|
                  |L1.58|
00003a  ea5f0008          MOVS     r0,r8                 ;28
00003e  f1a80101          SUB      r1,r8,#1              ;28
000042  f00108ff          AND      r8,r1,#0xff           ;28
000046  d1e2              BNE      |L1.14|
                  |L1.72|
000048  bf00              NOP      
;;;48       	}
;;;49     	return err;
00004a  4638              MOV      r0,r7
;;;50     }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;51     
                          ENDP

                  F205_ProgramFlash PROC
;;;52     uint8_t F205_ProgramFlash(uint32_t addr, uint32_t data)
000050  b570              PUSH     {r4-r6,lr}
;;;53     {
000052  4604              MOV      r4,r0
000054  460d              MOV      r5,r1
;;;54     	uint32_t data32;
;;;55     
;;;56     	if (FLASH_ProgramWord(addr, data) == FLASH_COMPLETE){
000056  4629              MOV      r1,r5
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       FLASH_ProgramWord
00005e  2808              CMP      r0,#8
000060  d106              BNE      |L1.112|
;;;57     
;;;58     		data32 = *(__IO uint32_t*)addr;
000062  6826              LDR      r6,[r4,#0]
;;;59     
;;;60         	if (data32 != data)
000064  42ae              CMP      r6,r5
000066  d001              BEQ      |L1.108|
;;;61           		return 1;
000068  2001              MOVS     r0,#1
                  |L1.106|
;;;62     		else
;;;63     			return 0;
;;;64         }
;;;65         else
;;;66     		return 1;
;;;67     }
00006a  bd70              POP      {r4-r6,pc}
                  |L1.108|
00006c  2000              MOVS     r0,#0                 ;63
00006e  e7fc              B        |L1.106|
                  |L1.112|
000070  2001              MOVS     r0,#1                 ;66
000072  e7fa              B        |L1.106|
;;;68     
                          ENDP

                  F205_WriteProtection PROC
;;;69     
;;;70     uint8_t F205_WriteProtection(uint32_t WRPSec, uint8_t Enable)
000074  e92d41f0          PUSH     {r4-r8,lr}
;;;71     {
000078  4604              MOV      r4,r0
00007a  460e              MOV      r6,r1
;;;72     	uint32_t SectorsWRPStatus;
;;;73     	uint8_t err, try = 3;
00007c  f04f0803          MOV      r8,#3
;;;74     
;;;75     	if (WRPSec > 0x3f)
000080  2c3f              CMP      r4,#0x3f
000082  d902              BLS      |L1.138|
;;;76     		return 5;
000084  2005              MOVS     r0,#5
                  |L1.134|
;;;77     
;;;78     	while (try--){
;;;79     
;;;80     		err = 0;
;;;81     
;;;82     		FLASH_Unlock();
;;;83     		FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
;;;84     	
;;;85     		/* Get FLASH_WRP_SECTORS write protection status */
;;;86         	SectorsWRPStatus = FLASH_OB_GetWRP() & WRPSec;
;;;87     
;;;88     		if (Enable){///Enable write protection
;;;89     
;;;90     #if (FLASH_USE_PROTECTION>0)
;;;91     			/* If FLASH_WRP_SECTORS are not write protected, enable the write protection */
;;;92     			if (SectorsWRPStatus != 0){///至少一个SEC不是写保护
;;;93     
;;;94           			/* Enable the Flash option control register access */
;;;95           			FLASH_OB_Unlock();
;;;96     
;;;97           			/* Enable FLASH_WRP_SECTORS write protection */
;;;98           			FLASH_OB_WRPConfig(WRPSec, ENABLE); 
;;;99     
;;;100          			/* Start the Option Bytes programming process */  
;;;101          			if (FLASH_OB_Launch() != FLASH_COMPLETE)
;;;102            			err = 1;
;;;103    
;;;104          			/* Disable the Flash option control register access (recommended to protect 
;;;105            			the option Bytes against possible unwanted operations) */
;;;106          			FLASH_OB_Lock();
;;;107    
;;;108          			/* Get FLASH_WRP_SECTORS write protection status */
;;;109          			SectorsWRPStatus = FLASH_OB_GetWRP() & WRPSec;
;;;110    
;;;111          			/* Check if FLASH_WRP_SECTORS are write protected */
;;;112          			if (SectorsWRPStatus != 0x00)
;;;113    					err = 1;
;;;114    			}
;;;115    #endif
;;;116    		}
;;;117    
;;;118    		else{
;;;119    
;;;120        		if (SectorsWRPStatus != WRPSec){///至少一个SEC是写保护
;;;121    
;;;122         			/* If FLASH_WRP_SECTORS are write protected, disable the write protection */
;;;123    
;;;124          			/* Enable the Flash option control register access */
;;;125          			FLASH_OB_Unlock();
;;;126    
;;;127          			/* Disable FLASH_WRP_SECTORS write protection */
;;;128          			FLASH_OB_WRPConfig(WRPSec, DISABLE); 
;;;129    
;;;130          			/* Start the Option Bytes programming process */  
;;;131          			if (FLASH_OB_Launch() != FLASH_COMPLETE)
;;;132            			err = 1;
;;;133    
;;;134          			/* Disable the Flash option control register access (recommended to protect 
;;;135            			the option Bytes against possible unwanted operations) */
;;;136          			FLASH_OB_Lock();
;;;137    
;;;138          			/* Get FLASH_WRP_SECTORS write protection status */
;;;139          			SectorsWRPStatus = FLASH_OB_GetWRP() & WRPSec;
;;;140      
;;;141          			/* Check if FLASH_WRP_SECTORS write protection is disabled */
;;;142          			if (SectorsWRPStatus != WRPSec)
;;;143    					err = 1;
;;;144    			}
;;;145    		}
;;;146    		if (!err)
;;;147    			break;
;;;148    	}
;;;149    	return err;
;;;150    }
000086  e8bd81f0          POP      {r4-r8,pc}
                  |L1.138|
00008a  e03c              B        |L1.262|
                  |L1.140|
00008c  f04f0700          MOV      r7,#0                 ;80
000090  f7fffffe          BL       FLASH_Unlock
000094  20b3              MOVS     r0,#0xb3              ;83
000096  f7fffffe          BL       FLASH_ClearFlag
00009a  f7fffffe          BL       FLASH_OB_GetWRP
00009e  ea000504          AND      r5,r0,r4              ;86
0000a2  b1b6              CBZ      r6,|L1.210|
0000a4  b36d              CBZ      r5,|L1.258|
0000a6  f7fffffe          BL       FLASH_OB_Unlock
0000aa  2101              MOVS     r1,#1                 ;98
0000ac  4620              MOV      r0,r4                 ;98
0000ae  f7fffffe          BL       FLASH_OB_WRPConfig
0000b2  f7fffffe          BL       FLASH_OB_Launch
0000b6  2808              CMP      r0,#8                 ;101
0000b8  d001              BEQ      |L1.190|
0000ba  f04f0701          MOV      r7,#1                 ;102
                  |L1.190|
0000be  f7fffffe          BL       FLASH_OB_Lock
0000c2  f7fffffe          BL       FLASH_OB_GetWRP
0000c6  ea000504          AND      r5,r0,r4              ;109
0000ca  b1d5              CBZ      r5,|L1.258|
0000cc  f04f0701          MOV      r7,#1                 ;113
0000d0  e017              B        |L1.258|
                  |L1.210|
0000d2  42a5              CMP      r5,r4                 ;120
0000d4  d015              BEQ      |L1.258|
0000d6  f7fffffe          BL       FLASH_OB_Unlock
0000da  2100              MOVS     r1,#0                 ;128
0000dc  4620              MOV      r0,r4                 ;128
0000de  f7fffffe          BL       FLASH_OB_WRPConfig
0000e2  f7fffffe          BL       FLASH_OB_Launch
0000e6  2808              CMP      r0,#8                 ;131
0000e8  d001              BEQ      |L1.238|
0000ea  f04f0701          MOV      r7,#1                 ;132
                  |L1.238|
0000ee  f7fffffe          BL       FLASH_OB_Lock
0000f2  f7fffffe          BL       FLASH_OB_GetWRP
0000f6  ea000504          AND      r5,r0,r4              ;139
0000fa  42a5              CMP      r5,r4                 ;142
0000fc  d001              BEQ      |L1.258|
0000fe  f04f0701          MOV      r7,#1                 ;143
                  |L1.258|
000102  b907              CBNZ     r7,|L1.262|
000104  e006              B        |L1.276|
                  |L1.262|
000106  ea5f0008          MOVS     r0,r8                 ;78
00010a  f1a80101          SUB      r1,r8,#1              ;78
00010e  f00108ff          AND      r8,r1,#0xff           ;78
000112  d1bb              BNE      |L1.140|
                  |L1.276|
000114  bf00              NOP                            ;147
000116  4638              MOV      r0,r7                 ;149
000118  e7b5              B        |L1.134|
;;;151    
                          ENDP

                  F205_WriteParams PROC
;;;154    
;;;155    uint8_t F205_WriteParams(uint32_t addr, uint8_t *data, uint16_t len)
00011a  e92d5ff0          PUSH     {r4-r12,lr}
;;;156    {
00011e  4607              MOV      r7,r0
000120  468b              MOV      r11,r1
000122  4690              MOV      r8,r2
;;;157    	uint32_t tmpAddr, data32, *buf;
;;;158    	uint16_t i;
;;;159    	FLASH_Status status;
;;;160    	
;;;161    	///解除信息扇区写保护：
;;;162    	if (F205_WriteProtection(PARAM_FLASH_SECTORS, DISABLE))
000124  f04f0100          MOV      r1,#0
000128  f04f0004          MOV      r0,#4
00012c  f7fffffe          BL       F205_WriteProtection
000130  b110              CBZ      r0,|L1.312|
;;;163    		return 2;
000132  2002              MOVS     r0,#2
                  |L1.308|
;;;164    	///擦除信息扇区：
;;;165    	if (F205_EraseSectors(PARAMS_START_SECTOR, PARAMS_END_SECTOR))
;;;166    		return 3;
;;;167    	
;;;168    	buf = (uint32_t *)&(data[0]);
;;;169    	tmpAddr = addr;
;;;170    
;;;171    	for (i = 0; i < (len >> 2); i++){
;;;172    
;;;173    		status = FLASH_ProgramWord(tmpAddr, buf[i]);
;;;174    		if (status == FLASH_COMPLETE){
;;;175    
;;;176    			data32 = *(__IO uint32_t*)tmpAddr;
;;;177    
;;;178        		if (data32 != buf[i])
;;;179          			return 5;
;;;180        	}
;;;181        	else
;;;182    			return 4;
;;;183    
;;;184    		tmpAddr += 4;
;;;185    	}
;;;186    
;;;187    	///校验
;;;188    	tmpAddr = addr;
;;;189    	for (i = 0; i < (len >> 2); i++){
;;;190    
;;;191    		data32 = *(__IO uint32_t*)tmpAddr;
;;;192    
;;;193        	if (data32 != buf[i])
;;;194          		return 5;
;;;195    
;;;196    		tmpAddr += 4;
;;;197    	}
;;;198    
;;;199    	///写保护：
;;;200    	if (F205_WriteProtection(PARAM_FLASH_SECTORS, ENABLE))
;;;201    		return 6;
;;;202    
;;;203    	F205_WriteProtection(PARAM_FLASH_SECTORS, ENABLE);
;;;204    
;;;205    	FLASH_Lock();
;;;206    
;;;207    	return 0;
;;;208    }
000134  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.312|
000138  2110              MOVS     r1,#0x10              ;165
00013a  4608              MOV      r0,r1                 ;165
00013c  f7fffffe          BL       F205_EraseSectors
000140  b108              CBZ      r0,|L1.326|
000142  2003              MOVS     r0,#3                 ;166
000144  e7f6              B        |L1.308|
                  |L1.326|
000146  465e              MOV      r6,r11                ;168
000148  463d              MOV      r5,r7                 ;169
00014a  f04f0400          MOV      r4,#0                 ;171
00014e  e017              B        |L1.384|
                  |L1.336|
000150  f8561024          LDR      r1,[r6,r4,LSL #2]     ;173
000154  4628              MOV      r0,r5                 ;173
000156  f7fffffe          BL       FLASH_ProgramWord
00015a  4682              MOV      r10,r0                ;173
00015c  f1ba0f08          CMP      r10,#8                ;174
000160  d107              BNE      |L1.370|
000162  f8d59000          LDR      r9,[r5,#0]            ;176
000166  f8560024          LDR      r0,[r6,r4,LSL #2]     ;178
00016a  4548              CMP      r0,r9                 ;178
00016c  d003              BEQ      |L1.374|
00016e  2005              MOVS     r0,#5                 ;179
000170  e7e0              B        |L1.308|
                  |L1.370|
000172  2004              MOVS     r0,#4                 ;182
000174  e7de              B        |L1.308|
                  |L1.374|
000176  f1050504          ADD      r5,r5,#4              ;184
00017a  f1040001          ADD      r0,r4,#1              ;171
00017e  b284              UXTH     r4,r0                 ;171
                  |L1.384|
000180  ebb40fa8          CMP      r4,r8,ASR #2          ;171
000184  dbe4              BLT      |L1.336|
000186  463d              MOV      r5,r7                 ;188
000188  f04f0400          MOV      r4,#0                 ;189
00018c  e00c              B        |L1.424|
                  |L1.398|
00018e  f8d59000          LDR      r9,[r5,#0]            ;191
000192  f8560024          LDR      r0,[r6,r4,LSL #2]     ;193
000196  4548              CMP      r0,r9                 ;193
000198  d001              BEQ      |L1.414|
00019a  2005              MOVS     r0,#5                 ;194
00019c  e7ca              B        |L1.308|
                  |L1.414|
00019e  f1050504          ADD      r5,r5,#4              ;196
0001a2  f1040001          ADD      r0,r4,#1              ;189
0001a6  b284              UXTH     r4,r0                 ;189
                  |L1.424|
0001a8  ebb40fa8          CMP      r4,r8,ASR #2          ;189
0001ac  dbef              BLT      |L1.398|
0001ae  2101              MOVS     r1,#1                 ;200
0001b0  2004              MOVS     r0,#4                 ;200
0001b2  f7fffffe          BL       F205_WriteProtection
0001b6  b108              CBZ      r0,|L1.444|
0001b8  2006              MOVS     r0,#6                 ;201
0001ba  e7bb              B        |L1.308|
                  |L1.444|
0001bc  2101              MOVS     r1,#1                 ;203
0001be  2004              MOVS     r0,#4                 ;203
0001c0  f7fffffe          BL       F205_WriteProtection
0001c4  f7fffffe          BL       FLASH_Lock
0001c8  2000              MOVS     r0,#0                 ;207
0001ca  e7b3              B        |L1.308|
;;;209    
                          ENDP

                  F205_ReadParams PROC
;;;210    
;;;211    void F205_ReadParams(uint32_t addr, uint8_t *data, uint16_t len)
0001cc  b530              PUSH     {r4,r5,lr}
;;;212    {
0001ce  460b              MOV      r3,r1
;;;213    	uint32_t *buf;
;;;214    	uint16_t i;
;;;215    
;;;216    	buf = (uint32_t *)data;
0001d0  461c              MOV      r4,r3
;;;217    
;;;218    	for (i = 0; i < (len >> 2); i++){
0001d2  f04f0100          MOV      r1,#0
0001d6  e007              B        |L1.488|
                  |L1.472|
;;;219    		
;;;220    		buf[i] = *(__IO uint32_t*)addr;
0001d8  6805              LDR      r5,[r0,#0]
0001da  f8445021          STR      r5,[r4,r1,LSL #2]
;;;221    		addr += 4;
0001de  f1000004          ADD      r0,r0,#4
0001e2  f1010501          ADD      r5,r1,#1              ;218
0001e6  b2a9              UXTH     r1,r5                 ;218
                  |L1.488|
0001e8  ebb10fa2          CMP      r1,r2,ASR #2          ;218
0001ec  dbf4              BLT      |L1.472|
;;;222    	}
;;;223    }
0001ee  bd30              POP      {r4,r5,pc}
;;;224    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\App\\F205_Flash.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_F205_Flash_c_0ec6dfa4____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___12_F205_Flash_c_0ec6dfa4____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_F205_Flash_c_0ec6dfa4____REVSH|
#line 130
|__asm___12_F205_Flash_c_0ec6dfa4____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
