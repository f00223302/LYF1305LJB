; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\bsp_int.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\bsp_int.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\bsp_int.crf ..\BSP\bsp_int.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BSP_IntClr PROC
;;;125    
;;;126    void  BSP_IntClr (CPU_DATA  int_id)
000000  4770              BX       lr
;;;127    {
;;;128    
;;;129    }
;;;130    
                          ENDP

                  BSP_IntDis PROC
;;;147    
;;;148    void  BSP_IntDis (CPU_DATA  int_id)
000002  b510              PUSH     {r4,lr}
;;;149    {
000004  4604              MOV      r4,r0
;;;150        if (int_id < BSP_INT_SRC_NBR) {
000006  2c51              CMP      r4,#0x51
000008  d204              BCS      |L1.20|
;;;151            CPU_IntSrcDis(int_id + 16);
00000a  f1040010          ADD      r0,r4,#0x10
00000e  b2c0              UXTB     r0,r0
000010  f7fffffe          BL       CPU_IntSrcDis
                  |L1.20|
;;;152        }
;;;153    }
000014  bd10              POP      {r4,pc}
;;;154    
                          ENDP

                  BSP_IntDisAll PROC
;;;171    
;;;172    void  BSP_IntDisAll (void)
000016  b510              PUSH     {r4,lr}
;;;173    {
;;;174        CPU_IntDis();
000018  f7fffffe          BL       CPU_IntDis
;;;175    }
00001c  bd10              POP      {r4,pc}
;;;176    
                          ENDP

                  BSP_IntEn PROC
;;;193    
;;;194    void  BSP_IntEn (CPU_DATA  int_id)
00001e  b510              PUSH     {r4,lr}
;;;195    {
000020  4604              MOV      r4,r0
;;;196        if (int_id < BSP_INT_SRC_NBR) {
000022  2c51              CMP      r4,#0x51
000024  d204              BCS      |L1.48|
;;;197            CPU_IntSrcEn(int_id + 16);
000026  f1040010          ADD      r0,r4,#0x10
00002a  b2c0              UXTB     r0,r0
00002c  f7fffffe          BL       CPU_IntSrcEn
                  |L1.48|
;;;198        }
;;;199    }
000030  bd10              POP      {r4,pc}
;;;200    
                          ENDP

                  BSP_IntVectSet PROC
;;;219    
;;;220    void  BSP_IntVectSet (CPU_DATA       int_id,
000032  b570              PUSH     {r4-r6,lr}
;;;221                          CPU_FNCT_VOID  isr)
;;;222    {
000034  4604              MOV      r4,r0
000036  460d              MOV      r5,r1
;;;223        CPU_SR_ALLOC();
000038  f04f0600          MOV      r6,#0
;;;224    
;;;225    
;;;226        if (int_id < BSP_INT_SRC_NBR) {
00003c  2c51              CMP      r4,#0x51
00003e  d210              BCS      |L1.98|
;;;227            CPU_CRITICAL_ENTER();
000040  bf00              NOP      
000042  bf00              NOP      
000044  f7fffffe          BL       CPU_SR_Save
000048  4606              MOV      r6,r0
00004a  bf00              NOP      
00004c  bf00              NOP      
;;;228            BSP_IntVectTbl[int_id] = isr;
00004e  48f4              LDR      r0,|L1.1056|
000050  f8405024          STR      r5,[r0,r4,LSL #2]
;;;229            CPU_CRITICAL_EXIT();
000054  bf00              NOP      
000056  bf00              NOP      
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       CPU_SR_Restore
00005e  bf00              NOP      
000060  bf00              NOP      
                  |L1.98|
;;;230        }
;;;231    }
000062  bd70              POP      {r4-r6,pc}
;;;232    
                          ENDP

                  BSP_IntPrioSet PROC
;;;251    
;;;252    void  BSP_IntPrioSet (CPU_DATA    int_id,
000064  b570              PUSH     {r4-r6,lr}
;;;253                          CPU_INT08U  prio)
;;;254    {
000066  4604              MOV      r4,r0
000068  460d              MOV      r5,r1
;;;255        CPU_SR_ALLOC();
00006a  f04f0600          MOV      r6,#0
;;;256    
;;;257    
;;;258        if (int_id < BSP_INT_SRC_NBR) {
00006e  2c51              CMP      r4,#0x51
000070  d213              BCS      |L1.154|
;;;259            CPU_CRITICAL_ENTER();
000072  bf00              NOP      
000074  bf00              NOP      
000076  f7fffffe          BL       CPU_SR_Save
00007a  4606              MOV      r6,r0
00007c  bf00              NOP      
00007e  bf00              NOP      
;;;260            CPU_IntSrcPrioSet(int_id + 16, prio);
000080  4629              MOV      r1,r5
000082  f1040010          ADD      r0,r4,#0x10
000086  b2c0              UXTB     r0,r0
000088  f7fffffe          BL       CPU_IntSrcPrioSet
;;;261            CPU_CRITICAL_EXIT();
00008c  bf00              NOP      
00008e  bf00              NOP      
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       CPU_SR_Restore
000096  bf00              NOP      
000098  bf00              NOP      
                  |L1.154|
;;;262        }
;;;263    }
00009a  bd70              POP      {r4-r6,pc}
;;;264    
                          ENDP

                  BSP_IntHandlerDummy PROC
;;;488    
;;;489    static  void  BSP_IntHandlerDummy (void)
00009c  4770              BX       lr
;;;490    {
;;;491    
;;;492    }
                          ENDP

                  BSP_IntInit PROC
;;;289    
;;;290    void  BSP_IntInit (void)
00009e  b510              PUSH     {r4,lr}
;;;291    {
;;;292        CPU_DATA  int_id;
;;;293    
;;;294    
;;;295        for (int_id = 0; int_id < BSP_INT_SRC_NBR; int_id++) {
0000a0  f04f0400          MOV      r4,#0
0000a4  e005              B        |L1.178|
                  |L1.166|
;;;296            BSP_IntVectSet(int_id, BSP_IntHandlerDummy);
0000a6  49df              LDR      r1,|L1.1060|
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       BSP_IntVectSet
0000ae  f1040401          ADD      r4,r4,#1              ;295
                  |L1.178|
0000b2  2c51              CMP      r4,#0x51              ;295
0000b4  d3f7              BCC      |L1.166|
;;;297        }
;;;298    }
0000b6  bd10              POP      {r4,pc}
;;;299    
                          ENDP

                  BSP_IntHandler PROC
;;;449    
;;;450    static  void  BSP_IntHandler (CPU_DATA  int_id)
0000b8  b570              PUSH     {r4-r6,lr}
;;;451    {
0000ba  4604              MOV      r4,r0
;;;452        CPU_FNCT_VOID  isr;
;;;453        CPU_SR_ALLOC();
0000bc  f04f0600          MOV      r6,#0
;;;454    
;;;455    
;;;456        CPU_CRITICAL_ENTER();                                       /* Tell the OS that we are starting an ISR            */
0000c0  bf00              NOP      
0000c2  bf00              NOP      
0000c4  f7fffffe          BL       CPU_SR_Save
0000c8  4606              MOV      r6,r0
0000ca  bf00              NOP      
0000cc  bf00              NOP      
;;;457    
;;;458        OSIntEnter();
0000ce  f7fffffe          BL       OSIntEnter
;;;459    
;;;460        CPU_CRITICAL_EXIT();
0000d2  bf00              NOP      
0000d4  bf00              NOP      
0000d6  4630              MOV      r0,r6
0000d8  f7fffffe          BL       CPU_SR_Restore
0000dc  bf00              NOP      
0000de  bf00              NOP      
;;;461    
;;;462        if (int_id < BSP_INT_SRC_NBR) {
0000e0  2c51              CMP      r4,#0x51
0000e2  d204              BCS      |L1.238|
;;;463            isr = BSP_IntVectTbl[int_id];
0000e4  48ce              LDR      r0,|L1.1056|
0000e6  f8505024          LDR      r5,[r0,r4,LSL #2]
;;;464            if (isr != (CPU_FNCT_VOID)0) {
0000ea  b105              CBZ      r5,|L1.238|
;;;465                isr();
0000ec  47a8              BLX      r5
                  |L1.238|
;;;466            }
;;;467        }
;;;468    
;;;469        OSIntExit();                                                /* Tell the OS that we are leaving the ISR            */
0000ee  f7fffffe          BL       OSIntExit
;;;470    }
0000f2  bd70              POP      {r4-r6,pc}
;;;471    
                          ENDP

                  BSP_IntHandlerWWDG PROC
;;;316    
;;;317    void  BSP_IntHandlerWWDG               (void)  { BSP_IntHandler(BSP_INT_ID_WWDG);                }
0000f4  b510              PUSH     {r4,lr}
0000f6  2000              MOVS     r0,#0
0000f8  f7fffffe          BL       BSP_IntHandler
0000fc  bd10              POP      {r4,pc}
;;;318    void  BSP_IntHandlerPVD                (void)  { BSP_IntHandler(BSP_INT_ID_PVD);                 }
                          ENDP

                  BSP_IntHandlerPVD PROC
0000fe  b510              PUSH     {r4,lr}
000100  2001              MOVS     r0,#1
000102  f7fffffe          BL       BSP_IntHandler
000106  bd10              POP      {r4,pc}
;;;319    void  BSP_IntHandlerTAMPER             (void)  { BSP_IntHandler(BSP_INT_ID_TAMPER);              }
                          ENDP

                  BSP_IntHandlerTAMPER PROC
000108  b510              PUSH     {r4,lr}
00010a  2002              MOVS     r0,#2
00010c  f7fffffe          BL       BSP_IntHandler
000110  bd10              POP      {r4,pc}
;;;320    void  BSP_IntHandlerRTC                (void)  { BSP_IntHandler(BSP_INT_ID_RTC);                 }
                          ENDP

                  BSP_IntHandlerRTC PROC
000112  b510              PUSH     {r4,lr}
000114  2003              MOVS     r0,#3
000116  f7fffffe          BL       BSP_IntHandler
00011a  bd10              POP      {r4,pc}
;;;321    void  BSP_IntHandlerFLASH              (void)  { BSP_IntHandler(BSP_INT_ID_FLASH);               }
                          ENDP

                  BSP_IntHandlerFLASH PROC
00011c  b510              PUSH     {r4,lr}
00011e  2004              MOVS     r0,#4
000120  f7fffffe          BL       BSP_IntHandler
000124  bd10              POP      {r4,pc}
;;;322    void  BSP_IntHandlerRCC                (void)  { BSP_IntHandler(BSP_INT_ID_RCC);                 }
                          ENDP

                  BSP_IntHandlerRCC PROC
000126  b510              PUSH     {r4,lr}
000128  2005              MOVS     r0,#5
00012a  f7fffffe          BL       BSP_IntHandler
00012e  bd10              POP      {r4,pc}
;;;323    void  BSP_IntHandlerEXTI0              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI0);               }
                          ENDP

                  BSP_IntHandlerEXTI0 PROC
000130  b510              PUSH     {r4,lr}
000132  2006              MOVS     r0,#6
000134  f7fffffe          BL       BSP_IntHandler
000138  bd10              POP      {r4,pc}
;;;324    void  BSP_IntHandlerEXTI1              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI1);               }
                          ENDP

                  BSP_IntHandlerEXTI1 PROC
00013a  b510              PUSH     {r4,lr}
00013c  2007              MOVS     r0,#7
00013e  f7fffffe          BL       BSP_IntHandler
000142  bd10              POP      {r4,pc}
;;;325    void  BSP_IntHandlerEXTI2              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI2);               }
                          ENDP

                  BSP_IntHandlerEXTI2 PROC
000144  b510              PUSH     {r4,lr}
000146  2008              MOVS     r0,#8
000148  f7fffffe          BL       BSP_IntHandler
00014c  bd10              POP      {r4,pc}
;;;326    void  BSP_IntHandlerEXTI3              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI3);               }
                          ENDP

                  BSP_IntHandlerEXTI3 PROC
00014e  b510              PUSH     {r4,lr}
000150  2009              MOVS     r0,#9
000152  f7fffffe          BL       BSP_IntHandler
000156  bd10              POP      {r4,pc}
;;;327    void  BSP_IntHandlerEXTI4              (void)  { BSP_IntHandler(BSP_INT_ID_EXTI4);               }
                          ENDP

                  BSP_IntHandlerEXTI4 PROC
000158  b510              PUSH     {r4,lr}
00015a  200a              MOVS     r0,#0xa
00015c  f7fffffe          BL       BSP_IntHandler
000160  bd10              POP      {r4,pc}
;;;328    
                          ENDP

                  BSP_IntHandlerDMA1_STREAM0 PROC
;;;336    void  BSP_IntHandlerDMA1_CH7           (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH7);            }*/
;;;337    void  BSP_IntHandlerDMA1_STREAM0       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM0);        }
000162  b510              PUSH     {r4,lr}
000164  200b              MOVS     r0,#0xb
000166  f7fffffe          BL       BSP_IntHandler
00016a  bd10              POP      {r4,pc}
;;;338    void  BSP_IntHandlerDMA1_STREAM1       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM1);        }
                          ENDP

                  BSP_IntHandlerDMA1_STREAM1 PROC
00016c  b510              PUSH     {r4,lr}
00016e  200c              MOVS     r0,#0xc
000170  f7fffffe          BL       BSP_IntHandler
000174  bd10              POP      {r4,pc}
;;;339    void  BSP_IntHandlerDMA1_STREAM2       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM2);        }
                          ENDP

                  BSP_IntHandlerDMA1_STREAM2 PROC
000176  b510              PUSH     {r4,lr}
000178  200d              MOVS     r0,#0xd
00017a  f7fffffe          BL       BSP_IntHandler
00017e  bd10              POP      {r4,pc}
;;;340    void  BSP_IntHandlerDMA1_STREAM3       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM3);        }
                          ENDP

                  BSP_IntHandlerDMA1_STREAM3 PROC
000180  b510              PUSH     {r4,lr}
000182  200e              MOVS     r0,#0xe
000184  f7fffffe          BL       BSP_IntHandler
000188  bd10              POP      {r4,pc}
;;;341    void  BSP_IntHandlerDMA1_STREAM4       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM4);        }
                          ENDP

                  BSP_IntHandlerDMA1_STREAM4 PROC
00018a  b510              PUSH     {r4,lr}
00018c  200f              MOVS     r0,#0xf
00018e  f7fffffe          BL       BSP_IntHandler
000192  bd10              POP      {r4,pc}
;;;342    void  BSP_IntHandlerDMA1_STREAM5       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM5);        }
                          ENDP

                  BSP_IntHandlerDMA1_STREAM5 PROC
000194  b510              PUSH     {r4,lr}
000196  2010              MOVS     r0,#0x10
000198  f7fffffe          BL       BSP_IntHandler
00019c  bd10              POP      {r4,pc}
;;;343    void  BSP_IntHandlerDMA1_STREAM6       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM6);        }
                          ENDP

                  BSP_IntHandlerDMA1_STREAM6 PROC
00019e  b510              PUSH     {r4,lr}
0001a0  2011              MOVS     r0,#0x11
0001a2  f7fffffe          BL       BSP_IntHandler
0001a6  bd10              POP      {r4,pc}
;;;344    
                          ENDP

                  BSP_IntHandlerADC1_2 PROC
;;;345    void  BSP_IntHandlerADC1_2             (void)  { BSP_IntHandler(BSP_INT_ID_ADC1_2);              }
0001a8  b510              PUSH     {r4,lr}
0001aa  2012              MOVS     r0,#0x12
0001ac  f7fffffe          BL       BSP_IntHandler
0001b0  bd10              POP      {r4,pc}
;;;346    void  BSP_IntHandlerCAN1_TX            (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_TX);             }
                          ENDP

                  BSP_IntHandlerCAN1_TX PROC
0001b2  b510              PUSH     {r4,lr}
0001b4  2013              MOVS     r0,#0x13
0001b6  f7fffffe          BL       BSP_IntHandler
0001ba  bd10              POP      {r4,pc}
;;;347    void  BSP_IntHandlerCAN1_RX0           (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_RX0);            }
                          ENDP

                  BSP_IntHandlerCAN1_RX0 PROC
0001bc  b510              PUSH     {r4,lr}
0001be  2014              MOVS     r0,#0x14
0001c0  f7fffffe          BL       BSP_IntHandler
0001c4  bd10              POP      {r4,pc}
;;;348    void  BSP_IntHandlerCAN1_RX1           (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_RX1);            }
                          ENDP

                  BSP_IntHandlerCAN1_RX1 PROC
0001c6  b510              PUSH     {r4,lr}
0001c8  2015              MOVS     r0,#0x15
0001ca  f7fffffe          BL       BSP_IntHandler
0001ce  bd10              POP      {r4,pc}
;;;349    void  BSP_IntHandlerCAN1_SCE           (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_SCE);            }
                          ENDP

                  BSP_IntHandlerCAN1_SCE PROC
0001d0  b510              PUSH     {r4,lr}
0001d2  2016              MOVS     r0,#0x16
0001d4  f7fffffe          BL       BSP_IntHandler
0001d8  bd10              POP      {r4,pc}
;;;350    void  BSP_IntHandlerEXTI9_5            (void)  { BSP_IntHandler(BSP_INT_ID_EXTI9_5);             }
                          ENDP

                  BSP_IntHandlerEXTI9_5 PROC
0001da  b510              PUSH     {r4,lr}
0001dc  2017              MOVS     r0,#0x17
0001de  f7fffffe          BL       BSP_IntHandler
0001e2  bd10              POP      {r4,pc}
;;;351    void  BSP_IntHandlerTIM1_BRK           (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_BRK);            }
                          ENDP

                  BSP_IntHandlerTIM1_BRK PROC
0001e4  b510              PUSH     {r4,lr}
0001e6  2018              MOVS     r0,#0x18
0001e8  f7fffffe          BL       BSP_IntHandler
0001ec  bd10              POP      {r4,pc}
;;;352    void  BSP_IntHandlerTIM1_UP            (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_UP);             }
                          ENDP

                  BSP_IntHandlerTIM1_UP PROC
0001ee  b510              PUSH     {r4,lr}
0001f0  2019              MOVS     r0,#0x19
0001f2  f7fffffe          BL       BSP_IntHandler
0001f6  bd10              POP      {r4,pc}
;;;353    void  BSP_IntHandlerTIM1_TRG_COM       (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_TRG_COM);        }
                          ENDP

                  BSP_IntHandlerTIM1_TRG_COM PROC
0001f8  b510              PUSH     {r4,lr}
0001fa  201a              MOVS     r0,#0x1a
0001fc  f7fffffe          BL       BSP_IntHandler
000200  bd10              POP      {r4,pc}
;;;354    void  BSP_IntHandlerTIM1_CC            (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_CC);             }
                          ENDP

                  BSP_IntHandlerTIM1_CC PROC
000202  b510              PUSH     {r4,lr}
000204  201b              MOVS     r0,#0x1b
000206  f7fffffe          BL       BSP_IntHandler
00020a  bd10              POP      {r4,pc}
;;;355    void  BSP_IntHandlerTIM2               (void)  { BSP_IntHandler(BSP_INT_ID_TIM2);                }
                          ENDP

                  BSP_IntHandlerTIM2 PROC
00020c  b510              PUSH     {r4,lr}
00020e  201c              MOVS     r0,#0x1c
000210  f7fffffe          BL       BSP_IntHandler
000214  bd10              POP      {r4,pc}
;;;356    void  BSP_IntHandlerTIM3               (void)  { BSP_IntHandler(BSP_INT_ID_TIM3);                }
                          ENDP

                  BSP_IntHandlerTIM3 PROC
000216  b510              PUSH     {r4,lr}
000218  201d              MOVS     r0,#0x1d
00021a  f7fffffe          BL       BSP_IntHandler
00021e  bd10              POP      {r4,pc}
;;;357    void  BSP_IntHandlerTIM4               (void)  { BSP_IntHandler(BSP_INT_ID_TIM4);                }
                          ENDP

                  BSP_IntHandlerTIM4 PROC
000220  b510              PUSH     {r4,lr}
000222  201e              MOVS     r0,#0x1e
000224  f7fffffe          BL       BSP_IntHandler
000228  bd10              POP      {r4,pc}
;;;358    void  BSP_IntHandlerI2C1_EV            (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_EV);             }
                          ENDP

                  BSP_IntHandlerI2C1_EV PROC
00022a  b510              PUSH     {r4,lr}
00022c  201f              MOVS     r0,#0x1f
00022e  f7fffffe          BL       BSP_IntHandler
000232  bd10              POP      {r4,pc}
;;;359    void  BSP_IntHandlerI2C1_ER            (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_ER);             }
                          ENDP

                  BSP_IntHandlerI2C1_ER PROC
000234  b510              PUSH     {r4,lr}
000236  2020              MOVS     r0,#0x20
000238  f7fffffe          BL       BSP_IntHandler
00023c  bd10              POP      {r4,pc}
;;;360    void  BSP_IntHandlerI2C2_EV            (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_EV);             }
                          ENDP

                  BSP_IntHandlerI2C2_EV PROC
00023e  b510              PUSH     {r4,lr}
000240  2021              MOVS     r0,#0x21
000242  f7fffffe          BL       BSP_IntHandler
000246  bd10              POP      {r4,pc}
;;;361    void  BSP_IntHandlerI2C2_ER            (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_ER);             }
                          ENDP

                  BSP_IntHandlerI2C2_ER PROC
000248  b510              PUSH     {r4,lr}
00024a  2022              MOVS     r0,#0x22
00024c  f7fffffe          BL       BSP_IntHandler
000250  bd10              POP      {r4,pc}
;;;362    void  BSP_IntHandlerSPI1               (void)  { BSP_IntHandler(BSP_INT_ID_SPI1);                }
                          ENDP

                  BSP_IntHandlerSPI1 PROC
000252  b510              PUSH     {r4,lr}
000254  2023              MOVS     r0,#0x23
000256  f7fffffe          BL       BSP_IntHandler
00025a  bd10              POP      {r4,pc}
;;;363    void  BSP_IntHandlerSPI2               (void)  { BSP_IntHandler(BSP_INT_ID_SPI2);                }
                          ENDP

                  BSP_IntHandlerSPI2 PROC
00025c  b510              PUSH     {r4,lr}
00025e  2024              MOVS     r0,#0x24
000260  f7fffffe          BL       BSP_IntHandler
000264  bd10              POP      {r4,pc}
;;;364    void  BSP_IntHandlerUSART1             (void)  { BSP_IntHandler(BSP_INT_ID_USART1);              }
                          ENDP

                  BSP_IntHandlerUSART1 PROC
000266  b510              PUSH     {r4,lr}
000268  2025              MOVS     r0,#0x25
00026a  f7fffffe          BL       BSP_IntHandler
00026e  bd10              POP      {r4,pc}
;;;365    void  BSP_IntHandlerUSART2             (void)  { BSP_IntHandler(BSP_INT_ID_USART2);              }
                          ENDP

                  BSP_IntHandlerUSART2 PROC
000270  b510              PUSH     {r4,lr}
000272  2026              MOVS     r0,#0x26
000274  f7fffffe          BL       BSP_IntHandler
000278  bd10              POP      {r4,pc}
;;;366    void  BSP_IntHandlerUSART3             (void)  { BSP_IntHandler(BSP_INT_ID_USART3);              }
                          ENDP

                  BSP_IntHandlerUSART3 PROC
00027a  b510              PUSH     {r4,lr}
00027c  2027              MOVS     r0,#0x27
00027e  f7fffffe          BL       BSP_IntHandler
000282  bd10              POP      {r4,pc}
;;;367    void  BSP_IntHandlerEXTI15_10          (void)  { BSP_IntHandler(BSP_INT_ID_EXTI15_10);           }
                          ENDP

                  BSP_IntHandlerEXTI15_10 PROC
000284  b510              PUSH     {r4,lr}
000286  2028              MOVS     r0,#0x28
000288  f7fffffe          BL       BSP_IntHandler
00028c  bd10              POP      {r4,pc}
;;;368    void  BSP_IntHandlerRTCAlarm           (void)  { BSP_IntHandler(BSP_INT_ID_RTC_ALARM);           }
                          ENDP

                  BSP_IntHandlerRTCAlarm PROC
00028e  b510              PUSH     {r4,lr}
000290  2029              MOVS     r0,#0x29
000292  f7fffffe          BL       BSP_IntHandler
000296  bd10              POP      {r4,pc}
;;;369    void  BSP_IntHandlerUSBWakeUp          (void)  { BSP_IntHandler(BSP_INT_ID_OTG_FS_WKUP);         }
                          ENDP

                  BSP_IntHandlerUSBWakeUp PROC
000298  b510              PUSH     {r4,lr}
00029a  202a              MOVS     r0,#0x2a
00029c  f7fffffe          BL       BSP_IntHandler
0002a0  bd10              POP      {r4,pc}
;;;370    void  BSP_IntHandlerTIM8_BRK_TIM12     (void)  { BSP_IntHandler(BSP_INT_ID_TIM8_BRK_TIM12);      }
                          ENDP

                  BSP_IntHandlerTIM8_BRK_TIM12 PROC
0002a2  b510              PUSH     {r4,lr}
0002a4  202b              MOVS     r0,#0x2b
0002a6  f7fffffe          BL       BSP_IntHandler
0002aa  bd10              POP      {r4,pc}
;;;371    void  BSP_IntHandlerTIM8_UP_TIM13      (void)  { BSP_IntHandler(BSP_INT_ID_TIM8_UP_TIM13);       }
                          ENDP

                  BSP_IntHandlerTIM8_UP_TIM13 PROC
0002ac  b510              PUSH     {r4,lr}
0002ae  202c              MOVS     r0,#0x2c
0002b0  f7fffffe          BL       BSP_IntHandler
0002b4  bd10              POP      {r4,pc}
;;;372    void  BSP_IntHandlerTIM8_TRG_COM_TIM14 (void)  { BSP_IntHandler(BSP_INT_ID_TIM8_TRG_COM_TIM14);  }
                          ENDP

                  BSP_IntHandlerTIM8_TRG_COM_TIM14 PROC
0002b6  b510              PUSH     {r4,lr}
0002b8  202d              MOVS     r0,#0x2d
0002ba  f7fffffe          BL       BSP_IntHandler
0002be  bd10              POP      {r4,pc}
;;;373    void  BSP_IntHandlerTIM8_CC            (void)  { BSP_IntHandler(BSP_INT_ID_TIM8_CC);             }
                          ENDP

                  BSP_IntHandlerTIM8_CC PROC
0002c0  b510              PUSH     {r4,lr}
0002c2  202e              MOVS     r0,#0x2e
0002c4  f7fffffe          BL       BSP_IntHandler
0002c8  bd10              POP      {r4,pc}
;;;374    void  BSP_IntHandlerDMA1_STREAM7       (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_STREAM7);        }
                          ENDP

                  BSP_IntHandlerDMA1_STREAM7 PROC
0002ca  b510              PUSH     {r4,lr}
0002cc  202f              MOVS     r0,#0x2f
0002ce  f7fffffe          BL       BSP_IntHandler
0002d2  bd10              POP      {r4,pc}
;;;375    void  BSP_IntHandlerFSMC               (void)  { BSP_IntHandler(BSP_INT_ID_FSMC);                }
                          ENDP

                  BSP_IntHandlerFSMC PROC
0002d4  b510              PUSH     {r4,lr}
0002d6  2030              MOVS     r0,#0x30
0002d8  f7fffffe          BL       BSP_IntHandler
0002dc  bd10              POP      {r4,pc}
;;;376    void  BSP_IntHandlerSDIO               (void)  { BSP_IntHandler(BSP_INT_ID_SDIO);                }
                          ENDP

                  BSP_IntHandlerSDIO PROC
0002de  b510              PUSH     {r4,lr}
0002e0  2031              MOVS     r0,#0x31
0002e2  f7fffffe          BL       BSP_IntHandler
0002e6  bd10              POP      {r4,pc}
;;;377    void  BSP_IntHandlerTIM5               (void)  { BSP_IntHandler(BSP_INT_ID_TIM5);                }
                          ENDP

                  BSP_IntHandlerTIM5 PROC
0002e8  b510              PUSH     {r4,lr}
0002ea  2032              MOVS     r0,#0x32
0002ec  f7fffffe          BL       BSP_IntHandler
0002f0  bd10              POP      {r4,pc}
;;;378    void  BSP_IntHandlerSPI3               (void)  { BSP_IntHandler(BSP_INT_ID_SPI3);                }
                          ENDP

                  BSP_IntHandlerSPI3 PROC
0002f2  b510              PUSH     {r4,lr}
0002f4  2033              MOVS     r0,#0x33
0002f6  f7fffffe          BL       BSP_IntHandler
0002fa  bd10              POP      {r4,pc}
;;;379    void  BSP_IntHandlerUSART4             (void)  { BSP_IntHandler(BSP_INT_ID_USART4);              }
                          ENDP

                  BSP_IntHandlerUSART4 PROC
0002fc  b510              PUSH     {r4,lr}
0002fe  2034              MOVS     r0,#0x34
000300  f7fffffe          BL       BSP_IntHandler
000304  bd10              POP      {r4,pc}
;;;380    void  BSP_IntHandlerUSART5             (void)  { BSP_IntHandler(BSP_INT_ID_USART5);              }
                          ENDP

                  BSP_IntHandlerUSART5 PROC
000306  b510              PUSH     {r4,lr}
000308  2035              MOVS     r0,#0x35
00030a  f7fffffe          BL       BSP_IntHandler
00030e  bd10              POP      {r4,pc}
;;;381    void  BSP_IntHandlerTIM6               (void)  { BSP_IntHandler(BSP_INT_ID_TIM6);                }
                          ENDP

                  BSP_IntHandlerTIM6 PROC
000310  b510              PUSH     {r4,lr}
000312  2036              MOVS     r0,#0x36
000314  f7fffffe          BL       BSP_IntHandler
000318  bd10              POP      {r4,pc}
;;;382    void  BSP_IntHandlerTIM7               (void)  { BSP_IntHandler(BSP_INT_ID_TIM7);                }
                          ENDP

                  BSP_IntHandlerTIM7 PROC
00031a  b510              PUSH     {r4,lr}
00031c  2037              MOVS     r0,#0x37
00031e  f7fffffe          BL       BSP_IntHandler
000322  bd10              POP      {r4,pc}
;;;383    
                          ENDP

                  BSP_IntHandlerDMA2_STREAM0 PROC
;;;389    void  BSP_IntHandlerDMA2_CH5           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH5);            }*/
;;;390    void  BSP_IntHandlerDMA2_STREAM0       (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_STREAM0);        }
000324  b510              PUSH     {r4,lr}
000326  2038              MOVS     r0,#0x38
000328  f7fffffe          BL       BSP_IntHandler
00032c  bd10              POP      {r4,pc}
;;;391    void  BSP_IntHandlerDMA2_STREAM1       (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_STREAM1);        }
                          ENDP

                  BSP_IntHandlerDMA2_STREAM1 PROC
00032e  b510              PUSH     {r4,lr}
000330  2039              MOVS     r0,#0x39
000332  f7fffffe          BL       BSP_IntHandler
000336  bd10              POP      {r4,pc}
;;;392    void  BSP_IntHandlerDMA2_STREAM2       (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_STREAM2);        }
                          ENDP

                  BSP_IntHandlerDMA2_STREAM2 PROC
000338  b510              PUSH     {r4,lr}
00033a  203a              MOVS     r0,#0x3a
00033c  f7fffffe          BL       BSP_IntHandler
000340  bd10              POP      {r4,pc}
;;;393    void  BSP_IntHandlerDMA2_STREAM3       (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_STREAM3);        }
                          ENDP

                  BSP_IntHandlerDMA2_STREAM3 PROC
000342  b510              PUSH     {r4,lr}
000344  203b              MOVS     r0,#0x3b
000346  f7fffffe          BL       BSP_IntHandler
00034a  bd10              POP      {r4,pc}
;;;394    void  BSP_IntHandlerDMA2_STREAM4       (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_STREAM4);        }
                          ENDP

                  BSP_IntHandlerDMA2_STREAM4 PROC
00034c  b510              PUSH     {r4,lr}
00034e  203c              MOVS     r0,#0x3c
000350  f7fffffe          BL       BSP_IntHandler
000354  bd10              POP      {r4,pc}
;;;395    
                          ENDP

                  BSP_IntHandlerETH PROC
;;;396    
;;;397    void  BSP_IntHandlerETH                (void)  { BSP_IntHandler(BSP_INT_ID_ETH);                 }
000356  b510              PUSH     {r4,lr}
000358  203d              MOVS     r0,#0x3d
00035a  f7fffffe          BL       BSP_IntHandler
00035e  bd10              POP      {r4,pc}
;;;398    void  BSP_IntHandlerETHWakeup          (void)  { BSP_IntHandler(BSP_INT_ID_ETH_WKUP);            }
                          ENDP

                  BSP_IntHandlerETHWakeup PROC
000360  b510              PUSH     {r4,lr}
000362  203e              MOVS     r0,#0x3e
000364  f7fffffe          BL       BSP_IntHandler
000368  bd10              POP      {r4,pc}
;;;399    void  BSP_IntHandlerCAN2_TX            (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_TX);             }
                          ENDP

                  BSP_IntHandlerCAN2_TX PROC
00036a  b510              PUSH     {r4,lr}
00036c  203f              MOVS     r0,#0x3f
00036e  f7fffffe          BL       BSP_IntHandler
000372  bd10              POP      {r4,pc}
;;;400    void  BSP_IntHandlerCAN2_RX0           (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_RX0);            }
                          ENDP

                  BSP_IntHandlerCAN2_RX0 PROC
000374  b510              PUSH     {r4,lr}
000376  2040              MOVS     r0,#0x40
000378  f7fffffe          BL       BSP_IntHandler
00037c  bd10              POP      {r4,pc}
;;;401    void  BSP_IntHandlerCAN2_RX1           (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_RX1);            }
                          ENDP

                  BSP_IntHandlerCAN2_RX1 PROC
00037e  b510              PUSH     {r4,lr}
000380  2041              MOVS     r0,#0x41
000382  f7fffffe          BL       BSP_IntHandler
000386  bd10              POP      {r4,pc}
;;;402    void  BSP_IntHandlerCAN2_SCE           (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_SCE);            }
                          ENDP

                  BSP_IntHandlerCAN2_SCE PROC
000388  b510              PUSH     {r4,lr}
00038a  2042              MOVS     r0,#0x42
00038c  f7fffffe          BL       BSP_IntHandler
000390  bd10              POP      {r4,pc}
;;;403    void  BSP_IntHandlerOTG                (void)  { BSP_IntHandler(BSP_INT_ID_OTG_FS);              }
                          ENDP

                  BSP_IntHandlerOTG PROC
000392  b510              PUSH     {r4,lr}
000394  2043              MOVS     r0,#0x43
000396  f7fffffe          BL       BSP_IntHandler
00039a  bd10              POP      {r4,pc}
;;;404    
                          ENDP

                  BSP_IntHandlerDMA2_STREAM5 PROC
;;;409    void  BSP_IntHandlerDMA2_CH8           (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH8);            }*/
;;;410    void  BSP_IntHandlerDMA2_STREAM5       (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_STREAM5);        }
00039c  b510              PUSH     {r4,lr}
00039e  2044              MOVS     r0,#0x44
0003a0  f7fffffe          BL       BSP_IntHandler
0003a4  bd10              POP      {r4,pc}
;;;411    void  BSP_IntHandlerDMA2_STREAM6       (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_STREAM6);        }
                          ENDP

                  BSP_IntHandlerDMA2_STREAM6 PROC
0003a6  b510              PUSH     {r4,lr}
0003a8  2045              MOVS     r0,#0x45
0003aa  f7fffffe          BL       BSP_IntHandler
0003ae  bd10              POP      {r4,pc}
;;;412    void  BSP_IntHandlerDMA2_STREAM7       (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_STREAM7);        }
                          ENDP

                  BSP_IntHandlerDMA2_STREAM7 PROC
0003b0  b510              PUSH     {r4,lr}
0003b2  2046              MOVS     r0,#0x46
0003b4  f7fffffe          BL       BSP_IntHandler
0003b8  bd10              POP      {r4,pc}
;;;413    
                          ENDP

                  BSP_IntHandlerUSART6 PROC
;;;414    
;;;415    void  BSP_IntHandlerUSART6             (void)  { BSP_IntHandler(BSP_INT_ID_USART6);              }
0003ba  b510              PUSH     {r4,lr}
0003bc  2047              MOVS     r0,#0x47
0003be  f7fffffe          BL       BSP_IntHandler
0003c2  bd10              POP      {r4,pc}
;;;416    void  BSP_IntHandlerI2C3_EV            (void)  { BSP_IntHandler(BSP_INT_ID_I2C3_EV);             }
                          ENDP

                  BSP_IntHandlerI2C3_EV PROC
0003c4  b510              PUSH     {r4,lr}
0003c6  2048              MOVS     r0,#0x48
0003c8  f7fffffe          BL       BSP_IntHandler
0003cc  bd10              POP      {r4,pc}
;;;417    void  BSP_IntHandlerI2C3_ER            (void)  { BSP_IntHandler(BSP_INT_ID_I2C3_ER);             }
                          ENDP

                  BSP_IntHandlerI2C3_ER PROC
0003ce  b510              PUSH     {r4,lr}
0003d0  2049              MOVS     r0,#0x49
0003d2  f7fffffe          BL       BSP_IntHandler
0003d6  bd10              POP      {r4,pc}
;;;418    void  BSP_IntHandlerOTG_HS_EP1_OUT     (void)  { BSP_IntHandler(BSP_INT_ID_OTG_HS_EP1_OUT);      }
                          ENDP

                  BSP_IntHandlerOTG_HS_EP1_OUT PROC
0003d8  b510              PUSH     {r4,lr}
0003da  204a              MOVS     r0,#0x4a
0003dc  f7fffffe          BL       BSP_IntHandler
0003e0  bd10              POP      {r4,pc}
;;;419    void  BSP_IntHandlerOTG_HS_EP1_IN      (void)  { BSP_IntHandler(BSP_INT_ID_OTG_HS_EP1_IN);       }
                          ENDP

                  BSP_IntHandlerOTG_HS_EP1_IN PROC
0003e2  b510              PUSH     {r4,lr}
0003e4  204b              MOVS     r0,#0x4b
0003e6  f7fffffe          BL       BSP_IntHandler
0003ea  bd10              POP      {r4,pc}
;;;420    void  BSP_IntHandlerOTG_HS_WKUP        (void)  { BSP_IntHandler(BSP_INT_ID_OTG_HS_WKUP);         }
                          ENDP

                  BSP_IntHandlerOTG_HS_WKUP PROC
0003ec  b510              PUSH     {r4,lr}
0003ee  204c              MOVS     r0,#0x4c
0003f0  f7fffffe          BL       BSP_IntHandler
0003f4  bd10              POP      {r4,pc}
;;;421    void  BSP_IntHandlerOTG_HS             (void)  { BSP_IntHandler(BSP_INT_ID_OTG_HS);              }
                          ENDP

                  BSP_IntHandlerOTG_HS PROC
0003f6  b510              PUSH     {r4,lr}
0003f8  204d              MOVS     r0,#0x4d
0003fa  f7fffffe          BL       BSP_IntHandler
0003fe  bd10              POP      {r4,pc}
;;;422    void  BSP_IntHandlerDCMI               (void)  { BSP_IntHandler(BSP_INT_ID_DCMI);                }
                          ENDP

                  BSP_IntHandlerDCMI PROC
000400  b510              PUSH     {r4,lr}
000402  204e              MOVS     r0,#0x4e
000404  f7fffffe          BL       BSP_IntHandler
000408  bd10              POP      {r4,pc}
;;;423    void  BSP_IntHandlerCRYP               (void)  { BSP_IntHandler(BSP_INT_ID_CRYP);                }
                          ENDP

                  BSP_IntHandlerCRYP PROC
00040a  b510              PUSH     {r4,lr}
00040c  204f              MOVS     r0,#0x4f
00040e  f7fffffe          BL       BSP_IntHandler
000412  bd10              POP      {r4,pc}
;;;424    void  BSP_IntHandlerHASH_RNG           (void)  { BSP_IntHandler(BSP_INT_ID_HASH_RNG);            }
                          ENDP

                  BSP_IntHandlerHASH_RNG PROC
000414  b510              PUSH     {r4,lr}
000416  2050              MOVS     r0,#0x50
000418  f7fffffe          BL       BSP_IntHandler
00041c  bd10              POP      {r4,pc}
;;;425    
                          ENDP

00041e  0000              DCW      0x0000
                  |L1.1056|
                          DCD      BSP_IntVectTbl
                  |L1.1060|
                          DCD      BSP_IntHandlerDummy

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BSP_IntVectTbl
                          %        324

;*** Start embedded assembler ***

#line 1 "..\\BSP\\bsp_int.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_int_c_5d360aa1____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___9_bsp_int_c_5d360aa1____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_int_c_5d360aa1____REVSH|
#line 130
|__asm___9_bsp_int_c_5d360aa1____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
