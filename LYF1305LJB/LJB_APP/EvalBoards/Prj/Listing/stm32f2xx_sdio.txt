; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_sdio.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_sdio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_sdio.crf ..\BSP\STM32F2xx\src\stm32f2xx_sdio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;258      */
;;;259    void SDIO_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;260    {
;;;261      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;262      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;263    }
000014  bd10              POP      {r4,pc}
;;;264    
                          ENDP

                  SDIO_Init PROC
;;;271      */
;;;272    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
000016  f04f0100          MOV      r1,#0
;;;273    {
;;;274      uint32_t tmpreg = 0;
;;;275        
;;;276      /* Check the parameters */
;;;277      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;278      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;279      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;280      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;281      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;282       
;;;283    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;284      /* Get the SDIO CLKCR value */
;;;285      tmpreg = SDIO->CLKCR;
00001a  4a75              LDR      r2,|L1.496|
00001c  6811              LDR      r1,[r2,#0]
;;;286      
;;;287      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;288      tmpreg &= CLKCR_CLEAR_MASK;
00001e  f64762ff          MOV      r2,#0x7eff
000022  ea210102          BIC      r1,r1,r2
;;;289      
;;;290      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;291      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;292      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;293      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;294      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;295      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;296      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
000026  7d02              LDRB     r2,[r0,#0x14]
000028  6883              LDR      r3,[r0,#8]
00002a  ea420203          ORR      r2,r2,r3
00002e  6843              LDR      r3,[r0,#4]
000030  ea420203          ORR      r2,r2,r3
000034  68c3              LDR      r3,[r0,#0xc]
000036  ea420203          ORR      r2,r2,r3
00003a  6803              LDR      r3,[r0,#0]
00003c  ea420203          ORR      r2,r2,r3
000040  6903              LDR      r3,[r0,#0x10]
000042  ea420203          ORR      r2,r2,r3
000046  ea420101          ORR      r1,r2,r1
;;;297                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;298                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;299      
;;;300      /* Write to SDIO CLKCR */
;;;301      SDIO->CLKCR = tmpreg;
00004a  4a69              LDR      r2,|L1.496|
00004c  6011              STR      r1,[r2,#0]
;;;302    }
00004e  4770              BX       lr
;;;303    
                          ENDP

                  SDIO_StructInit PROC
;;;309      */
;;;310    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000050  f04f0100          MOV      r1,#0
;;;311    {
;;;312      /* SDIO_InitStruct members default value */
;;;313      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000054  7501              STRB     r1,[r0,#0x14]
;;;314      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000056  6001              STR      r1,[r0,#0]
;;;315      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000058  6041              STR      r1,[r0,#4]
;;;316      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00005a  6081              STR      r1,[r0,#8]
;;;317      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
00005c  60c1              STR      r1,[r0,#0xc]
;;;318      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00005e  6101              STR      r1,[r0,#0x10]
;;;319    }
000060  4770              BX       lr
;;;320    
                          ENDP

                  SDIO_ClockCmd PROC
;;;326      */
;;;327    void SDIO_ClockCmd(FunctionalState NewState)
000062  4964              LDR      r1,|L1.500|
;;;328    {
;;;329      /* Check the parameters */
;;;330      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;331      
;;;332      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000064  6008              STR      r0,[r1,#0]
;;;333    }
000066  4770              BX       lr
;;;334    
                          ENDP

                  SDIO_SetPowerState PROC
;;;342      */
;;;343    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
000068  4963              LDR      r1,|L1.504|
;;;344    {
;;;345      /* Check the parameters */
;;;346      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;347      
;;;348      SDIO->POWER &= PWR_PWRCTRL_MASK;
00006a  6809              LDR      r1,[r1,#0]
00006c  f0210103          BIC      r1,r1,#3
000070  4a61              LDR      r2,|L1.504|
000072  6011              STR      r1,[r2,#0]
;;;349      SDIO->POWER |= SDIO_PowerState;
000074  4611              MOV      r1,r2
000076  6809              LDR      r1,[r1,#0]
000078  ea410100          ORR      r1,r1,r0
00007c  6011              STR      r1,[r2,#0]
;;;350    }
00007e  4770              BX       lr
;;;351    
                          ENDP

                  SDIO_GetPowerState PROC
;;;360      */
;;;361    uint32_t SDIO_GetPowerState(void)
000080  485d              LDR      r0,|L1.504|
;;;362    {
;;;363      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000082  6800              LDR      r0,[r0,#0]
000084  f0000003          AND      r0,r0,#3
;;;364    }
000088  4770              BX       lr
;;;365    
                          ENDP

                  SDIO_SendCommand PROC
;;;392      */
;;;393    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
00008a  f04f0100          MOV      r1,#0
;;;394    {
;;;395      uint32_t tmpreg = 0;
;;;396      
;;;397      /* Check the parameters */
;;;398      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;399      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;400      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;401      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;402      
;;;403    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;404      /* Set the SDIO Argument value */
;;;405      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
00008e  4b5b              LDR      r3,|L1.508|
000090  6802              LDR      r2,[r0,#0]
000092  601a              STR      r2,[r3,#0]
;;;406      
;;;407    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;408      /* Get the SDIO CMD value */
;;;409      tmpreg = SDIO->CMD;
000094  f1030204          ADD      r2,r3,#4
000098  6811              LDR      r1,[r2,#0]
;;;410      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;411      tmpreg &= CMD_CLEAR_MASK;
00009a  f36f010a          BFC      r1,#0,#11
;;;412      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;413      /* Set WAITRESP bits according to SDIO_Response value */
;;;414      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;415      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;416      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
00009e  e9d02301          LDRD     r2,r3,[r0,#4]
0000a2  ea420203          ORR      r2,r2,r3
0000a6  68c3              LDR      r3,[r0,#0xc]
0000a8  ea420203          ORR      r2,r2,r3
0000ac  6903              LDR      r3,[r0,#0x10]
0000ae  ea420203          ORR      r2,r2,r3
0000b2  ea420101          ORR      r1,r2,r1
;;;417               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;418      
;;;419      /* Write to SDIO CMD */
;;;420      SDIO->CMD = tmpreg;
0000b6  4a52              LDR      r2,|L1.512|
0000b8  6011              STR      r1,[r2,#0]
;;;421    }
0000ba  4770              BX       lr
;;;422    
                          ENDP

                  SDIO_CmdStructInit PROC
;;;428      */
;;;429    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
0000bc  f04f0100          MOV      r1,#0
;;;430    {
;;;431      /* SDIO_CmdInitStruct members default value */
;;;432      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
0000c0  6001              STR      r1,[r0,#0]
;;;433      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
0000c2  6041              STR      r1,[r0,#4]
;;;434      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
0000c4  6081              STR      r1,[r0,#8]
;;;435      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
0000c6  60c1              STR      r1,[r0,#0xc]
;;;436      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
0000c8  6101              STR      r1,[r0,#0x10]
;;;437    }
0000ca  4770              BX       lr
;;;438    
                          ENDP

                  SDIO_GetCommandResponse PROC
;;;443      */
;;;444    uint8_t SDIO_GetCommandResponse(void)
0000cc  484c              LDR      r0,|L1.512|
;;;445    {
;;;446      return (uint8_t)(SDIO->RESPCMD);
0000ce  1d00              ADDS     r0,r0,#4
0000d0  6800              LDR      r0,[r0,#0]
0000d2  b2c0              UXTB     r0,r0
;;;447    }
0000d4  4770              BX       lr
;;;448    
                          ENDP

                  SDIO_GetResponse PROC
;;;458      */
;;;459    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
0000d6  4601              MOV      r1,r0
;;;460    {
;;;461      __IO uint32_t tmp = 0;
0000d8  f04f0200          MOV      r2,#0
;;;462    
;;;463      /* Check the parameters */
;;;464      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;465    
;;;466      tmp = SDIO_RESP_ADDR + SDIO_RESP;
0000dc  4849              LDR      r0,|L1.516|
0000de  eb010200          ADD      r2,r1,r0
;;;467      
;;;468      return (*(__IO uint32_t *) tmp); 
0000e2  6810              LDR      r0,[r2,#0]
;;;469    }
0000e4  4770              BX       lr
;;;470    
                          ENDP

                  SDIO_DataConfig PROC
;;;496      */
;;;497    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
0000e6  f04f0100          MOV      r1,#0
;;;498    {
;;;499      uint32_t tmpreg = 0;
;;;500      
;;;501      /* Check the parameters */
;;;502      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;503      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;504      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;505      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;506      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;507    
;;;508    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;509      /* Set the SDIO Data TimeOut value */
;;;510      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
0000ea  4b47              LDR      r3,|L1.520|
0000ec  6802              LDR      r2,[r0,#0]
0000ee  601a              STR      r2,[r3,#0]
;;;511    
;;;512    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;513      /* Set the SDIO DataLength value */
;;;514      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
0000f0  f1030304          ADD      r3,r3,#4
0000f4  6842              LDR      r2,[r0,#4]
0000f6  601a              STR      r2,[r3,#0]
;;;515    
;;;516    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;517      /* Get the SDIO DCTRL value */
;;;518      tmpreg = SDIO->DCTRL;
0000f8  f1030204          ADD      r2,r3,#4
0000fc  6811              LDR      r1,[r2,#0]
;;;519      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;520      tmpreg &= DCTRL_CLEAR_MASK;
0000fe  f02101f7          BIC      r1,r1,#0xf7
;;;521      /* Set DEN bit according to SDIO_DPSM value */
;;;522      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;523      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;524      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;525      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
000102  e9d02302          LDRD     r2,r3,[r0,#8]
000106  ea420203          ORR      r2,r2,r3
00010a  6903              LDR      r3,[r0,#0x10]
00010c  ea420203          ORR      r2,r2,r3
000110  6943              LDR      r3,[r0,#0x14]
000112  ea420203          ORR      r2,r2,r3
000116  ea420101          ORR      r1,r2,r1
;;;526               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;527    
;;;528      /* Write to SDIO DCTRL */
;;;529      SDIO->DCTRL = tmpreg;
00011a  4a3c              LDR      r2,|L1.524|
00011c  6011              STR      r1,[r2,#0]
;;;530    }
00011e  4770              BX       lr
;;;531    
                          ENDP

                  SDIO_DataStructInit PROC
;;;537      */
;;;538    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000120  f04f31ff          MOV      r1,#0xffffffff
;;;539    {
;;;540      /* SDIO_DataInitStruct members default value */
;;;541      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
000124  6001              STR      r1,[r0,#0]
;;;542      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000126  f04f0100          MOV      r1,#0
00012a  6041              STR      r1,[r0,#4]
;;;543      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
00012c  6081              STR      r1,[r0,#8]
;;;544      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00012e  60c1              STR      r1,[r0,#0xc]
;;;545      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
000130  6101              STR      r1,[r0,#0x10]
;;;546      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
000132  6141              STR      r1,[r0,#0x14]
;;;547    }
000134  4770              BX       lr
;;;548    
                          ENDP

                  SDIO_GetDataCounter PROC
;;;553      */
;;;554    uint32_t SDIO_GetDataCounter(void)
000136  4835              LDR      r0,|L1.524|
;;;555    { 
;;;556      return SDIO->DCOUNT;
000138  1d00              ADDS     r0,r0,#4
00013a  6800              LDR      r0,[r0,#0]
;;;557    }
00013c  4770              BX       lr
;;;558    
                          ENDP

                  SDIO_ReadData PROC
;;;563      */
;;;564    uint32_t SDIO_ReadData(void)
00013e  4833              LDR      r0,|L1.524|
;;;565    { 
;;;566      return SDIO->FIFO;
000140  3054              ADDS     r0,r0,#0x54
000142  6800              LDR      r0,[r0,#0]
;;;567    }
000144  4770              BX       lr
;;;568    
                          ENDP

                  SDIO_WriteData PROC
;;;573      */
;;;574    void SDIO_WriteData(uint32_t Data)
000146  4932              LDR      r1,|L1.528|
;;;575    { 
;;;576      SDIO->FIFO = Data;
000148  6008              STR      r0,[r1,#0]
;;;577    }
00014a  4770              BX       lr
;;;578    
                          ENDP

                  SDIO_GetFIFOCount PROC
;;;583      */
;;;584    uint32_t SDIO_GetFIFOCount(void)
00014c  482f              LDR      r0,|L1.524|
;;;585    { 
;;;586      return SDIO->FIFOCNT;
00014e  301c              ADDS     r0,r0,#0x1c
000150  6800              LDR      r0,[r0,#0]
;;;587    }
000152  4770              BX       lr
;;;588    
                          ENDP

                  SDIO_StartSDIOReadWait PROC
;;;612      */
;;;613    void SDIO_StartSDIOReadWait(FunctionalState NewState)
000154  492f              LDR      r1,|L1.532|
;;;614    { 
;;;615      /* Check the parameters */
;;;616      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;617      
;;;618      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
000156  6008              STR      r0,[r1,#0]
;;;619    }
000158  4770              BX       lr
;;;620    
                          ENDP

                  SDIO_StopSDIOReadWait PROC
;;;626      */
;;;627    void SDIO_StopSDIOReadWait(FunctionalState NewState)
00015a  492f              LDR      r1,|L1.536|
;;;628    { 
;;;629      /* Check the parameters */
;;;630      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;631      
;;;632      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
00015c  6008              STR      r0,[r1,#0]
;;;633    }
00015e  4770              BX       lr
;;;634    
                          ENDP

                  SDIO_SetSDIOReadWaitMode PROC
;;;642      */
;;;643    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000160  492e              LDR      r1,|L1.540|
;;;644    {
;;;645      /* Check the parameters */
;;;646      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;647      
;;;648      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000162  6008              STR      r0,[r1,#0]
;;;649    }
000164  4770              BX       lr
;;;650    
                          ENDP

                  SDIO_SetSDIOOperation PROC
;;;656      */
;;;657    void SDIO_SetSDIOOperation(FunctionalState NewState)
000166  492e              LDR      r1,|L1.544|
;;;658    { 
;;;659      /* Check the parameters */
;;;660      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;661      
;;;662      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000168  6008              STR      r0,[r1,#0]
;;;663    }
00016a  4770              BX       lr
;;;664    
                          ENDP

                  SDIO_SendSDIOSuspendCmd PROC
;;;670      */
;;;671    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
00016c  492d              LDR      r1,|L1.548|
;;;672    { 
;;;673      /* Check the parameters */
;;;674      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;675      
;;;676      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
00016e  6008              STR      r0,[r1,#0]
;;;677    }
000170  4770              BX       lr
;;;678    
                          ENDP

                  SDIO_CommandCompletionCmd PROC
;;;702      */
;;;703    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000172  492d              LDR      r1,|L1.552|
;;;704    { 
;;;705      /* Check the parameters */
;;;706      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;707      
;;;708      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
000174  6008              STR      r0,[r1,#0]
;;;709    }
000176  4770              BX       lr
;;;710    
                          ENDP

                  SDIO_CEATAITCmd PROC
;;;716      */
;;;717    void SDIO_CEATAITCmd(FunctionalState NewState)
000178  f04f0101          MOV      r1,#1
;;;718    { 
;;;719      /* Check the parameters */
;;;720      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;721      
;;;722      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
00017c  ea210100          BIC      r1,r1,r0
000180  4a2a              LDR      r2,|L1.556|
000182  6011              STR      r1,[r2,#0]
;;;723    }
000184  4770              BX       lr
;;;724    
                          ENDP

                  SDIO_SendCEATACmd PROC
;;;730      */
;;;731    void SDIO_SendCEATACmd(FunctionalState NewState)
000186  492a              LDR      r1,|L1.560|
;;;732    { 
;;;733      /* Check the parameters */
;;;734      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;735      
;;;736      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
000188  6008              STR      r0,[r1,#0]
;;;737    }
00018a  4770              BX       lr
;;;738    
                          ENDP

                  SDIO_DMACmd PROC
;;;762      */
;;;763    void SDIO_DMACmd(FunctionalState NewState)
00018c  4929              LDR      r1,|L1.564|
;;;764    {
;;;765      /* Check the parameters */
;;;766      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;767      
;;;768      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
00018e  6008              STR      r0,[r1,#0]
;;;769    }
000190  4770              BX       lr
;;;770    
                          ENDP

                  SDIO_ITConfig PROC
;;;820      */
;;;821    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
000192  b131              CBZ      r1,|L1.418|
;;;822    {
;;;823      /* Check the parameters */
;;;824      assert_param(IS_SDIO_IT(SDIO_IT));
;;;825      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;826      
;;;827      if (NewState != DISABLE)
;;;828      {
;;;829        /* Enable the SDIO interrupts */
;;;830        SDIO->MASK |= SDIO_IT;
000194  4a28              LDR      r2,|L1.568|
000196  6812              LDR      r2,[r2,#0]
000198  ea420200          ORR      r2,r2,r0
00019c  4b26              LDR      r3,|L1.568|
00019e  601a              STR      r2,[r3,#0]
0001a0  e005              B        |L1.430|
                  |L1.418|
;;;831      }
;;;832      else
;;;833      {
;;;834        /* Disable the SDIO interrupts */
;;;835        SDIO->MASK &= ~SDIO_IT;
0001a2  4a25              LDR      r2,|L1.568|
0001a4  6812              LDR      r2,[r2,#0]
0001a6  ea220200          BIC      r2,r2,r0
0001aa  4b23              LDR      r3,|L1.568|
0001ac  601a              STR      r2,[r3,#0]
                  |L1.430|
;;;836      } 
;;;837    }
0001ae  4770              BX       lr
;;;838    
                          ENDP

                  SDIO_GetFlagStatus PROC
;;;868      */
;;;869    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
0001b0  4601              MOV      r1,r0
;;;870    { 
;;;871      FlagStatus bitstatus = RESET;
0001b2  f04f0000          MOV      r0,#0
;;;872      
;;;873      /* Check the parameters */
;;;874      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;875      
;;;876      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
0001b6  4a21              LDR      r2,|L1.572|
0001b8  6812              LDR      r2,[r2,#0]
0001ba  420a              TST      r2,r1
0001bc  d002              BEQ      |L1.452|
;;;877      {
;;;878        bitstatus = SET;
0001be  f04f0001          MOV      r0,#1
0001c2  e001              B        |L1.456|
                  |L1.452|
;;;879      }
;;;880      else
;;;881      {
;;;882        bitstatus = RESET;
0001c4  f04f0000          MOV      r0,#0
                  |L1.456|
;;;883      }
;;;884      return bitstatus;
;;;885    }
0001c8  4770              BX       lr
;;;886    
                          ENDP

                  SDIO_ClearFlag PROC
;;;905      */
;;;906    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
0001ca  491d              LDR      r1,|L1.576|
;;;907    { 
;;;908      /* Check the parameters */
;;;909      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;910       
;;;911      SDIO->ICR = SDIO_FLAG;
0001cc  6008              STR      r0,[r1,#0]
;;;912    }
0001ce  4770              BX       lr
;;;913    
                          ENDP

                  SDIO_GetITStatus PROC
;;;944      */
;;;945    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
0001d0  4601              MOV      r1,r0
;;;946    { 
;;;947      ITStatus bitstatus = RESET;
0001d2  f04f0000          MOV      r0,#0
;;;948      
;;;949      /* Check the parameters */
;;;950      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;951      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
0001d6  4a19              LDR      r2,|L1.572|
0001d8  6812              LDR      r2,[r2,#0]
0001da  420a              TST      r2,r1
0001dc  d002              BEQ      |L1.484|
;;;952      {
;;;953        bitstatus = SET;
0001de  f04f0001          MOV      r0,#1
0001e2  e001              B        |L1.488|
                  |L1.484|
;;;954      }
;;;955      else
;;;956      {
;;;957        bitstatus = RESET;
0001e4  f04f0000          MOV      r0,#0
                  |L1.488|
;;;958      }
;;;959      return bitstatus;
;;;960    }
0001e8  4770              BX       lr
;;;961    
                          ENDP

                  SDIO_ClearITPendingBit PROC
;;;980      */
;;;981    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
0001ea  4915              LDR      r1,|L1.576|
;;;982    { 
;;;983      /* Check the parameters */
;;;984      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;985       
;;;986      SDIO->ICR = SDIO_IT;
0001ec  6008              STR      r0,[r1,#0]
;;;987    }
0001ee  4770              BX       lr
;;;988    
                          ENDP

                  |L1.496|
                          DCD      0x40012c04
                  |L1.500|
                          DCD      0x422580a0
                  |L1.504|
                          DCD      0x40012c00
                  |L1.508|
                          DCD      0x40012c08
                  |L1.512|
                          DCD      0x40012c0c
                  |L1.516|
                          DCD      0x40012c14
                  |L1.520|
                          DCD      0x40012c24
                  |L1.524|
                          DCD      0x40012c2c
                  |L1.528|
                          DCD      0x40012c80
                  |L1.532|
                          DCD      0x422585a0
                  |L1.536|
                          DCD      0x422585a4
                  |L1.540|
                          DCD      0x422585a8
                  |L1.544|
                          DCD      0x422585ac
                  |L1.548|
                          DCD      0x422581ac
                  |L1.552|
                          DCD      0x422581b0
                  |L1.556|
                          DCD      0x422581b4
                  |L1.560|
                          DCD      0x422581b8
                  |L1.564|
                          DCD      0x4225858c
                  |L1.568|
                          DCD      0x40012c3c
                  |L1.572|
                          DCD      0x40012c34
                  |L1.576|
                          DCD      0x40012c38

;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_sdio.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f2xx_sdio_c_c8827541____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___16_stm32f2xx_sdio_c_c8827541____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f2xx_sdio_c_c8827541____REVSH|
#line 130
|__asm___16_stm32f2xx_sdio_c_c8827541____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
