; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_rng.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_rng.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_rng.crf ..\BSP\STM32F2xx\src\stm32f2xx_rng.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RNG_DeInit PROC
;;;93       */
;;;94     void RNG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96       /* Enable RNG reset state */
;;;97       RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
000002  2101              MOVS     r1,#1
000004  2040              MOVS     r0,#0x40
000006  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;98     
;;;99       /* Release RNG from reset state */
;;;100      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2040              MOVS     r0,#0x40
00000e  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;101    }
000012  bd10              POP      {r4,pc}
;;;102    
                          ENDP

                  RNG_Cmd PROC
;;;108      */
;;;109    void RNG_Cmd(FunctionalState NewState)
000014  b130              CBZ      r0,|L1.36|
;;;110    {
;;;111      /* Check the parameters */
;;;112      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;113    
;;;114      if (NewState != DISABLE)
;;;115      {
;;;116        /* Enable the RNG */
;;;117        RNG_REG->CR |= RNG_CR_RNGEN;
000016  4923              LDR      r1,|L1.164|
000018  6809              LDR      r1,[r1,#0]
00001a  f0410104          ORR      r1,r1,#4
00001e  4a21              LDR      r2,|L1.164|
000020  6011              STR      r1,[r2,#0]
000022  e005              B        |L1.48|
                  |L1.36|
;;;118      }
;;;119      else
;;;120      {
;;;121        /* Disable the RNG */
;;;122        RNG_REG->CR &= ~RNG_CR_RNGEN;
000024  491f              LDR      r1,|L1.164|
000026  6809              LDR      r1,[r1,#0]
000028  f0210104          BIC      r1,r1,#4
00002c  4a1d              LDR      r2,|L1.164|
00002e  6011              STR      r1,[r2,#0]
                  |L1.48|
;;;123      }
;;;124    }
000030  4770              BX       lr
;;;125    /**
                          ENDP

                  RNG_GetRandomNumber PROC
;;;170      */
;;;171    uint32_t RNG_GetRandomNumber(void)
000032  481c              LDR      r0,|L1.164|
;;;172    {
;;;173      /* Return the 32 bit random number from the DR register */
;;;174      return RNG_REG->DR;
000034  3008              ADDS     r0,r0,#8
000036  6800              LDR      r0,[r0,#0]
;;;175    }
000038  4770              BX       lr
;;;176    
                          ENDP

                  RNG_ITConfig PROC
;;;267      */
;;;268    void RNG_ITConfig(FunctionalState NewState)
00003a  b130              CBZ      r0,|L1.74|
;;;269    {
;;;270      /* Check the parameters */
;;;271      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;272    
;;;273      if (NewState != DISABLE)
;;;274      {
;;;275        /* Enable the RNG interrupt */
;;;276        RNG_REG->CR |= RNG_CR_IE;
00003c  4919              LDR      r1,|L1.164|
00003e  6809              LDR      r1,[r1,#0]
000040  f0410108          ORR      r1,r1,#8
000044  4a17              LDR      r2,|L1.164|
000046  6011              STR      r1,[r2,#0]
000048  e005              B        |L1.86|
                  |L1.74|
;;;277      }
;;;278      else
;;;279      {
;;;280        /* Disable the RNG interrupt */
;;;281        RNG_REG->CR &= ~RNG_CR_IE;
00004a  4916              LDR      r1,|L1.164|
00004c  6809              LDR      r1,[r1,#0]
00004e  f0210108          BIC      r1,r1,#8
000052  4a14              LDR      r2,|L1.164|
000054  6011              STR      r1,[r2,#0]
                  |L1.86|
;;;282      }
;;;283    }
000056  4770              BX       lr
;;;284    
                          ENDP

                  RNG_GetFlagStatus PROC
;;;293      */
;;;294    FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
000058  4601              MOV      r1,r0
;;;295    {
;;;296      FlagStatus bitstatus = RESET;
00005a  f04f0000          MOV      r0,#0
;;;297      /* Check the parameters */
;;;298      assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
;;;299    
;;;300      /* Check the status of the specified RNG flag */
;;;301      if ((RNG_REG->SR & RNG_FLAG) != (uint8_t)RESET)
00005e  4a12              LDR      r2,|L1.168|
000060  6812              LDR      r2,[r2,#0]
000062  420a              TST      r2,r1
000064  d002              BEQ      |L1.108|
;;;302      {
;;;303        /* RNG_FLAG is set */
;;;304        bitstatus = SET;
000066  f04f0001          MOV      r0,#1
00006a  e001              B        |L1.112|
                  |L1.108|
;;;305      }
;;;306      else
;;;307      {
;;;308        /* RNG_FLAG is reset */
;;;309        bitstatus = RESET;
00006c  f04f0000          MOV      r0,#0
                  |L1.112|
;;;310      }
;;;311      /* Return the RNG_FLAG status */
;;;312      return  bitstatus;
;;;313    }
000070  4770              BX       lr
;;;314    
                          ENDP

                  RNG_ClearFlag PROC
;;;326      */
;;;327    void RNG_ClearFlag(uint8_t RNG_FLAG)
000072  ea6f1100          MVN      r1,r0,LSL #4
;;;328    {
;;;329      /* Check the parameters */
;;;330      assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
;;;331      /* Clear the selected RNG flags */
;;;332      RNG_REG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
000076  4a0c              LDR      r2,|L1.168|
000078  6011              STR      r1,[r2,#0]
;;;333    }
00007a  4770              BX       lr
;;;334    
                          ENDP

                  RNG_GetITStatus PROC
;;;342      */
;;;343    ITStatus RNG_GetITStatus(uint8_t RNG_IT)
00007c  4601              MOV      r1,r0
;;;344    {
;;;345      ITStatus bitstatus = RESET;
00007e  f04f0000          MOV      r0,#0
;;;346      /* Check the parameters */
;;;347      assert_param(IS_RNG_GET_IT(RNG_IT));
;;;348    
;;;349      /* Check the status of the specified RNG interrupt */
;;;350      if ((RNG_REG->SR & RNG_IT) != (uint8_t)RESET)
000082  4a09              LDR      r2,|L1.168|
000084  6812              LDR      r2,[r2,#0]
000086  420a              TST      r2,r1
000088  d002              BEQ      |L1.144|
;;;351      {
;;;352        /* RNG_IT is set */
;;;353        bitstatus = SET;
00008a  f04f0001          MOV      r0,#1
00008e  e001              B        |L1.148|
                  |L1.144|
;;;354      }
;;;355      else
;;;356      {
;;;357        /* RNG_IT is reset */
;;;358        bitstatus = RESET;
000090  f04f0000          MOV      r0,#0
                  |L1.148|
;;;359      }
;;;360      /* Return the RNG_IT status */
;;;361      return bitstatus;
;;;362    }
000094  4770              BX       lr
;;;363    
                          ENDP

                  RNG_ClearITPendingBit PROC
;;;372      */
;;;373    void RNG_ClearITPendingBit(uint8_t RNG_IT)
000096  ea6f0100          MVN      r1,r0
;;;374    {
;;;375      /* Check the parameters */
;;;376      assert_param(IS_RNG_IT(RNG_IT));
;;;377    
;;;378      /* Clear the selected RNG interrupt pending bit */
;;;379      RNG_REG->SR = (uint8_t)~RNG_IT;
00009a  b2c9              UXTB     r1,r1
00009c  4a02              LDR      r2,|L1.168|
00009e  6011              STR      r1,[r2,#0]
;;;380    }
0000a0  4770              BX       lr
;;;381    /**
                          ENDP

0000a2  0000              DCW      0x0000
                  |L1.164|
                          DCD      0x50060800
                  |L1.168|
                          DCD      0x50060804

;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_rng.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f2xx_rng_c_3ce7902d____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___15_stm32f2xx_rng_c_3ce7902d____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_stm32f2xx_rng_c_3ce7902d____REVSH|
#line 130
|__asm___15_stm32f2xx_rng_c_3ce7902d____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
