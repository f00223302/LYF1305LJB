; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\os_cpu_c.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\os_cpu_c.crf ..\..\uCOS-II\Ports\ARM-Cortex-M3\os_cpu_c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSInitHookBegin PROC
;;;69     #if OS_CPU_HOOKS_EN > 0u
;;;70     void  OSInitHookBegin (void)
000000  4867              LDR      r0,|L1.416|
;;;71     {
;;;72         INT32U   size;
;;;73         OS_STK  *pstk;
;;;74     
;;;75                                                                /* Clear exception stack for stack checking.*/
;;;76         pstk = &OS_CPU_ExceptStk[0];
;;;77         size = OS_CPU_EXCEPT_STK_SIZE;
000002  f04f0180          MOV      r1,#0x80
;;;78         while (size > 0u) {
000006  e004              B        |L1.18|
                  |L1.8|
;;;79             size--;
000008  f1a10101          SUB      r1,r1,#1
;;;80            *pstk++ = (OS_STK)0;
00000c  f04f0200          MOV      r2,#0
000010  c004              STM      r0!,{r2}
                  |L1.18|
000012  2900              CMP      r1,#0                 ;78
000014  d1f8              BNE      |L1.8|
;;;81         }
;;;82     
;;;83         OS_CPU_ExceptStkBase = &OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE - 1u];
000016  4a63              LDR      r2,|L1.420|
000018  4b63              LDR      r3,|L1.424|
00001a  601a              STR      r2,[r3,#0]  ; OS_CPU_ExceptStkBase
;;;84     
;;;85     #if OS_TMR_EN > 0u
;;;86         OSTmrCtr = 0u;
00001c  460a              MOV      r2,r1
00001e  4b63              LDR      r3,|L1.428|
000020  801a              STRH     r2,[r3,#0]
;;;87     #endif
;;;88     }
000022  4770              BX       lr
;;;89     #endif
                          ENDP

                  OSInitHookEnd PROC
;;;103    #if OS_CPU_HOOKS_EN > 0u
;;;104    void  OSInitHookEnd (void)
000024  4770              BX       lr
;;;105    {
;;;106    }
;;;107    #endif
                          ENDP

                  OSTaskCreateHook PROC
;;;120    #if OS_CPU_HOOKS_EN > 0u
;;;121    void  OSTaskCreateHook (OS_TCB *ptcb)
000026  b510              PUSH     {r4,lr}
;;;122    {
000028  4604              MOV      r4,r0
;;;123    #if OS_APP_HOOKS_EN > 0u
;;;124        App_TaskCreateHook(ptcb);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       App_TaskCreateHook
;;;125    #else
;;;126        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;127    #endif
;;;128    }
000030  bd10              POP      {r4,pc}
;;;129    #endif
                          ENDP

                  OSTaskDelHook PROC
;;;143    #if OS_CPU_HOOKS_EN > 0u
;;;144    void  OSTaskDelHook (OS_TCB *ptcb)
000032  b510              PUSH     {r4,lr}
;;;145    {
000034  4604              MOV      r4,r0
;;;146    #if OS_APP_HOOKS_EN > 0u
;;;147        App_TaskDelHook(ptcb);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       App_TaskDelHook
;;;148    #else
;;;149        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;150    #endif
;;;151    }
00003c  bd10              POP      {r4,pc}
;;;152    #endif
                          ENDP

                  OSTaskIdleHook PROC
;;;166    #if OS_CPU_HOOKS_EN > 0u
;;;167    void  OSTaskIdleHook (void)
00003e  b510              PUSH     {r4,lr}
;;;168    {
;;;169    #if OS_APP_HOOKS_EN > 0u
;;;170        App_TaskIdleHook();
000040  f7fffffe          BL       App_TaskIdleHook
;;;171    #endif
;;;172    }
000044  bd10              POP      {r4,pc}
;;;173    #endif
                          ENDP

                  OSTaskReturnHook PROC
;;;188    #if OS_CPU_HOOKS_EN > 0u
;;;189    void  OSTaskReturnHook (OS_TCB  *ptcb)
000046  b510              PUSH     {r4,lr}
;;;190    {
000048  4604              MOV      r4,r0
;;;191    #if OS_APP_HOOKS_EN > 0u
;;;192        App_TaskReturnHook(ptcb);
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       App_TaskReturnHook
;;;193    #else
;;;194        (void)ptcb;
;;;195    #endif
;;;196    }
000050  bd10              POP      {r4,pc}
;;;197    #endif
                          ENDP

                  OSTaskStatHook PROC
;;;210    #if OS_CPU_HOOKS_EN > 0u
;;;211    void  OSTaskStatHook (void)
000052  b510              PUSH     {r4,lr}
;;;212    {
;;;213    #if OS_APP_HOOKS_EN > 0u
;;;214        App_TaskStatHook();
000054  f7fffffe          BL       App_TaskStatHook
;;;215    #endif
;;;216    }
000058  bd10              POP      {r4,pc}
;;;217    #endif
                          ENDP

                  OSTaskStkInit PROC
;;;247    
;;;248    OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
00005a  b570              PUSH     {r4-r6,lr}
;;;249    {
00005c  4604              MOV      r4,r0
;;;250        OS_STK *stk;
;;;251    
;;;252    
;;;253        (void)opt;                                   /* 'opt' is not used, prevent warning                 */
;;;254        stk       = ptos;                            /* Load stack pointer                                 */
00005e  4610              MOV      r0,r2
;;;255    
;;;256                                                     /* Registers stacked as if auto-saved on exception    */
;;;257        *(stk)    = (INT32U)0x01000000uL;            /* xPSR                                               */
000060  f04f7580          MOV      r5,#0x1000000
000064  6005              STR      r5,[r0,#0]
;;;258        *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
000066  f1a00504          SUB      r5,r0,#4
00006a  4628              MOV      r0,r5
00006c  602c              STR      r4,[r5,#0]
;;;259        *(--stk)  = (INT32U)OS_TaskReturn;           /* R14 (LR)                                           */
00006e  4e50              LDR      r6,|L1.432|
000070  f1a00504          SUB      r5,r0,#4
000074  4628              MOV      r0,r5
000076  602e              STR      r6,[r5,#0]
;;;260        *(--stk)  = (INT32U)0x12121212uL;            /* R12                                                */
000078  f04f3612          MOV      r6,#0x12121212
00007c  f1a00504          SUB      r5,r0,#4
000080  4628              MOV      r0,r5
000082  602e              STR      r6,[r5,#0]
;;;261        *(--stk)  = (INT32U)0x03030303uL;            /* R3                                                 */
000084  f04f3603          MOV      r6,#0x3030303
000088  f1a00504          SUB      r5,r0,#4
00008c  4628              MOV      r0,r5
00008e  602e              STR      r6,[r5,#0]
;;;262        *(--stk)  = (INT32U)0x02020202uL;            /* R2                                                 */
000090  f04f3602          MOV      r6,#0x2020202
000094  f1a00504          SUB      r5,r0,#4
000098  4628              MOV      r0,r5
00009a  602e              STR      r6,[r5,#0]
;;;263        *(--stk)  = (INT32U)0x01010101uL;            /* R1                                                 */
00009c  f04f3601          MOV      r6,#0x1010101
0000a0  f1a00504          SUB      r5,r0,#4
0000a4  4628              MOV      r0,r5
0000a6  602e              STR      r6,[r5,#0]
;;;264        *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
0000a8  f1a00504          SUB      r5,r0,#4
0000ac  4628              MOV      r0,r5
0000ae  6029              STR      r1,[r5,#0]
;;;265    
;;;266                                                     /* Remaining registers saved on process stack         */
;;;267        *(--stk)  = (INT32U)0x11111111uL;            /* R11                                                */
0000b0  f04f3611          MOV      r6,#0x11111111
0000b4  f1a00504          SUB      r5,r0,#4
0000b8  4628              MOV      r0,r5
0000ba  602e              STR      r6,[r5,#0]
;;;268        *(--stk)  = (INT32U)0x10101010uL;            /* R10                                                */
0000bc  f04f3610          MOV      r6,#0x10101010
0000c0  f1a00504          SUB      r5,r0,#4
0000c4  4628              MOV      r0,r5
0000c6  602e              STR      r6,[r5,#0]
;;;269        *(--stk)  = (INT32U)0x09090909uL;            /* R9                                                 */
0000c8  f04f3609          MOV      r6,#0x9090909
0000cc  f1a00504          SUB      r5,r0,#4
0000d0  4628              MOV      r0,r5
0000d2  602e              STR      r6,[r5,#0]
;;;270        *(--stk)  = (INT32U)0x08080808uL;            /* R8                                                 */
0000d4  f04f3608          MOV      r6,#0x8080808
0000d8  f1a00504          SUB      r5,r0,#4
0000dc  4628              MOV      r0,r5
0000de  602e              STR      r6,[r5,#0]
;;;271        *(--stk)  = (INT32U)0x07070707uL;            /* R7                                                 */
0000e0  f04f3607          MOV      r6,#0x7070707
0000e4  f1a00504          SUB      r5,r0,#4
0000e8  4628              MOV      r0,r5
0000ea  602e              STR      r6,[r5,#0]
;;;272        *(--stk)  = (INT32U)0x06060606uL;            /* R6                                                 */
0000ec  f04f3606          MOV      r6,#0x6060606
0000f0  f1a00504          SUB      r5,r0,#4
0000f4  4628              MOV      r0,r5
0000f6  602e              STR      r6,[r5,#0]
;;;273        *(--stk)  = (INT32U)0x05050505uL;            /* R5                                                 */
0000f8  f04f3605          MOV      r6,#0x5050505
0000fc  f1a00504          SUB      r5,r0,#4
000100  4628              MOV      r0,r5
000102  602e              STR      r6,[r5,#0]
;;;274        *(--stk)  = (INT32U)0x04040404uL;            /* R4                                                 */
000104  f04f3604          MOV      r6,#0x4040404
000108  f1a00504          SUB      r5,r0,#4
00010c  4628              MOV      r0,r5
00010e  602e              STR      r6,[r5,#0]
;;;275    
;;;276        return (stk);
;;;277    }
000110  bd70              POP      {r4-r6,pc}
;;;278    
                          ENDP

                  OSTaskSwHook PROC
;;;294    #if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
;;;295    void  OSTaskSwHook (void)
000112  b510              PUSH     {r4,lr}
;;;296    {
;;;297    #if OS_APP_HOOKS_EN > 0u
;;;298        App_TaskSwHook();
000114  f7fffffe          BL       App_TaskSwHook
;;;299    #endif
;;;300    }
000118  bd10              POP      {r4,pc}
;;;301    #endif
                          ENDP

                  OSTCBInitHook PROC
;;;314    #if OS_CPU_HOOKS_EN > 0u
;;;315    void  OSTCBInitHook (OS_TCB *ptcb)
00011a  b510              PUSH     {r4,lr}
;;;316    {
00011c  4604              MOV      r4,r0
;;;317    #if OS_APP_HOOKS_EN > 0u
;;;318        App_TCBInitHook(ptcb);
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       App_TCBInitHook
;;;319    #else
;;;320        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;321    #endif
;;;322    }
000124  bd10              POP      {r4,pc}
;;;323    #endif
                          ENDP

                  OSTimeTickHook PROC
;;;336    #if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
;;;337    void  OSTimeTickHook (void)
000126  b510              PUSH     {r4,lr}
;;;338    {
;;;339    #if OS_APP_HOOKS_EN > 0u
;;;340        App_TimeTickHook();
000128  f7fffffe          BL       App_TimeTickHook
;;;341    #endif
;;;342    
;;;343    #if OS_TMR_EN > 0u
;;;344        OSTmrCtr++;
00012c  481f              LDR      r0,|L1.428|
00012e  8800              LDRH     r0,[r0,#0]  ; OSTmrCtr
000130  f1000001          ADD      r0,r0,#1
000134  491d              LDR      r1,|L1.428|
000136  8008              STRH     r0,[r1,#0]
;;;345        if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
000138  4608              MOV      r0,r1
00013a  8800              LDRH     r0,[r0,#0]  ; OSTmrCtr
00013c  2864              CMP      r0,#0x64
00013e  d304              BCC      |L1.330|
;;;346            OSTmrCtr = 0;
000140  f04f0000          MOV      r0,#0
000144  8008              STRH     r0,[r1,#0]
;;;347            OSTmrSignal();
000146  f7fffffe          BL       OSTmrSignal
                  |L1.330|
;;;348        }
;;;349    #endif
;;;350    }
00014a  bd10              POP      {r4,pc}
;;;351    #endif
                          ENDP

                  OS_CPU_SysTickHandler PROC
;;;365    
;;;366    void  OS_CPU_SysTickHandler (void)
00014c  b510              PUSH     {r4,lr}
;;;367    {
;;;368        OS_CPU_SR  cpu_sr;
;;;369    
;;;370    
;;;371        OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
00014e  f7fffffe          BL       OS_CPU_SR_Save
000152  4604              MOV      r4,r0
;;;372        OSIntNesting++;
000154  4817              LDR      r0,|L1.436|
000156  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000158  f1000001          ADD      r0,r0,#1
00015c  4915              LDR      r1,|L1.436|
00015e  7008              STRB     r0,[r1,#0]
;;;373        OS_EXIT_CRITICAL();
000160  4620              MOV      r0,r4
000162  f7fffffe          BL       OS_CPU_SR_Restore
;;;374    
;;;375        OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
000166  f7fffffe          BL       OSTimeTick
;;;376    
;;;377        OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
00016a  f7fffffe          BL       OSIntExit
;;;378    }
00016e  bd10              POP      {r4,pc}
;;;379    
                          ENDP

                  OS_CPU_SysTickInit PROC
;;;391    
;;;392    void  OS_CPU_SysTickInit (INT32U  cnts)
000170  f1a00101          SUB      r1,r0,#1
;;;393    {
;;;394        OS_CPU_CM3_NVIC_ST_RELOAD = cnts - 1u;
000174  f04f22e0          MOV      r2,#0xe000e000
000178  6151              STR      r1,[r2,#0x14]
;;;395                                                     /* Set prio of SysTick handler to min prio.           */
;;;396        OS_CPU_CM3_NVIC_PRIO_ST   = OS_CPU_CM3_NVIC_PRIO_MIN;
00017a  f04f01ff          MOV      r1,#0xff
00017e  4a0e              LDR      r2,|L1.440|
000180  7011              STRB     r1,[r2,#0]
;;;397                                                     /* Enable timer.                                      */
;;;398        OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
000182  f04f21e0          MOV      r1,#0xe000e000
000186  6909              LDR      r1,[r1,#0x10]
000188  f0410105          ORR      r1,r1,#5
00018c  f04f22e0          MOV      r2,#0xe000e000
000190  6111              STR      r1,[r2,#0x10]
;;;399                                                     /* Enable timer interrupt.                            */
;;;400        OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
000192  4611              MOV      r1,r2
000194  6909              LDR      r1,[r1,#0x10]
000196  f0410102          ORR      r1,r1,#2
00019a  6111              STR      r1,[r2,#0x10]
;;;401    }
00019c  4770              BX       lr
                          ENDP

00019e  0000              DCW      0x0000
                  |L1.416|
                          DCD      OS_CPU_ExceptStk
                  |L1.420|
                          DCD      OS_CPU_ExceptStk+0x1fc
                  |L1.424|
                          DCD      OS_CPU_ExceptStkBase
                  |L1.428|
                          DCD      OSTmrCtr
                  |L1.432|
                          DCD      OS_TaskReturn
                  |L1.436|
                          DCD      OSIntNesting
                  |L1.440|
                          DCD      0xe000ed23

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  OS_CPU_ExceptStk
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  OS_CPU_ExceptStkBase
                          DCD      0x00000000
                  OSTmrCtr
000004  0000              DCB      0x00,0x00
