; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_exti.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_exti.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_exti.crf ..\BSP\STM32F2xx\src\stm32f2xx_exti.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;102      */
;;;103    void EXTI_DeInit(void)
000000  f04f0000          MOV      r0,#0
;;;104    {
;;;105      EXTI->IMR = 0x00000000;
000004  494a              LDR      r1,|L1.304|
000006  6008              STR      r0,[r1,#0]
;;;106      EXTI->EMR = 0x00000000;
000008  f1010104          ADD      r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;107      EXTI->RTSR = 0x00000000;
00000e  f1010104          ADD      r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;108      EXTI->FTSR = 0x00000000;
000014  f1010104          ADD      r1,r1,#4
000018  6008              STR      r0,[r1,#0]
;;;109      EXTI->PR = 0x007FFFFF;
00001a  4846              LDR      r0,|L1.308|
00001c  4946              LDR      r1,|L1.312|
00001e  6008              STR      r0,[r1,#0]
;;;110    }
000020  4770              BX       lr
;;;111    
                          ENDP

                  EXTI_Init PROC
;;;118      */
;;;119    void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
000022  f04f0100          MOV      r1,#0
;;;120    {
;;;121      uint32_t tmp = 0;
;;;122    
;;;123      /* Check the parameters */
;;;124      assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;125      assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;126      assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
;;;127      assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;128    
;;;129      tmp = (uint32_t)EXTI_BASE;
000026  4942              LDR      r1,|L1.304|
;;;130         
;;;131      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
000028  7982              LDRB     r2,[r0,#6]
00002a  2a00              CMP      r2,#0
00002c  d040              BEQ      |L1.176|
;;;132      {
;;;133        /* Clear EXTI line configuration */
;;;134        EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
00002e  460a              MOV      r2,r1
000030  6812              LDR      r2,[r2,#0]
000032  6803              LDR      r3,[r0,#0]
000034  ea220203          BIC      r2,r2,r3
000038  460b              MOV      r3,r1
00003a  601a              STR      r2,[r3,#0]
;;;135        EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
00003c  f1010204          ADD      r2,r1,#4
000040  6812              LDR      r2,[r2,#0]
000042  6803              LDR      r3,[r0,#0]
000044  ea220203          BIC      r2,r2,r3
000048  f1010304          ADD      r3,r1,#4
00004c  601a              STR      r2,[r3,#0]
;;;136        
;;;137        tmp += EXTI_InitStruct->EXTI_Mode;
00004e  7902              LDRB     r2,[r0,#4]
000050  4411              ADD      r1,r1,r2
;;;138    
;;;139        *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
000052  680a              LDR      r2,[r1,#0]
000054  6803              LDR      r3,[r0,#0]
000056  ea420203          ORR      r2,r2,r3
00005a  600a              STR      r2,[r1,#0]
;;;140    
;;;141        /* Clear Rising Falling edge configuration */
;;;142        EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
00005c  4a37              LDR      r2,|L1.316|
00005e  6812              LDR      r2,[r2,#0]
000060  6803              LDR      r3,[r0,#0]
000062  ea220203          BIC      r2,r2,r3
000066  4b35              LDR      r3,|L1.316|
000068  601a              STR      r2,[r3,#0]
;;;143        EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
00006a  f1030204          ADD      r2,r3,#4
00006e  6812              LDR      r2,[r2,#0]
000070  6803              LDR      r3,[r0,#0]
000072  ea220203          BIC      r2,r2,r3
000076  4b32              LDR      r3,|L1.320|
000078  601a              STR      r2,[r3,#0]
;;;144        
;;;145        /* Select the trigger for the selected external interrupts */
;;;146        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
00007a  7942              LDRB     r2,[r0,#5]
00007c  2a10              CMP      r2,#0x10
00007e  d10e              BNE      |L1.158|
;;;147        {
;;;148          /* Rising Falling edge */
;;;149          EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
000080  4a2e              LDR      r2,|L1.316|
000082  6812              LDR      r2,[r2,#0]
000084  6803              LDR      r3,[r0,#0]
000086  ea420203          ORR      r2,r2,r3
00008a  4b2c              LDR      r3,|L1.316|
00008c  601a              STR      r2,[r3,#0]
;;;150          EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
00008e  4a2c              LDR      r2,|L1.320|
000090  6812              LDR      r2,[r2,#0]
000092  6803              LDR      r3,[r0,#0]
000094  ea420203          ORR      r2,r2,r3
000098  4b29              LDR      r3,|L1.320|
00009a  601a              STR      r2,[r3,#0]
00009c  e00f              B        |L1.190|
                  |L1.158|
;;;151        }
;;;152        else
;;;153        {
;;;154          tmp = (uint32_t)EXTI_BASE;
00009e  4924              LDR      r1,|L1.304|
;;;155          tmp += EXTI_InitStruct->EXTI_Trigger;
0000a0  7942              LDRB     r2,[r0,#5]
0000a2  4411              ADD      r1,r1,r2
;;;156    
;;;157          *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
0000a4  680a              LDR      r2,[r1,#0]
0000a6  6803              LDR      r3,[r0,#0]
0000a8  ea420203          ORR      r2,r2,r3
0000ac  600a              STR      r2,[r1,#0]
0000ae  e006              B        |L1.190|
                  |L1.176|
;;;158        }
;;;159      }
;;;160      else
;;;161      {
;;;162        tmp += EXTI_InitStruct->EXTI_Mode;
0000b0  7902              LDRB     r2,[r0,#4]
0000b2  4411              ADD      r1,r1,r2
;;;163    
;;;164        /* Disable the selected external lines */
;;;165        *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
0000b4  680a              LDR      r2,[r1,#0]
0000b6  6803              LDR      r3,[r0,#0]
0000b8  ea220203          BIC      r2,r2,r3
0000bc  600a              STR      r2,[r1,#0]
                  |L1.190|
;;;166      }
;;;167    }
0000be  4770              BX       lr
;;;168    
                          ENDP

                  EXTI_StructInit PROC
;;;174      */
;;;175    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
0000c0  f04f0100          MOV      r1,#0
;;;176    {
;;;177      EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
0000c4  6001              STR      r1,[r0,#0]
;;;178      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
0000c6  7101              STRB     r1,[r0,#4]
;;;179      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
0000c8  f04f010c          MOV      r1,#0xc
0000cc  7141              STRB     r1,[r0,#5]
;;;180      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
0000ce  f04f0100          MOV      r1,#0
0000d2  7181              STRB     r1,[r0,#6]
;;;181    }
0000d4  4770              BX       lr
;;;182    
                          ENDP

                  EXTI_GenerateSWInterrupt PROC
;;;189      */
;;;190    void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
0000d6  491b              LDR      r1,|L1.324|
;;;191    {
;;;192      /* Check the parameters */
;;;193      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;194      
;;;195      EXTI->SWIER |= EXTI_Line;
0000d8  6809              LDR      r1,[r1,#0]
0000da  ea410100          ORR      r1,r1,r0
0000de  4a19              LDR      r2,|L1.324|
0000e0  6011              STR      r1,[r2,#0]
;;;196    }
0000e2  4770              BX       lr
;;;197    
                          ENDP

                  EXTI_GetFlagStatus PROC
;;;219      */
;;;220    FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
0000e4  4601              MOV      r1,r0
;;;221    {
;;;222      FlagStatus bitstatus = RESET;
0000e6  f04f0000          MOV      r0,#0
;;;223      /* Check the parameters */
;;;224      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;225      
;;;226      if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
0000ea  4a13              LDR      r2,|L1.312|
0000ec  6812              LDR      r2,[r2,#0]
0000ee  420a              TST      r2,r1
0000f0  d002              BEQ      |L1.248|
;;;227      {
;;;228        bitstatus = SET;
0000f2  f04f0001          MOV      r0,#1
0000f6  e001              B        |L1.252|
                  |L1.248|
;;;229      }
;;;230      else
;;;231      {
;;;232        bitstatus = RESET;
0000f8  f04f0000          MOV      r0,#0
                  |L1.252|
;;;233      }
;;;234      return bitstatus;
;;;235    }
0000fc  4770              BX       lr
;;;236    
                          ENDP

                  EXTI_ClearFlag PROC
;;;242      */
;;;243    void EXTI_ClearFlag(uint32_t EXTI_Line)
0000fe  490e              LDR      r1,|L1.312|
;;;244    {
;;;245      /* Check the parameters */
;;;246      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;247      
;;;248      EXTI->PR = EXTI_Line;
000100  6008              STR      r0,[r1,#0]
;;;249    }
000102  4770              BX       lr
;;;250    
                          ENDP

                  EXTI_GetITStatus PROC
;;;256      */
;;;257    ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
000104  4601              MOV      r1,r0
;;;258    {
;;;259      ITStatus bitstatus = RESET;
000106  f04f0000          MOV      r0,#0
;;;260      uint32_t enablestatus = 0;
00010a  4602              MOV      r2,r0
;;;261      /* Check the parameters */
;;;262      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;263      
;;;264      enablestatus =  EXTI->IMR & EXTI_Line;
00010c  4b08              LDR      r3,|L1.304|
00010e  681b              LDR      r3,[r3,#0]
000110  ea030201          AND      r2,r3,r1
;;;265      if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
000114  4b08              LDR      r3,|L1.312|
000116  681b              LDR      r3,[r3,#0]
000118  420b              TST      r3,r1
00011a  d003              BEQ      |L1.292|
00011c  b112              CBZ      r2,|L1.292|
;;;266      {
;;;267        bitstatus = SET;
00011e  f04f0001          MOV      r0,#1
000122  e001              B        |L1.296|
                  |L1.292|
;;;268      }
;;;269      else
;;;270      {
;;;271        bitstatus = RESET;
000124  f04f0000          MOV      r0,#0
                  |L1.296|
;;;272      }
;;;273      return bitstatus;
;;;274    }
000128  4770              BX       lr
;;;275    
                          ENDP

                  EXTI_ClearITPendingBit PROC
;;;281      */
;;;282    void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
00012a  4903              LDR      r1,|L1.312|
;;;283    {
;;;284      /* Check the parameters */
;;;285      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;286      
;;;287      EXTI->PR = EXTI_Line;
00012c  6008              STR      r0,[r1,#0]
;;;288    }
00012e  4770              BX       lr
;;;289    
                          ENDP

                  |L1.304|
                          DCD      0x40013c00
                  |L1.308|
                          DCD      0x007fffff
                  |L1.312|
                          DCD      0x40013c14
                  |L1.316|
                          DCD      0x40013c08
                  |L1.320|
                          DCD      0x40013c0c
                  |L1.324|
                          DCD      0x40013c10

;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_exti.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f2xx_exti_c_28b3b60e____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___16_stm32f2xx_exti_c_28b3b60e____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_stm32f2xx_exti_c_28b3b60e____REVSH|
#line 130
|__asm___16_stm32f2xx_exti_c_28b3b60e____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
