; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\cpu_core.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\cpu_core.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\cpu_core.crf ..\..\uC-CPU\cpu_core.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CPU_NameClr PROC
;;;262    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;263    void  CPU_NameClr (void)
000000  b510              PUSH     {r4,lr}
;;;264    {
;;;265        CPU_SR_ALLOC();
000002  f04f0400          MOV      r4,#0
;;;266    
;;;267    
;;;268        CPU_CRITICAL_ENTER();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SR_Save
00000e  4604              MOV      r4,r0
000010  bf00              NOP      
000012  bf00              NOP      
;;;269        Mem_Clr((void     *)&CPU_Name[0],
000014  f04f0110          MOV      r1,#0x10
000018  48c1              LDR      r0,|L1.800|
00001a  f7fffffe          BL       Mem_Clr
;;;270                (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
;;;271        CPU_CRITICAL_EXIT();
00001e  bf00              NOP      
000020  bf00              NOP      
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       CPU_SR_Restore
000028  bf00              NOP      
00002a  bf00              NOP      
;;;272    }
00002c  bd10              POP      {r4,pc}
;;;273    #endif
                          ENDP

                  CPU_NameInit PROC
;;;2094   #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;2095   static  void  CPU_NameInit (void)
00002e  b510              PUSH     {r4,lr}
;;;2096   {
;;;2097       CPU_NameClr();
000030  f7fffffe          BL       CPU_NameClr
;;;2098   }
000034  bd10              POP      {r4,pc}
;;;2099   #endif
                          ENDP

                  CPU_TS_Init PROC
;;;2131        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
;;;2132   static  void  CPU_TS_Init (void)
000036  b510              PUSH     {r4,lr}
;;;2133   {
;;;2134   #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
;;;2135         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
;;;2136        ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
;;;2137         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
;;;2138       CPU_TS_TMR  ts_tmr_cnts;
;;;2139   #endif
;;;2140   
;;;2141   
;;;2142                                                                   /* ----------------- INIT CPU TS TMR ------------------ */
;;;2143   #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;2144       CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
000038  f04f0000          MOV      r0,#0
00003c  49b9              LDR      r1,|L1.804|
00003e  6008              STR      r0,[r1,#0]  ; CPU_TS_TmrFreq_Hz
;;;2145       CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
000040  f7fffffe          BL       CPU_TS_TmrInit
;;;2146   #endif
;;;2147   
;;;2148   
;;;2149                                                                   /* ------------------- INIT CPU TS -------------------- */
;;;2150   #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
;;;2151         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
;;;2152        ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
;;;2153         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
;;;2154       ts_tmr_cnts = CPU_TS_TmrRd();                               /* Get init ts tmr val (in ts tmr cnts).                */
;;;2155   #endif
;;;2156   
;;;2157   #if  ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
;;;2158         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
;;;2159       CPU_TS_32_Accum   = 0u;                                     /* Init 32-bit accum'd ts.                              */
;;;2160       CPU_TS_32_TmrPrev = ts_tmr_cnts;                            /* Init 32-bit ts prev tmr val.                         */
;;;2161   #endif
;;;2162   
;;;2163   #if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
;;;2164         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
;;;2165       CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
;;;2166       CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
;;;2167   #endif
;;;2168   }
000044  bd10              POP      {r4,pc}
;;;2169   #endif
                          ENDP

                  CPU_Init PROC
;;;192    
;;;193    void  CPU_Init (void)
000046  b510              PUSH     {r4,lr}
;;;194    {
;;;195                                                                    /* --------------------- INIT TS ---------------------- */
;;;196    #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
;;;197         (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
;;;198        CPU_TS_Init();                                              /* See Note #3a.                                        */
000048  f7fffffe          BL       CPU_TS_Init
;;;199    #endif
;;;200                                                                    /* -------------- INIT INT DIS TIME MEAS -------------- */
;;;201    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;202        CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
;;;203    #endif
;;;204    
;;;205                                                                    /* ------------------ INIT CPU NAME ------------------- */
;;;206    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;207         CPU_NameInit();
00004c  f7fffffe          BL       CPU_NameInit
;;;208    #endif
;;;209    }
000050  bd10              POP      {r4,pc}
;;;210    
                          ENDP

                  CPU_SW_Exception PROC
;;;232    
;;;233    void  CPU_SW_Exception (void)
000052  bf00              NOP      
                  |L1.84|
;;;234    {
;;;235        while (DEF_ON) {
000054  e7fe              B        |L1.84|
;;;236            ;
;;;237        }
;;;238    }
;;;239    
                          ENDP

                  CPU_NameGet PROC
;;;307    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;308    void  CPU_NameGet (CPU_CHAR  *p_name,
000056  b570              PUSH     {r4-r6,lr}
;;;309                       CPU_ERR   *p_err)
;;;310    {
000058  4605              MOV      r5,r0
00005a  460c              MOV      r4,r1
;;;311        CPU_SR_ALLOC();
00005c  f04f0600          MOV      r6,#0
;;;312    
;;;313    
;;;314        if (p_err == (CPU_ERR *)0) {
000060  b914              CBNZ     r4,|L1.104|
;;;315            CPU_SW_EXCEPTION(;);
000062  bf00              NOP      
000064  f7fffffe          BL       CPU_SW_Exception
                  |L1.104|
;;;316        }
;;;317    
;;;318        if (p_name == (CPU_CHAR *)0) {
000068  b91d              CBNZ     r5,|L1.114|
;;;319           *p_err = CPU_ERR_NULL_PTR;
00006a  f04f000a          MOV      r0,#0xa
00006e  8020              STRH     r0,[r4,#0]
                  |L1.112|
;;;320            return;
;;;321        }
;;;322    
;;;323        CPU_CRITICAL_ENTER();
;;;324       (void)Str_Copy_N(p_name,
;;;325                       &CPU_Name[0],
;;;326                        CPU_CFG_NAME_SIZE);
;;;327        CPU_CRITICAL_EXIT();
;;;328    
;;;329       *p_err = CPU_ERR_NONE;
;;;330    }
000070  bd70              POP      {r4-r6,pc}
                  |L1.114|
000072  bf00              NOP                            ;323
000074  bf00              NOP                            ;323
000076  f7fffffe          BL       CPU_SR_Save
00007a  4606              MOV      r6,r0                 ;323
00007c  bf00              NOP                            ;323
00007e  bf00              NOP                            ;323
000080  f04f0210          MOV      r2,#0x10              ;324
000084  49a6              LDR      r1,|L1.800|
000086  4628              MOV      r0,r5                 ;324
000088  f7fffffe          BL       Str_Copy_N
00008c  bf00              NOP                            ;327
00008e  bf00              NOP                            ;327
000090  4630              MOV      r0,r6                 ;327
000092  f7fffffe          BL       CPU_SR_Restore
000096  bf00              NOP                            ;327
000098  bf00              NOP                            ;327
00009a  f04f0000          MOV      r0,#0                 ;329
00009e  8020              STRH     r0,[r4,#0]            ;329
0000a0  bf00              NOP      
0000a2  e7e5              B        |L1.112|
;;;331    #endif
                          ENDP

                  CPU_NameSet PROC
;;;361    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;362    void  CPU_NameSet (const  CPU_CHAR  *p_name,
0000a4  e92d41f0          PUSH     {r4-r8,lr}
;;;363                              CPU_ERR   *p_err)
;;;364    {
0000a8  4605              MOV      r5,r0
0000aa  460c              MOV      r4,r1
;;;365        CPU_SIZE_T  len;
;;;366        CPU_SR_ALLOC();
0000ac  f04f0700          MOV      r7,#0
;;;367    
;;;368    
;;;369        if (p_err == (CPU_ERR *)0) {
0000b0  b914              CBNZ     r4,|L1.184|
;;;370            CPU_SW_EXCEPTION(;);
0000b2  bf00              NOP      
0000b4  f7fffffe          BL       CPU_SW_Exception
                  |L1.184|
;;;371        }
;;;372    
;;;373        if (p_name == (const CPU_CHAR *)0) {
0000b8  b925              CBNZ     r5,|L1.196|
;;;374           *p_err = CPU_ERR_NULL_PTR;
0000ba  f04f000a          MOV      r0,#0xa
0000be  8020              STRH     r0,[r4,#0]
                  |L1.192|
;;;375            return;
;;;376        }
;;;377    
;;;378        len = Str_Len_N(p_name,
;;;379                        CPU_CFG_NAME_SIZE);
;;;380        if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name size, ...           */
;;;381            CPU_CRITICAL_ENTER();
;;;382           (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host name.                  */
;;;383                             p_name,
;;;384                             CPU_CFG_NAME_SIZE);
;;;385            CPU_CRITICAL_EXIT();
;;;386           *p_err = CPU_ERR_NONE;
;;;387    
;;;388        } else {
;;;389           *p_err = CPU_ERR_NAME_SIZE;
;;;390        }
;;;391    }
0000c0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.196|
0000c4  2110              MOVS     r1,#0x10              ;378
0000c6  4628              MOV      r0,r5                 ;378
0000c8  f7fffffe          BL       Str_Len_N
0000cc  4606              MOV      r6,r0                 ;378
0000ce  2e10              CMP      r6,#0x10              ;380
0000d0  d217              BCS      |L1.258|
0000d2  bf00              NOP                            ;381
0000d4  bf00              NOP                            ;381
0000d6  f7fffffe          BL       CPU_SR_Save
0000da  4607              MOV      r7,r0                 ;381
0000dc  bf00              NOP                            ;381
0000de  bf00              NOP                            ;381
0000e0  f04f0210          MOV      r2,#0x10              ;382
0000e4  4629              MOV      r1,r5                 ;382
0000e6  488e              LDR      r0,|L1.800|
0000e8  f7fffffe          BL       Str_Copy_N
0000ec  bf00              NOP                            ;385
0000ee  bf00              NOP                            ;385
0000f0  4638              MOV      r0,r7                 ;385
0000f2  f7fffffe          BL       CPU_SR_Restore
0000f6  bf00              NOP                            ;385
0000f8  bf00              NOP                            ;385
0000fa  f04f0000          MOV      r0,#0                 ;386
0000fe  8020              STRH     r0,[r4,#0]            ;386
000100  e002              B        |L1.264|
                  |L1.258|
000102  f44f707a          MOV      r0,#0x3e8             ;389
000106  8020              STRH     r0,[r4,#0]            ;389
                  |L1.264|
000108  bf00              NOP      
00010a  e7d9              B        |L1.192|
;;;392    #endif
                          ENDP

                  CPU_TS_Get32 PROC
;;;448    #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
;;;449    CPU_TS32  CPU_TS_Get32 (void)
00010c  b510              PUSH     {r4,lr}
;;;450    {
;;;451        CPU_TS32    ts;
;;;452    #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
;;;453        CPU_TS_TMR  tmr_cur;
;;;454        CPU_TS_TMR  tmr_delta;
;;;455        CPU_SR_ALLOC();
;;;456    #endif
;;;457    
;;;458    
;;;459    #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
;;;460        ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bit ts cnts).          */
00010e  f7fffffe          BL       CPU_TS_TmrRd
000112  4604              MOV      r4,r0
;;;461    
;;;462    #else
;;;463        CPU_INT_DIS();
;;;464        tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tmr cnts).             */
;;;465        tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.                     */
;;;466        CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts (see Note #2).       */
;;;467        CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for next update.            */
;;;468        ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
;;;469        CPU_INT_EN();
;;;470    #endif
;;;471    
;;;472        return (ts);
000114  4620              MOV      r0,r4
;;;473    }
000116  bd10              POP      {r4,pc}
;;;474    #endif
                          ENDP

                  CPU_TS_Update PROC
;;;585    #if (CPU_CFG_TS_EN == DEF_ENABLED)
;;;586    void  CPU_TS_Update (void)
000118  4770              BX       lr
;;;587    {
;;;588    #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
;;;589         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
;;;590       (void)CPU_TS_Get32();
;;;591    #endif
;;;592    
;;;593    #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
;;;594         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
;;;595       (void)CPU_TS_Get64();
;;;596    #endif
;;;597    }
;;;598    #endif
                          ENDP

                  CPU_TS_TmrFreqGet PROC
;;;628    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;629    CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
00011a  4601              MOV      r1,r0
;;;630    {
;;;631        CPU_TS_TMR_FREQ  freq_hz;
;;;632    
;;;633    
;;;634        if (p_err == (CPU_ERR *)0) {
00011c  b911              CBNZ     r1,|L1.292|
;;;635            CPU_SW_EXCEPTION(;);
00011e  bf00              NOP      
000120  f7fffffe          BL       CPU_SW_Exception
                  |L1.292|
;;;636        }
;;;637    
;;;638        freq_hz =  CPU_TS_TmrFreq_Hz;
000124  4a7f              LDR      r2,|L1.804|
000126  6810              LDR      r0,[r2,#0]  ; CPU_TS_TmrFreq_Hz
;;;639       *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
000128  b110              CBZ      r0,|L1.304|
00012a  f04f0200          MOV      r2,#0
00012e  e001              B        |L1.308|
                  |L1.304|
000130  f44f62fa          MOV      r2,#0x7d0
                  |L1.308|
000134  800a              STRH     r2,[r1,#0]
;;;640    
;;;641        return (freq_hz);
;;;642    }
000136  4770              BX       lr
;;;643    #endif
                          ENDP

                  CPU_TS_TmrFreqSet PROC
;;;680    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;681    void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
000138  497a              LDR      r1,|L1.804|
;;;682    {
;;;683        CPU_TS_TmrFreq_Hz = freq_hz;
00013a  6008              STR      r0,[r1,#0]  ; CPU_TS_TmrFreq_Hz
;;;684    }
00013c  4770              BX       lr
;;;685    #endif
                          ENDP

                  CPU_CntLeadZeros08 PROC
;;;1209   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
;;;1210   CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
00013e  b570              PUSH     {r4-r6,lr}
;;;1211   {
000140  4605              MOV      r5,r0
;;;1212   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1213           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
;;;1214       CPU_DATA  ix;
;;;1215   #endif
;;;1216       CPU_DATA  nbr_lead_zeros;
;;;1217   
;;;1218                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1219   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1220        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
;;;1221       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000142  4628              MOV      r0,r5
000144  f7fffffe          BL       CPU_CntLeadZeros
000148  4604              MOV      r4,r0
;;;1222       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
00014a  f1a40418          SUB      r4,r4,#0x18
;;;1223   
;;;1224   
;;;1225   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1226                                                                                   /* Chk bits [07:00] :                   */
;;;1227                                                                                   /* .. Nbr lead zeros =               .. */
;;;1228       ix              = (CPU_DATA)(val >>  0u);                                   /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1229       nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);                /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1230   #endif
;;;1231   
;;;1232   
;;;1233       return (nbr_lead_zeros);
00014e  4620              MOV      r0,r4
;;;1234   }
000150  bd70              POP      {r4-r6,pc}
;;;1235   #endif
                          ENDP

                  CPU_CntLeadZeros16 PROC
;;;1277   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
;;;1278   CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
000152  b570              PUSH     {r4-r6,lr}
;;;1279   {
000154  4605              MOV      r5,r0
;;;1280   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1281           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
;;;1282       CPU_DATA  ix;
;;;1283   #endif
;;;1284       CPU_DATA  nbr_lead_zeros;
;;;1285   
;;;1286                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1287   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1288        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
;;;1289       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000156  4628              MOV      r0,r5
000158  f7fffffe          BL       CPU_CntLeadZeros
00015c  4604              MOV      r4,r0
;;;1290       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
00015e  f1a40410          SUB      r4,r4,#0x10
;;;1291   
;;;1292   
;;;1293   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1294       if (val > 0x00FFu) {                                                        /* Chk bits [15:08] :                   */
;;;1295                                                                                   /* .. Nbr lead zeros =               .. */
;;;1296           ix             = (CPU_DATA)(val >>  8u);                                /* .. lookup tbl ix  = 'val' >>  8 bits */
;;;1297           nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);             /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1298   
;;;1299       } else {                                                                    /* Chk bits [07:00] :                   */
;;;1300                                                                                   /* .. Nbr lead zeros =               .. */
;;;1301           ix             = (CPU_DATA)(val >>  0u);                                /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1302           nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);             /* .. plus nbr msb lead zeros =  8 bits.*/
;;;1303       }
;;;1304   #endif
;;;1305   
;;;1306   
;;;1307       return (nbr_lead_zeros);
000162  4620              MOV      r0,r4
;;;1308   }
000164  bd70              POP      {r4-r6,pc}
;;;1309   #endif
                          ENDP

                  CPU_CntLeadZeros32 PROC
;;;1351   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
;;;1352   CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
000166  b570              PUSH     {r4-r6,lr}
;;;1353   {
000168  4605              MOV      r5,r0
;;;1354   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1355           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
;;;1356       CPU_DATA  ix;
;;;1357   #endif
;;;1358       CPU_DATA  nbr_lead_zeros;
;;;1359   
;;;1360                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1361   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1362        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
;;;1363       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
00016a  4628              MOV      r0,r5
00016c  f7fffffe          BL       CPU_CntLeadZeros
000170  4604              MOV      r4,r0
;;;1364       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
000172  bf00              NOP      
;;;1365   
;;;1366   
;;;1367   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1368       if (val > 0x0000FFFFu) {
;;;1369           if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24] :                   */
;;;1370                                                                                   /* .. Nbr lead zeros =               .. */
;;;1371               ix             = (CPU_DATA)(val >> 24u);                            /* .. lookup tbl ix  = 'val' >> 24 bits */
;;;1372               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);         /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1373   
;;;1374           } else {                                                                /* Chk bits [23:16] :                   */
;;;1375                                                                                   /* .. Nbr lead zeros =               .. */
;;;1376               ix             = (CPU_DATA)(val >> 16u);                            /* .. lookup tbl ix  = 'val' >> 16 bits */
;;;1377               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);         /* .. plus nbr msb lead zeros =  8 bits.*/
;;;1378           }
;;;1379   
;;;1380       } else {
;;;1381           if (val > 0x000000FFu) {                                                /* Chk bits [15:08] :                   */
;;;1382                                                                                   /* .. Nbr lead zeros =               .. */
;;;1383               ix             = (CPU_DATA)(val >>  8u);                            /* .. lookup tbl ix  = 'val' >>  8 bits */
;;;1384               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);         /* .. plus nbr msb lead zeros = 16 bits.*/
;;;1385   
;;;1386           } else {                                                                /* Chk bits [07:00] :                   */
;;;1387                                                                                   /* .. Nbr lead zeros =               .. */
;;;1388               ix             = (CPU_DATA)(val >>  0u);                            /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1389               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);         /* .. plus nbr msb lead zeros = 24 bits.*/
;;;1390           }
;;;1391       }
;;;1392   #endif
;;;1393   
;;;1394   
;;;1395       return (nbr_lead_zeros);
000174  4620              MOV      r0,r4
;;;1396   }
000176  bd70              POP      {r4-r6,pc}
;;;1397   #endif
                          ENDP

                  CPU_CntLeadZeros64 PROC
;;;1439   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
;;;1440   CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
000178  e92d4ff0          PUSH     {r4-r11,lr}
;;;1441   {
00017c  b08b              SUB      sp,sp,#0x2c
00017e  4604              MOV      r4,r0
000180  460d              MOV      r5,r1
;;;1442   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1443           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
;;;1444       CPU_DATA  ix;
;;;1445   #endif
;;;1446       CPU_DATA  nbr_lead_zeros;
;;;1447   
;;;1448                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1449   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1450        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
;;;1451       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
;;;1452       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
;;;1453   
;;;1454   
;;;1455   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1456       if (val > 0x00000000FFFFFFFFu) {
000182  f04f31ff          MOV      r1,#0xffffffff
000186  f04f0000          MOV      r0,#0
00018a  1b09              SUBS     r1,r1,r4
00018c  41a8              SBCS     r0,r0,r5
00018e  d243              BCS      |L1.536|
;;;1457           if (val > 0x0000FFFFFFFFFFFFu) {
000190  f04f31ff          MOV      r1,#0xffffffff
000194  0c08              LSRS     r0,r1,#16
000196  1b09              SUBS     r1,r1,r4
000198  41a8              SBCS     r0,r0,r5
00019a  d21d              BCS      |L1.472|
;;;1458               if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56] :                   */
00019c  f04f31ff          MOV      r1,#0xffffffff
0001a0  0a08              LSRS     r0,r1,#8
0001a2  1b09              SUBS     r1,r1,r4
0001a4  41a8              SBCS     r0,r0,r5
0001a6  d20a              BCS      |L1.446|
;;;1459                                                                                   /* .. Nbr lead zeros =               .. */
;;;1460                   ix             = (CPU_DATA)(val >> 56u);                        /* .. lookup tbl ix  = 'val' >> 56 bits */
0001a8  2238              MOVS     r2,#0x38
0001aa  46a0              MOV      r8,r4
0001ac  46a9              MOV      r9,r5
0001ae  4640              MOV      r0,r8
0001b0  4649              MOV      r1,r9
0001b2  f7fffffe          BL       __aeabi_llsr
0001b6  4606              MOV      r6,r0
;;;1461                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);     /* .. plus nbr msb lead zeros =  0 bits.*/
0001b8  495b              LDR      r1,|L1.808|
0001ba  5d8f              LDRB     r7,[r1,r6]
0001bc  e069              B        |L1.658|
                  |L1.446|
;;;1462   
;;;1463               } else {                                                            /* Chk bits [55:48] :                   */
;;;1464                                                                                   /* .. Nbr lead zeros =               .. */
;;;1465                   ix             = (CPU_DATA)(val >> 48u);                        /* .. lookup tbl ix  = 'val' >> 48 bits */
0001be  2230              MOVS     r2,#0x30
0001c0  46a2              MOV      r10,r4
0001c2  46ab              MOV      r11,r5
0001c4  4650              MOV      r0,r10
0001c6  4659              MOV      r1,r11
0001c8  f7fffffe          BL       __aeabi_llsr
0001cc  4606              MOV      r6,r0
;;;1466                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);     /* .. plus nbr msb lead zeros =  8 bits.*/
0001ce  4956              LDR      r1,|L1.808|
0001d0  5d88              LDRB     r0,[r1,r6]
0001d2  f1000708          ADD      r7,r0,#8
0001d6  e05c              B        |L1.658|
                  |L1.472|
;;;1467               }
;;;1468   
;;;1469           } else {
;;;1470               if (val > 0x000000FFFFFFFFFFu) {                                    /* Chk bits [47:40] :                   */
0001d8  f04f31ff          MOV      r1,#0xffffffff
0001dc  20ff              MOVS     r0,#0xff
0001de  1b09              SUBS     r1,r1,r4
0001e0  41a8              SBCS     r0,r0,r5
0001e2  d20c              BCS      |L1.510|
;;;1471                                                                                   /* .. Nbr lead zeros =               .. */
;;;1472                   ix             = (CPU_DATA)(val >> 40u);                        /* .. lookup tbl ix  = 'val' >> 40 bits */
0001e4  2228              MOVS     r2,#0x28
0001e6  4620              MOV      r0,r4
0001e8  4629              MOV      r1,r5
0001ea  e9cd5401          STRD     r5,r4,[sp,#4]
0001ee  f7fffffe          BL       __aeabi_llsr
0001f2  4606              MOV      r6,r0
;;;1473                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);     /* .. plus nbr msb lead zeros = 16 bits.*/
0001f4  494c              LDR      r1,|L1.808|
0001f6  5d88              LDRB     r0,[r1,r6]
0001f8  f1000710          ADD      r7,r0,#0x10
0001fc  e049              B        |L1.658|
                  |L1.510|
;;;1474   
;;;1475               } else {                                                            /* Chk bits [39:32] :                   */
;;;1476                                                                                   /* .. Nbr lead zeros =               .. */
;;;1477                   ix             = (CPU_DATA)(val >> 32u);                        /* .. lookup tbl ix  = 'val' >> 32 bits */
0001fe  2220              MOVS     r2,#0x20
000200  4620              MOV      r0,r4
000202  4629              MOV      r1,r5
000204  e9cd5403          STRD     r5,r4,[sp,#0xc]
000208  f7fffffe          BL       __aeabi_llsr
00020c  4606              MOV      r6,r0
;;;1478                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);     /* .. plus nbr msb lead zeros = 24 bits.*/
00020e  4946              LDR      r1,|L1.808|
000210  5d88              LDRB     r0,[r1,r6]
000212  f1000718          ADD      r7,r0,#0x18
000216  e03c              B        |L1.658|
                  |L1.536|
;;;1479               }
;;;1480           }
;;;1481   
;;;1482       } else {
;;;1483           if (val > 0x000000000000FFFFu) {
000218  f64f71ff          MOV      r1,#0xffff
00021c  2000              MOVS     r0,#0
00021e  1b09              SUBS     r1,r1,r4
000220  41a8              SBCS     r0,r0,r5
000222  d21f              BCS      |L1.612|
;;;1484               if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24] :                   */
000224  f06f417f          MVN      r1,#0xff000000
000228  2000              MOVS     r0,#0
00022a  1b09              SUBS     r1,r1,r4
00022c  41a8              SBCS     r0,r0,r5
00022e  d20c              BCS      |L1.586|
;;;1485                                                                                   /* .. Nbr lead zeros =               .. */
;;;1486                   ix             = (CPU_DATA)(val >> 24u);                        /* .. lookup tbl ix  = 'val' >> 24 bits */
000230  2218              MOVS     r2,#0x18
000232  4620              MOV      r0,r4
000234  4629              MOV      r1,r5
000236  e9cd5405          STRD     r5,r4,[sp,#0x14]
00023a  f7fffffe          BL       __aeabi_llsr
00023e  4606              MOV      r6,r0
;;;1487                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 32u);     /* .. plus nbr msb lead zeros = 32 bits.*/
000240  4939              LDR      r1,|L1.808|
000242  5d88              LDRB     r0,[r1,r6]
000244  f1000720          ADD      r7,r0,#0x20
000248  e023              B        |L1.658|
                  |L1.586|
;;;1488   
;;;1489               } else {                                                            /* Chk bits [23:16] :                   */
;;;1490                                                                                   /* .. Nbr lead zeros =               .. */
;;;1491                   ix             = (CPU_DATA)(val >> 16u);                        /* .. lookup tbl ix  = 'val' >> 16 bits */
00024a  2210              MOVS     r2,#0x10
00024c  4620              MOV      r0,r4
00024e  4629              MOV      r1,r5
000250  e9cd5407          STRD     r5,r4,[sp,#0x1c]
000254  f7fffffe          BL       __aeabi_llsr
000258  4606              MOV      r6,r0
;;;1492                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 40u);     /* .. plus nbr msb lead zeros = 40 bits.*/
00025a  4933              LDR      r1,|L1.808|
00025c  5d88              LDRB     r0,[r1,r6]
00025e  f1000728          ADD      r7,r0,#0x28
000262  e016              B        |L1.658|
                  |L1.612|
;;;1493               }
;;;1494   
;;;1495           } else {
;;;1496               if (val > 0x00000000000000FFu) {                                    /* Chk bits [15:08] :                   */
000264  21ff              MOVS     r1,#0xff
000266  2000              MOVS     r0,#0
000268  1b09              SUBS     r1,r1,r4
00026a  41a8              SBCS     r0,r0,r5
00026c  d20c              BCS      |L1.648|
;;;1497                                                                                   /* .. Nbr lead zeros =               .. */
;;;1498                   ix             = (CPU_DATA)(val >>  8u);                        /* .. lookup tbl ix  = 'val' >>  8 bits */
00026e  2208              MOVS     r2,#8
000270  4620              MOV      r0,r4
000272  4629              MOV      r1,r5
000274  e9cd5409          STRD     r5,r4,[sp,#0x24]
000278  f7fffffe          BL       __aeabi_llsr
00027c  4606              MOV      r6,r0
;;;1499                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 48u);     /* .. plus nbr msb lead zeros = 48 bits.*/
00027e  492a              LDR      r1,|L1.808|
000280  5d88              LDRB     r0,[r1,r6]
000282  f1000730          ADD      r7,r0,#0x30
000286  e004              B        |L1.658|
                  |L1.648|
;;;1500   
;;;1501               } else {                                                            /* Chk bits [07:00] :                   */
;;;1502                                                                                   /* .. Nbr lead zeros =               .. */
;;;1503                   ix             = (CPU_DATA)(val >>  0u);                        /* .. lookup tbl ix  = 'val' >>  0 bits */
000288  4626              MOV      r6,r4
;;;1504                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 56u);     /* .. plus nbr msb lead zeros = 56 bits.*/
00028a  4827              LDR      r0,|L1.808|
00028c  5d80              LDRB     r0,[r0,r6]
00028e  f1000738          ADD      r7,r0,#0x38
                  |L1.658|
;;;1505               }
;;;1506           }
;;;1507       }
;;;1508   #endif
;;;1509   
;;;1510   
;;;1511       return (nbr_lead_zeros);
000292  4638              MOV      r0,r7
;;;1512   }
000294  b00b              ADD      sp,sp,#0x2c
000296  e8bd8ff0          POP      {r4-r11,pc}
;;;1513   #endif
                          ENDP

                  CPU_CntTrailZeros08 PROC
;;;1721   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
;;;1722   CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
00029a  b570              PUSH     {r4-r6,lr}
;;;1723   {
00029c  4604              MOV      r4,r0
;;;1724   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1725           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
;;;1726       CPU_INT08U  val_bit_mask;
;;;1727       CPU_DATA    nbr_lead_zeros;
;;;1728   #endif
;;;1729       CPU_DATA    nbr_trail_zeros;
;;;1730   
;;;1731   
;;;1732       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
00029e  b90c              CBNZ     r4,|L1.676|
;;;1733           return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
0002a0  2008              MOVS     r0,#8
                  |L1.674|
;;;1734       }
;;;1735   
;;;1736                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1737   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1738        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
;;;1739       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1740   
;;;1741   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1742       val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1743       nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1744                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1745       nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1746   #endif
;;;1747   
;;;1748   
;;;1749       return (nbr_trail_zeros);
;;;1750   }
0002a2  bd70              POP      {r4-r6,pc}
                  |L1.676|
0002a4  4620              MOV      r0,r4                 ;1739
0002a6  f7fffffe          BL       CPU_CntTrailZeros
0002aa  4605              MOV      r5,r0                 ;1739
0002ac  4628              MOV      r0,r5                 ;1749
0002ae  e7f8              B        |L1.674|
;;;1751   #endif
                          ENDP

                  CPU_CntTrailZeros16 PROC
;;;1826   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
;;;1827   CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
0002b0  b570              PUSH     {r4-r6,lr}
;;;1828   {
0002b2  4604              MOV      r4,r0
;;;1829   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1830           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
;;;1831       CPU_INT16U  val_bit_mask;
;;;1832       CPU_DATA    nbr_lead_zeros;
;;;1833   #endif
;;;1834       CPU_DATA    nbr_trail_zeros;
;;;1835   
;;;1836   
;;;1837       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
0002b4  b90c              CBNZ     r4,|L1.698|
;;;1838           return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
0002b6  2010              MOVS     r0,#0x10
                  |L1.696|
;;;1839       }
;;;1840   
;;;1841                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1842   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1843        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
;;;1844       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1845   
;;;1846   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1847       val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1848       nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1849                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1850       nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1851   #endif
;;;1852   
;;;1853   
;;;1854       return (nbr_trail_zeros);
;;;1855   }
0002b8  bd70              POP      {r4-r6,pc}
                  |L1.698|
0002ba  4620              MOV      r0,r4                 ;1844
0002bc  f7fffffe          BL       CPU_CntTrailZeros
0002c0  4605              MOV      r5,r0                 ;1844
0002c2  4628              MOV      r0,r5                 ;1854
0002c4  e7f8              B        |L1.696|
;;;1856   #endif
                          ENDP

                  CPU_CntTrailZeros32 PROC
;;;1931   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
;;;1932   CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
0002c6  b570              PUSH     {r4-r6,lr}
;;;1933   {
0002c8  4604              MOV      r4,r0
;;;1934   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1935           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
;;;1936       CPU_INT32U  val_bit_mask;
;;;1937       CPU_DATA    nbr_lead_zeros;
;;;1938   #endif
;;;1939       CPU_DATA    nbr_trail_zeros;
;;;1940   
;;;1941   
;;;1942       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
0002ca  b90c              CBNZ     r4,|L1.720|
;;;1943           return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
0002cc  2020              MOVS     r0,#0x20
                  |L1.718|
;;;1944       }
;;;1945   
;;;1946                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1947   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1948        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
;;;1949       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1950   
;;;1951   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1952       val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1953       nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1954                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1955       nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1956   #endif
;;;1957   
;;;1958   
;;;1959       return (nbr_trail_zeros);
;;;1960   }
0002ce  bd70              POP      {r4-r6,pc}
                  |L1.720|
0002d0  4620              MOV      r0,r4                 ;1949
0002d2  f7fffffe          BL       CPU_CntTrailZeros
0002d6  4605              MOV      r5,r0                 ;1949
0002d8  4628              MOV      r0,r5                 ;1959
0002da  e7f8              B        |L1.718|
;;;1961   #endif
                          ENDP

                  CPU_CntTrailZeros64 PROC
;;;2036   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
;;;2037   CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
0002dc  e92d47f0          PUSH     {r4-r10,lr}
;;;2038   {
0002e0  4604              MOV      r4,r0
0002e2  460d              MOV      r5,r1
;;;2039   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;2040           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
;;;2041       CPU_INT64U  val_bit_mask;
;;;2042       CPU_DATA    nbr_lead_zeros;
;;;2043   #endif
;;;2044       CPU_DATA    nbr_trail_zeros;
;;;2045   
;;;2046   
;;;2047       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
0002e4  f04f0100          MOV      r1,#0
0002e8  ea840001          EOR      r0,r4,r1
0002ec  ea850101          EOR      r1,r5,r1
0002f0  4308              ORRS     r0,r0,r1
0002f2  d102              BNE      |L1.762|
;;;2048           return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
0002f4  2040              MOVS     r0,#0x40
                  |L1.758|
;;;2049       }
;;;2050   
;;;2051                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;2052   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;2053        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
;;;2054       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;2055   
;;;2056   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;2057       val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;2058       nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;2059                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;2060       nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;2061   #endif
;;;2062   
;;;2063   
;;;2064       return (nbr_trail_zeros);
;;;2065   }
0002f6  e8bd87f0          POP      {r4-r10,pc}
                  |L1.762|
0002fa  43e2              MVNS     r2,r4                 ;2057
0002fc  43e8              MVNS     r0,r5                 ;2057
0002fe  1c52              ADDS     r2,r2,#1              ;2057
000300  f1400100          ADC      r1,r0,#0              ;2057
000304  ea020604          AND      r6,r2,r4              ;2057
000308  ea010705          AND      r7,r1,r5              ;2057
00030c  4630              MOV      r0,r6                 ;2058
00030e  4639              MOV      r1,r7                 ;2058
000310  f7fffffe          BL       CPU_CntLeadZeros64
000314  4680              MOV      r8,r0                 ;2058
000316  f1c8093f          RSB      r9,r8,#0x3f           ;2060
00031a  4648              MOV      r0,r9                 ;2064
00031c  e7eb              B        |L1.758|
;;;2066   #endif
                          ENDP

00031e  0000              DCW      0x0000
                  |L1.800|
                          DCD      CPU_Name
                  |L1.804|
                          DCD      CPU_TS_TmrFreq_Hz
                  |L1.808|
                          DCD      CPU_CntLeadZerosTbl

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  CPU_Name
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  CPU_CntLeadZerosTbl
000000  08070606          DCB      0x08,0x07,0x06,0x06
000004  05050505          DCB      0x05,0x05,0x05,0x05
000008  04040404          DCB      0x04,0x04,0x04,0x04
00000c  04040404          DCB      0x04,0x04,0x04,0x04
000010  03030303          DCB      0x03,0x03,0x03,0x03
000014  03030303          DCB      0x03,0x03,0x03,0x03
000018  03030303          DCB      0x03,0x03,0x03,0x03
00001c  03030303          DCB      0x03,0x03,0x03,0x03
000020  02020202          DCB      0x02,0x02,0x02,0x02
000024  02020202          DCB      0x02,0x02,0x02,0x02
000028  02020202          DCB      0x02,0x02,0x02,0x02
00002c  02020202          DCB      0x02,0x02,0x02,0x02
000030  02020202          DCB      0x02,0x02,0x02,0x02
000034  02020202          DCB      0x02,0x02,0x02,0x02
000038  02020202          DCB      0x02,0x02,0x02,0x02
00003c  02020202          DCB      0x02,0x02,0x02,0x02
000040  01010101          DCB      0x01,0x01,0x01,0x01
000044  01010101          DCB      0x01,0x01,0x01,0x01
000048  01010101          DCB      0x01,0x01,0x01,0x01
00004c  01010101          DCB      0x01,0x01,0x01,0x01
000050  01010101          DCB      0x01,0x01,0x01,0x01
000054  01010101          DCB      0x01,0x01,0x01,0x01
000058  01010101          DCB      0x01,0x01,0x01,0x01
00005c  01010101          DCB      0x01,0x01,0x01,0x01
000060  01010101          DCB      0x01,0x01,0x01,0x01
000064  01010101          DCB      0x01,0x01,0x01,0x01
000068  01010101          DCB      0x01,0x01,0x01,0x01
00006c  01010101          DCB      0x01,0x01,0x01,0x01
000070  01010101          DCB      0x01,0x01,0x01,0x01
000074  01010101          DCB      0x01,0x01,0x01,0x01
000078  01010101          DCB      0x01,0x01,0x01,0x01
00007c  01010101          DCB      0x01,0x01,0x01,0x01
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  CPU_TS_TmrFreq_Hz
                          DCD      0x00000000
