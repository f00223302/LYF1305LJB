; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_cryp_tdes.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_cryp_tdes.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_cryp_tdes.crf ..\BSP\STM32F2xx\src\stm32f2xx_cryp_tdes.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;95       */
;;;96     ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;97                               uint32_t Ilength, uint8_t *Output)
;;;98     {
000004  b08d              SUB      sp,sp,#0x34
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
;;;99       CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;100      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;101      __IO uint32_t counter = 0;
00000c  f04f0000          MOV      r0,#0
000010  9002              STR      r0,[sp,#8]
;;;102      uint32_t busystatus = 0;
000012  4682              MOV      r10,r0
;;;103      ErrorStatus status = SUCCESS;
000014  f04f0001          MOV      r0,#1
000018  9001              STR      r0,[sp,#4]
;;;104      uint32_t keyaddr    = (uint32_t)Key;
00001a  4644              MOV      r4,r8
;;;105      uint32_t inputaddr  = (uint32_t)Input;
00001c  464d              MOV      r5,r9
;;;106      uint32_t outputaddr = (uint32_t)Output;
00001e  9e1a              LDR      r6,[sp,#0x68]
;;;107      uint32_t i = 0;
000020  f04f0b00          MOV      r11,#0
;;;108    
;;;109      /* Crypto structures initialisation*/
;;;110      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000024  a803              ADD      r0,sp,#0xc
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;111    
;;;112      /* Crypto Init for Encryption process */
;;;113      if(Mode == MODE_ENCRYPT) /* TDES encryption */
00002a  2f01              CMP      r7,#1
00002c  d104              BNE      |L1.56|
;;;114      {
;;;115         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
00002e  f04f0000          MOV      r0,#0
000032  f8ad002c          STRH     r0,[sp,#0x2c]
000036  e003              B        |L1.64|
                  |L1.56|
;;;116      }
;;;117      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;118      {
;;;119         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000038  f04f0004          MOV      r0,#4
00003c  f8ad002c          STRH     r0,[sp,#0x2c]
                  |L1.64|
;;;120      }
;;;121    
;;;122      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
000040  f04f0000          MOV      r0,#0
000044  f8ad002e          STRH     r0,[sp,#0x2e]
;;;123      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000048  f04f0080          MOV      r0,#0x80
00004c  f8ad0030          STRH     r0,[sp,#0x30]
;;;124      CRYP_Init(&TDES_CRYP_InitStructure);
000050  a80b              ADD      r0,sp,#0x2c
000052  f7fffffe          BL       CRYP_Init
;;;125    
;;;126      /* Key Initialisation */
;;;127      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000056  6820              LDR      r0,[r4,#0]
000058  ba00              REV      r0,r0
00005a  9005              STR      r0,[sp,#0x14]
;;;128      keyaddr+=4;
00005c  f1040404          ADD      r4,r4,#4
;;;129      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000060  6820              LDR      r0,[r4,#0]
000062  ba00              REV      r0,r0
000064  9006              STR      r0,[sp,#0x18]
;;;130      keyaddr+=4;
000066  f1040404          ADD      r4,r4,#4
;;;131      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00006a  6820              LDR      r0,[r4,#0]
00006c  ba00              REV      r0,r0
00006e  9007              STR      r0,[sp,#0x1c]
;;;132      keyaddr+=4;
000070  f1040404          ADD      r4,r4,#4
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000074  6820              LDR      r0,[r4,#0]
000076  ba00              REV      r0,r0
000078  9008              STR      r0,[sp,#0x20]
;;;134      keyaddr+=4;
00007a  f1040404          ADD      r4,r4,#4
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00007e  6820              LDR      r0,[r4,#0]
000080  ba00              REV      r0,r0
000082  9009              STR      r0,[sp,#0x24]
;;;136      keyaddr+=4;
000084  f1040404          ADD      r4,r4,#4
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  ba00              REV      r0,r0
00008c  900a              STR      r0,[sp,#0x28]
;;;138      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00008e  a803              ADD      r0,sp,#0xc
000090  f7fffffe          BL       CRYP_KeyInit
;;;139    
;;;140      /* Flush IN/OUT FIFO */
;;;141      CRYP_FIFOFlush();
000094  f7fffffe          BL       CRYP_FIFOFlush
;;;142    
;;;143      /* Enable Crypto processor */
;;;144      CRYP_Cmd(ENABLE);
000098  2001              MOVS     r0,#1
00009a  f7fffffe          BL       CRYP_Cmd
;;;145    
;;;146      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
00009e  f04f0b00          MOV      r11,#0
0000a2  e02f              B        |L1.260|
                  |L1.164|
;;;147      {
;;;148        /* Write the Input block in the Input FIFO */
;;;149        CRYP_DataIn(*(uint32_t*)(inputaddr));
0000a4  6828              LDR      r0,[r5,#0]
0000a6  f7fffffe          BL       CRYP_DataIn
;;;150        inputaddr+=4;
0000aa  f1050504          ADD      r5,r5,#4
;;;151        CRYP_DataIn(*(uint32_t*)(inputaddr));
0000ae  6828              LDR      r0,[r5,#0]
0000b0  f7fffffe          BL       CRYP_DataIn
;;;152        inputaddr+=4;
0000b4  f1050504          ADD      r5,r5,#4
;;;153    
;;;154        /* Wait until the complete message has been processed */
;;;155        counter = 0;
0000b8  f04f0000          MOV      r0,#0
0000bc  9002              STR      r0,[sp,#8]
;;;156        do
0000be  bf00              NOP      
                  |L1.192|
;;;157        {
;;;158          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0000c0  2010              MOVS     r0,#0x10
0000c2  f7fffffe          BL       CRYP_GetFlagStatus
0000c6  4682              MOV      r10,r0
;;;159          counter++;
0000c8  9802              LDR      r0,[sp,#8]
0000ca  f1000001          ADD      r0,r0,#1
0000ce  9002              STR      r0,[sp,#8]
;;;160        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
0000d0  9802              LDR      r0,[sp,#8]
0000d2  f5b03f80          CMP      r0,#0x10000
0000d6  d002              BEQ      |L1.222|
0000d8  f1ba0f00          CMP      r10,#0
0000dc  d1f0              BNE      |L1.192|
                  |L1.222|
;;;161    
;;;162        if (busystatus != RESET)
0000de  f1ba0f00          CMP      r10,#0
0000e2  d003              BEQ      |L1.236|
;;;163        {
;;;164           status = ERROR;
0000e4  f04f0000          MOV      r0,#0
0000e8  9001              STR      r0,[sp,#4]
0000ea  e009              B        |L1.256|
                  |L1.236|
;;;165        }
;;;166        else
;;;167        {
;;;168    
;;;169          /* Read the Output block from the Output FIFO */
;;;170          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000ec  f7fffffe          BL       CRYP_DataOut
0000f0  6030              STR      r0,[r6,#0]
;;;171          outputaddr+=4;
0000f2  f1060604          ADD      r6,r6,#4
;;;172          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000f6  f7fffffe          BL       CRYP_DataOut
0000fa  6030              STR      r0,[r6,#0]
;;;173          outputaddr+=4;
0000fc  f1060604          ADD      r6,r6,#4
                  |L1.256|
000100  f10b0b08          ADD      r11,r11,#8            ;146
                  |L1.260|
000104  9810              LDR      r0,[sp,#0x40]         ;146
000106  4583              CMP      r11,r0                ;146
000108  d202              BCS      |L1.272|
00010a  9801              LDR      r0,[sp,#4]            ;146
00010c  2800              CMP      r0,#0                 ;146
00010e  d1c9              BNE      |L1.164|
                  |L1.272|
;;;174        }
;;;175      }
;;;176    
;;;177      /* Disable Crypto */
;;;178      CRYP_Cmd(DISABLE);
000110  2000              MOVS     r0,#0
000112  f7fffffe          BL       CRYP_Cmd
;;;179    
;;;180      return status; 
000116  9801              LDR      r0,[sp,#4]
;;;181    }
000118  b011              ADD      sp,sp,#0x44
00011a  e8bd8ff0          POP      {r4-r11,pc}
;;;182    
                          ENDP

                  CRYP_TDES_CBC PROC
;;;197      */
;;;198    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
00011e  e92d4ff0          PUSH     {r4-r11,lr}
;;;199                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;200    {
000122  b093              SUB      sp,sp,#0x4c
000124  4680              MOV      r8,r0
000126  4689              MOV      r9,r1
000128  4692              MOV      r10,r2
00012a  469b              MOV      r11,r3
;;;201      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;202      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;203      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;204      __IO uint32_t counter = 0;
00012c  f04f0000          MOV      r0,#0
000130  9004              STR      r0,[sp,#0x10]
;;;205      uint32_t busystatus = 0;
000132  9003              STR      r0,[sp,#0xc]
;;;206      ErrorStatus status = SUCCESS;
000134  f04f0001          MOV      r0,#1
000138  9002              STR      r0,[sp,#8]
;;;207      uint32_t keyaddr    = (uint32_t)Key;
00013a  464c              MOV      r4,r9
;;;208      uint32_t inputaddr  = (uint32_t)Input;
00013c  465d              MOV      r5,r11
;;;209      uint32_t outputaddr = (uint32_t)Output;
00013e  9e1d              LDR      r6,[sp,#0x74]
;;;210      uint32_t ivaddr     = (uint32_t)InitVectors;
000140  4657              MOV      r7,r10
;;;211      uint32_t i = 0;
000142  f04f0000          MOV      r0,#0
000146  9001              STR      r0,[sp,#4]
;;;212    
;;;213      /* Crypto structures initialisation*/
;;;214      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000148  a809              ADD      r0,sp,#0x24
00014a  f7fffffe          BL       CRYP_KeyStructInit
;;;215    
;;;216      /* Crypto Init for Encryption process */
;;;217      if(Mode == MODE_ENCRYPT) /* TDES encryption */
00014e  f1b80f01          CMP      r8,#1
000152  d104              BNE      |L1.350|
;;;218      {
;;;219        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
000154  f04f0000          MOV      r0,#0
000158  f8ad0044          STRH     r0,[sp,#0x44]
00015c  e003              B        |L1.358|
                  |L1.350|
;;;220      }
;;;221      else
;;;222      {
;;;223        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00015e  f04f0004          MOV      r0,#4
000162  f8ad0044          STRH     r0,[sp,#0x44]
                  |L1.358|
;;;224      }
;;;225      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
000166  f04f0008          MOV      r0,#8
00016a  f8ad0046          STRH     r0,[sp,#0x46]
;;;226      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00016e  f04f0080          MOV      r0,#0x80
000172  f8ad0048          STRH     r0,[sp,#0x48]
;;;227    
;;;228      CRYP_Init(&TDES_CRYP_InitStructure);
000176  a811              ADD      r0,sp,#0x44
000178  f7fffffe          BL       CRYP_Init
;;;229    
;;;230      /* Key Initialisation */
;;;231      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00017c  6820              LDR      r0,[r4,#0]
00017e  ba00              REV      r0,r0
000180  900b              STR      r0,[sp,#0x2c]
;;;232      keyaddr+=4;
000182  f1040404          ADD      r4,r4,#4
;;;233      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000186  6820              LDR      r0,[r4,#0]
000188  ba00              REV      r0,r0
00018a  900c              STR      r0,[sp,#0x30]
;;;234      keyaddr+=4;
00018c  f1040404          ADD      r4,r4,#4
;;;235      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000190  6820              LDR      r0,[r4,#0]
000192  ba00              REV      r0,r0
000194  900d              STR      r0,[sp,#0x34]
;;;236      keyaddr+=4;
000196  f1040404          ADD      r4,r4,#4
;;;237      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00019a  6820              LDR      r0,[r4,#0]
00019c  ba00              REV      r0,r0
00019e  900e              STR      r0,[sp,#0x38]
;;;238      keyaddr+=4;
0001a0  f1040404          ADD      r4,r4,#4
;;;239      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0001a4  6820              LDR      r0,[r4,#0]
0001a6  ba00              REV      r0,r0
0001a8  900f              STR      r0,[sp,#0x3c]
;;;240      keyaddr+=4;
0001aa  f1040404          ADD      r4,r4,#4
;;;241      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0001ae  6820              LDR      r0,[r4,#0]
0001b0  ba00              REV      r0,r0
0001b2  9010              STR      r0,[sp,#0x40]
;;;242      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
0001b4  a809              ADD      r0,sp,#0x24
0001b6  f7fffffe          BL       CRYP_KeyInit
;;;243    
;;;244      /* Initialization Vectors */
;;;245      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0001ba  6838              LDR      r0,[r7,#0]
0001bc  ba00              REV      r0,r0
0001be  9005              STR      r0,[sp,#0x14]
;;;246      ivaddr+=4;
0001c0  f1070704          ADD      r7,r7,#4
;;;247      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0001c4  6838              LDR      r0,[r7,#0]
0001c6  ba00              REV      r0,r0
0001c8  9006              STR      r0,[sp,#0x18]
;;;248      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
0001ca  a805              ADD      r0,sp,#0x14
0001cc  f7fffffe          BL       CRYP_IVInit
;;;249    
;;;250      /* Flush IN/OUT FIFO */
;;;251      CRYP_FIFOFlush();
0001d0  f7fffffe          BL       CRYP_FIFOFlush
;;;252    
;;;253      /* Enable Crypto processor */
;;;254      CRYP_Cmd(ENABLE);
0001d4  2001              MOVS     r0,#1
0001d6  f7fffffe          BL       CRYP_Cmd
;;;255    
;;;256      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
0001da  f04f0000          MOV      r0,#0
0001de  9001              STR      r0,[sp,#4]
0001e0  e030              B        |L1.580|
                  |L1.482|
;;;257      {
;;;258        /* Write the Input block in the Input FIFO */
;;;259        CRYP_DataIn(*(uint32_t*)(inputaddr));
0001e2  6828              LDR      r0,[r5,#0]
0001e4  f7fffffe          BL       CRYP_DataIn
;;;260        inputaddr+=4;
0001e8  f1050504          ADD      r5,r5,#4
;;;261        CRYP_DataIn(*(uint32_t*)(inputaddr));
0001ec  6828              LDR      r0,[r5,#0]
0001ee  f7fffffe          BL       CRYP_DataIn
;;;262        inputaddr+=4;
0001f2  f1050504          ADD      r5,r5,#4
;;;263    
;;;264        /* Wait until the complete message has been processed */
;;;265        counter = 0;
0001f6  f04f0000          MOV      r0,#0
0001fa  9004              STR      r0,[sp,#0x10]
;;;266        do
0001fc  bf00              NOP      
                  |L1.510|
;;;267        {
;;;268          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0001fe  2010              MOVS     r0,#0x10
000200  f7fffffe          BL       CRYP_GetFlagStatus
000204  9003              STR      r0,[sp,#0xc]
;;;269          counter++;
000206  9804              LDR      r0,[sp,#0x10]
000208  f1000001          ADD      r0,r0,#1
00020c  9004              STR      r0,[sp,#0x10]
;;;270        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
00020e  9804              LDR      r0,[sp,#0x10]
000210  f5b03f80          CMP      r0,#0x10000
000214  d002              BEQ      |L1.540|
000216  9803              LDR      r0,[sp,#0xc]
000218  2800              CMP      r0,#0
00021a  d1f0              BNE      |L1.510|
                  |L1.540|
;;;271    
;;;272        if (busystatus != RESET)
00021c  9803              LDR      r0,[sp,#0xc]
00021e  b118              CBZ      r0,|L1.552|
;;;273       {
;;;274           status = ERROR;
000220  f04f0000          MOV      r0,#0
000224  9002              STR      r0,[sp,#8]
000226  e009              B        |L1.572|
                  |L1.552|
;;;275        }
;;;276        else
;;;277        {
;;;278    
;;;279          /* Read the Output block from the Output FIFO */
;;;280          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000228  f7fffffe          BL       CRYP_DataOut
00022c  6030              STR      r0,[r6,#0]
;;;281          outputaddr+=4;
00022e  f1060604          ADD      r6,r6,#4
;;;282          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000232  f7fffffe          BL       CRYP_DataOut
000236  6030              STR      r0,[r6,#0]
;;;283          outputaddr+=4;
000238  f1060604          ADD      r6,r6,#4
                  |L1.572|
00023c  9801              LDR      r0,[sp,#4]            ;256
00023e  f1000008          ADD      r0,r0,#8              ;256
000242  9001              STR      r0,[sp,#4]            ;256
                  |L1.580|
000244  991c              LDR      r1,[sp,#0x70]         ;256
000246  9801              LDR      r0,[sp,#4]            ;256
000248  4288              CMP      r0,r1                 ;256
00024a  d202              BCS      |L1.594|
00024c  9802              LDR      r0,[sp,#8]            ;256
00024e  2800              CMP      r0,#0                 ;256
000250  d1c7              BNE      |L1.482|
                  |L1.594|
;;;284        }
;;;285      }
;;;286    
;;;287      /* Disable Crypto */
;;;288      CRYP_Cmd(DISABLE);
000252  2000              MOVS     r0,#0
000254  f7fffffe          BL       CRYP_Cmd
;;;289    
;;;290      return status; 
000258  9802              LDR      r0,[sp,#8]
;;;291    }
00025a  b013              ADD      sp,sp,#0x4c
00025c  e8bd8ff0          POP      {r4-r11,pc}
;;;292    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_cryp_tdes.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 130
|__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
