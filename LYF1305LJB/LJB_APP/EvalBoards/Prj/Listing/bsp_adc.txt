; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\bsp_adc.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\bsp_adc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\bsp_adc.crf ..\BSP\bsp_ADC.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BSP_ADC1_DMA_ISRHandler PROC
;;;315    #if (ADC_DMA_USE_INTERRUPT)
;;;316    void BSP_ADC1_DMA_ISRHandler(void)
000000  b510              PUSH     {r4,lr}
;;;317    {
;;;318    	CPU_REG32  status;
;;;319    
;;;320    	status = DMA2->LISR;
000002  486d              LDR      r0,|L1.440|
000004  6804              LDR      r4,[r0,#0]
;;;321    
;;;322    	///DMA 传送完成
;;;323    	if (DEF_BIT_IS_SET(status, DEF_BIT_05))
000006  f3c41040          UBFX     r0,r4,#5,#1
00000a  b120              CBZ      r0,|L1.22|
;;;324    	{
;;;325    
;;;326    		DMA_ClearITPendingBit(ADC1_DMA_STREAM, ADC1_DMA_IT_TCIF);
00000c  496b              LDR      r1,|L1.444|
00000e  486a              LDR      r0,|L1.440|
000010  3010              ADDS     r0,r0,#0x10
000012  f7fffffe          BL       DMA_ClearITPendingBit
                  |L1.22|
;;;327    #if (ADC_DEBUG_ENABLE)
;;;328    		_AdcFlag++;
;;;329    #endif
;;;330    		
;;;331    	}
;;;332    
;;;333    	///DMA 传送错误
;;;334    	if (DEF_BIT_IS_SET(status, DEF_BIT_03))
000016  f3c400c0          UBFX     r0,r4,#3,#1
00001a  b120              CBZ      r0,|L1.38|
;;;335    		DMA_ClearITPendingBit(ADC1_DMA_STREAM, DMA_IT_TEIF0);	
00001c  4968              LDR      r1,|L1.448|
00001e  4866              LDR      r0,|L1.440|
000020  3010              ADDS     r0,r0,#0x10
000022  f7fffffe          BL       DMA_ClearITPendingBit
                  |L1.38|
;;;336    
;;;337    	///DMA FIFO 错误
;;;338    	if (DEF_BIT_IS_SET(status, DEF_BIT_00))
000026  f0140f01          TST      r4,#1
00002a  d004              BEQ      |L1.54|
;;;339    		DMA_ClearITPendingBit(ADC1_DMA_STREAM, DMA_IT_FEIF0);	
00002c  4965              LDR      r1,|L1.452|
00002e  4862              LDR      r0,|L1.440|
000030  3010              ADDS     r0,r0,#0x10
000032  f7fffffe          BL       DMA_ClearITPendingBit
                  |L1.54|
;;;340    }
000036  bd10              POP      {r4,pc}
;;;341    #endif
                          ENDP

                  ADC1_Config PROC
;;;237      */
;;;238    void ADC1_Config(void)
000038  b510              PUSH     {r4,lr}
;;;239    {
00003a  b086              SUB      sp,sp,#0x18
;;;240    	uint8_t i;
;;;241      	ADC_InitTypeDef ADC_InitStructure;
;;;242    
;;;243      	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
00003c  f04f0000          MOV      r0,#0
000040  9000              STR      r0,[sp,#0]
;;;244      	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
000042  f04f0001          MOV      r0,#1
000046  f88d0004          STRB     r0,[sp,#4]
;;;245      	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
00004a  f04f0000          MOV      r0,#0
00004e  f88d0005          STRB     r0,[sp,#5]
;;;246      	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
000052  9002              STR      r0,[sp,#8]
;;;247      	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
000054  9004              STR      r0,[sp,#0x10]
;;;248      	ADC_InitStructure.ADC_NbrOfConversion = ADC_SAMPLE_NBR;
000056  f04f0005          MOV      r0,#5
00005a  f88d0014          STRB     r0,[sp,#0x14]
;;;249    
;;;250      	ADC_Init(ADC1, &ADC_InitStructure);
00005e  4669              MOV      r1,sp
000060  4859              LDR      r0,|L1.456|
000062  f7fffffe          BL       ADC_Init
;;;251    
;;;252      	/* ADC1 regular channels configuration */ 
;;;253    	for (i = 0; i < ADC_SAMPLE_NBR; i++)
000066  f04f0400          MOV      r4,#0
00006a  e00a              B        |L1.130|
                  |L1.108|
;;;254    	{
;;;255    		ADC_RegularChannelConfig(ADC1, ADC1_Channels[i], i + 1, ADC_SampleTime_144Cycles);
00006c  4857              LDR      r0,|L1.460|
00006e  5d01              LDRB     r1,[r0,r4]
000070  2306              MOVS     r3,#6
000072  1c60              ADDS     r0,r4,#1
000074  b2c2              UXTB     r2,r0
000076  4854              LDR      r0,|L1.456|
000078  f7fffffe          BL       ADC_RegularChannelConfig
00007c  f1040001          ADD      r0,r4,#1              ;253
000080  b2c4              UXTB     r4,r0                 ;253
                  |L1.130|
000082  2c05              CMP      r4,#5                 ;253
000084  dbf2              BLT      |L1.108|
;;;256    	}   	
;;;257    }
000086  b006              ADD      sp,sp,#0x18
000088  bd10              POP      {r4,pc}
;;;258    
                          ENDP

                  ADC_DMAConfig PROC
;;;264      */
;;;265    void ADC_DMAConfig(uint16_t *ResBuf)
00008a  b510              PUSH     {r4,lr}
;;;266    {
00008c  b090              SUB      sp,sp,#0x40
00008e  4604              MOV      r4,r0
;;;267      	DMA_InitTypeDef DMA_InitStructure;
;;;268    
;;;269      	///ADC1 : DMA2 Channel 0, stream 0
;;;270      	DMA_InitStructure.DMA_Channel = DMA_Channel_0; 
000090  f04f0000          MOV      r0,#0
000094  9001              STR      r0,[sp,#4]
;;;271      	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&(ResBuf[0]);
000096  9403              STR      r4,[sp,#0xc]
;;;272      	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC_DATA_ADDR;
000098  484d              LDR      r0,|L1.464|
00009a  9002              STR      r0,[sp,#8]
;;;273      	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
00009c  f04f0000          MOV      r0,#0
0000a0  9004              STR      r0,[sp,#0x10]
;;;274      	DMA_InitStructure.DMA_BufferSize = TOTAL_ADC_DMA_NBR;//0;///此处必须是所有ADC总的数据缓冲区大小，不光是ADC1的。
0000a2  f04f0005          MOV      r0,#5
0000a6  9005              STR      r0,[sp,#0x14]
;;;275      	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
0000a8  f04f0000          MOV      r0,#0
0000ac  9006              STR      r0,[sp,#0x18]
;;;276      	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000ae  f44f6080          MOV      r0,#0x400
0000b2  9007              STR      r0,[sp,#0x1c]
;;;277      	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
0000b4  f44f6000          MOV      r0,#0x800
0000b8  9008              STR      r0,[sp,#0x20]
;;;278      	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
0000ba  f44f5000          MOV      r0,#0x2000
0000be  9009              STR      r0,[sp,#0x24]
;;;279    
;;;280    	///circular 方式下，数据长度会重新加载，但地址是否重新加载？需要确认
;;;281      	///DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
;;;282    	///Normal 方式下，数据长度每次需要设置，地址似乎自动保持：
;;;283    	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
0000c0  f04f0000          MOV      r0,#0
0000c4  900a              STR      r0,[sp,#0x28]
;;;284      	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
0000c6  f44f3000          MOV      r0,#0x20000
0000ca  900b              STR      r0,[sp,#0x2c]
;;;285      	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;        
0000cc  f04f0000          MOV      r0,#0
0000d0  900c              STR      r0,[sp,#0x30]
;;;286      	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
0000d2  f04f0001          MOV      r0,#1
0000d6  900d              STR      r0,[sp,#0x34]
;;;287      	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
0000d8  f04f0000          MOV      r0,#0
0000dc  900e              STR      r0,[sp,#0x38]
;;;288      	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
0000de  900f              STR      r0,[sp,#0x3c]
;;;289    
;;;290      	DMA_Init(ADC1_DMA_STREAM, &DMA_InitStructure);
0000e0  a901              ADD      r1,sp,#4
0000e2  483c              LDR      r0,|L1.468|
0000e4  f7fffffe          BL       DMA_Init
;;;291      	
;;;292    	/* Enable ADC1 DMA since ADC1 is the Master*/
;;;293      	ADC_DMACmd(ADC1, ENABLE); 
0000e8  2101              MOVS     r1,#1
0000ea  4837              LDR      r0,|L1.456|
0000ec  f7fffffe          BL       ADC_DMACmd
;;;294    }
0000f0  b010              ADD      sp,sp,#0x40
0000f2  bd10              POP      {r4,pc}
;;;295    
                          ENDP

                  ADC_GPIOConfig PROC
;;;300      */
;;;301    void ADC_GPIOConfig(void)
0000f4  b51c              PUSH     {r2-r4,lr}
;;;302    {
;;;303      	GPIO_InitTypeDef GPIO_InitStructure;
;;;304    
;;;305    	/* PC0-4: ADC */
;;;306    	
;;;307    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;
0000f6  f04f001f          MOV      r0,#0x1f
0000fa  9000              STR      r0,[sp,#0]
;;;308    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
0000fc  f04f0003          MOV      r0,#3
000100  f88d0004          STRB     r0,[sp,#4]
;;;309    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
000104  f04f0000          MOV      r0,#0
000108  f88d0007          STRB     r0,[sp,#7]
;;;310    
;;;311    	GPIO_Init(GPIOC, &GPIO_InitStructure);	
00010c  4669              MOV      r1,sp
00010e  4832              LDR      r0,|L1.472|
000110  f7fffffe          BL       GPIO_Init
;;;312    }
000114  bd1c              POP      {r2-r4,pc}
;;;313    
                          ENDP

                  BSP_ADC_Init PROC
;;;126      */
;;;127    void BSP_ADC_Init(uint16_t *ResBuf)
000116  b51f              PUSH     {r0-r4,lr}
;;;128    {
000118  4604              MOV      r4,r0
;;;129    	ADC_CommonInitTypeDef ADC_CommonInitStructure;
;;;130      
;;;131    	/* Enable peripheral clocks *************************************************/
;;;132    	
;;;133    	RCC_AHB1PeriphClockCmd(ADC_DMA_CLK | ADC_CH_CLK, ENABLE); 
00011a  f04f0101          MOV      r1,#1
00011e  482f              LDR      r0,|L1.476|
000120  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;134    
;;;135    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
000124  2101              MOVS     r1,#1
000126  0208              LSLS     r0,r1,#8
000128  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;136    
;;;137         
;;;138      	/* ADCs configuration ------------------------------------------------------*/
;;;139      	/* Configure ADC Channels as analog input */
;;;140    	
;;;141      	ADC_GPIOConfig();
00012c  f7fffffe          BL       ADC_GPIOConfig
;;;142    
;;;143      	/* DMA2 Stream0 channel0 configuration **************************************/
;;;144    	
;;;145      	ADC_DMAConfig(ResBuf);
000130  4620              MOV      r0,r4
000132  f7fffffe          BL       ADC_DMAConfig
;;;146    
;;;147      	/* ADC Common Init */
;;;148      	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
000136  f04f0000          MOV      r0,#0
00013a  9000              STR      r0,[sp,#0]
;;;149      	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
00013c  9001              STR      r0,[sp,#4]
;;;150      	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
00013e  9002              STR      r0,[sp,#8]
;;;151    	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_15Cycles;
000140  f44f6020          MOV      r0,#0xa00
000144  9003              STR      r0,[sp,#0xc]
;;;152    	
;;;153    	ADC_CommonInit(&ADC_CommonInitStructure);
000146  4668              MOV      r0,sp
000148  f7fffffe          BL       ADC_CommonInit
;;;154    	
;;;155      	/* ADC1 regular channels configuration */
;;;156      	ADC1_Config();
00014c  f7fffffe          BL       ADC1_Config
;;;157    
;;;158    #if (ADC_USE_INTERRUPT)
;;;159    	///允许中断
;;;160      	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
;;;161    	///ADC 中断设置
;;;162    	BSP_IntVectSet(BSP_INT_ID_ADC1_2, BSP_ADC1_ISRHandler);
;;;163        BSP_IntEn(BSP_INT_ID_ADC1_2);
;;;164    #endif///ADC_USE_INTERRUPT
;;;165    
;;;166    #if (ADC_DMA_USE_INTERRUPT)
;;;167    	///允许DMA中断
;;;168    	DMA_ITConfig(ADC1_DMA_STREAM, DMA_IT_TC, ENABLE);
000150  2201              MOVS     r2,#1
000152  2110              MOVS     r1,#0x10
000154  481f              LDR      r0,|L1.468|
000156  f7fffffe          BL       DMA_ITConfig
;;;169    	DMA_ClearFlag(ADC1_DMA_STREAM, ADC1_DMA_FLAG_TCIF);
00015a  4921              LDR      r1,|L1.480|
00015c  481d              LDR      r0,|L1.468|
00015e  f7fffffe          BL       DMA_ClearFlag
;;;170    	///DMA中断设置
;;;171    	BSP_IntVectSet(ADC1_DMA_INT_ID, BSP_ADC1_DMA_ISRHandler);
000162  f2af1163          ADR      r1,BSP_ADC1_DMA_ISRHandler + 1
000166  2038              MOVS     r0,#0x38
000168  f7fffffe          BL       BSP_IntVectSet
;;;172        BSP_IntEn(ADC1_DMA_INT_ID);
00016c  2038              MOVS     r0,#0x38
00016e  f7fffffe          BL       BSP_IntEn
;;;173    #endif
;;;174    	
;;;175      	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);	
000172  2101              MOVS     r1,#1
000174  4814              LDR      r0,|L1.456|
000176  f7fffffe          BL       ADC_DMARequestAfterLastTransferCmd
;;;176    
;;;177    	/* Enable ADC1 */
;;;178      	ADC_Cmd(ADC1, ENABLE);
00017a  2101              MOVS     r1,#1
00017c  4812              LDR      r0,|L1.456|
00017e  f7fffffe          BL       ADC_Cmd
;;;179    
;;;180    	///此处不能打开 DMA stream：
;;;181    	/* Disable ADC1 DMA stream since ADC1 is the Master*/
;;;182      	DMA_Cmd(ADC1_DMA_STREAM, DISABLE); 
000182  2100              MOVS     r1,#0
000184  4813              LDR      r0,|L1.468|
000186  f7fffffe          BL       DMA_Cmd
;;;183    }
00018a  bd1f              POP      {r0-r4,pc}
;;;184    
                          ENDP

                  BSP_ADC_Start PROC
;;;186    ///该函数可在定时中断中调用
;;;187    void BSP_ADC_Start(void)
00018c  b510              PUSH     {r4,lr}
;;;188    {
;;;189    
;;;190    	if (!(BSP_Info.Error & BSP_ERROR_ADC_BUF_EMPTY))
00018e  4815              LDR      r0,|L1.484|
000190  6800              LDR      r0,[r0,#0]  ; BSP_Info
000192  f0100f01          TST      r0,#1
000196  d10e              BNE      |L1.438|
;;;191    	{
;;;192    	
;;;193    #if (ADC_DEBUG_ENABLE)		
;;;194    		_TotCnt++;
;;;195    #endif
;;;196    
;;;197    		///重新写入 DMA 传输数量：必须确认当前 DMA 已经完成
;;;198    		if (DMA_GetCmdStatus(ADC1_DMA_STREAM) == DISABLE)
000198  480e              LDR      r0,|L1.468|
00019a  f7fffffe          BL       DMA_GetCmdStatus
00019e  b950              CBNZ     r0,|L1.438|
;;;199    		{
;;;200    
;;;201    #if (ADC_DEBUG_ENABLE)		
;;;202    
;;;203    			if (_AdcFlag != 1)
;;;204    				_AdcErrCnt++;
;;;205    			_AdcFlag = 0;
;;;206    
;;;207    #endif
;;;208    			
;;;209    			///设置 DMA 长度并启动 DMA 发送
;;;210    			DMA_SetCurrDataCounter(ADC1_DMA_STREAM, TOTAL_ADC_DMA_NBR);
0001a0  2105              MOVS     r1,#5
0001a2  480c              LDR      r0,|L1.468|
0001a4  f7fffffe          BL       DMA_SetCurrDataCounter
;;;211    
;;;212    			/* Enable ADC1 DMA stream since ADC1 is the Master*/
;;;213      			DMA_Cmd(ADC1_DMA_STREAM, ENABLE); 
0001a8  2101              MOVS     r1,#1
0001aa  480a              LDR      r0,|L1.468|
0001ac  f7fffffe          BL       DMA_Cmd
;;;214    
;;;215    			/* Start ADC1 Software Conversion */
;;;216      			ADC_SoftwareStartConv(ADC1);
0001b0  4805              LDR      r0,|L1.456|
0001b2  f7fffffe          BL       ADC_SoftwareStartConv
                  |L1.438|
;;;217    		}
;;;218    
;;;219    #if (ADC_DEBUG_ENABLE)
;;;220    
;;;221    		else
;;;222    		{
;;;223    			///有错误发生：
;;;224    			_ErrCnt++;
;;;225    		}
;;;226    
;;;227    #endif
;;;228    	}
;;;229    }
0001b6  bd10              POP      {r4,pc}
;;;230    
                          ENDP

                  |L1.440|
                          DCD      0x40026400
                  |L1.444|
                          DCD      0x10008020
                  |L1.448|
                          DCD      0x10002008
                  |L1.452|
                          DCD      0x90000001
                  |L1.456|
                          DCD      0x40012000
                  |L1.460|
                          DCD      ADC1_Channels
                  |L1.464|
                          DCD      0x4001204c
                  |L1.468|
                          DCD      0x40026410
                  |L1.472|
                          DCD      0x40020800
                  |L1.476|
                          DCD      0x00400004
                  |L1.480|
                          DCD      0x10000020
                  |L1.484|
                          DCD      BSP_Info

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  ADC_GPIO_Pins
000000  001f              DCW      0x001f
                  ADC1_Channels
000002  0a0b              DCB      0x0a,0x0b
000004  0c0d0e            DCB      0x0c,0x0d,0x0e

                          AREA ||.data||, DATA, ALIGN=2

                  ADC_GPIO_PORT
                          DCD      0x40020800

;*** Start embedded assembler ***

#line 1 "..\\BSP\\bsp_ADC.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_ADC_c_75f4026d____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___9_bsp_ADC_c_75f4026d____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_bsp_ADC_c_75f4026d____REVSH|
#line 130
|__asm___9_bsp_ADC_c_75f4026d____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
