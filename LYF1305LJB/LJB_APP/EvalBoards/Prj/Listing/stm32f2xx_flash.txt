; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\stm32f2xx_flash.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\stm32f2xx_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\stm32f2xx_flash.crf ..\BSP\STM32F2xx\src\stm32f2xx_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;163      */
;;;164    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4af8              LDR      r2,|L1.996|
;;;165    {
;;;166      /* Check the parameters */
;;;167      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;168      
;;;169      /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
;;;170      *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
000002  7010              STRB     r0,[r2,#0]
;;;171    }
000004  4770              BX       lr
;;;172    
                          ENDP

                  FLASH_PrefetchBufferCmd PROC
;;;178      */
;;;179    void FLASH_PrefetchBufferCmd(FunctionalState NewState)
000006  b130              CBZ      r0,|L1.22|
;;;180    {
;;;181      /* Check the parameters */
;;;182      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;183      
;;;184      /* Enable or disable the Prefetch Buffer */
;;;185      if(NewState != DISABLE)
;;;186      {
;;;187        FLASH->ACR |= FLASH_ACR_PRFTEN;
000008  49f6              LDR      r1,|L1.996|
00000a  6809              LDR      r1,[r1,#0]
00000c  f4417180          ORR      r1,r1,#0x100
000010  4af4              LDR      r2,|L1.996|
000012  6011              STR      r1,[r2,#0]
000014  e005              B        |L1.34|
                  |L1.22|
;;;188      }
;;;189      else
;;;190      {
;;;191        FLASH->ACR &= (~FLASH_ACR_PRFTEN);
000016  49f3              LDR      r1,|L1.996|
000018  6809              LDR      r1,[r1,#0]
00001a  f4217180          BIC      r1,r1,#0x100
00001e  4af1              LDR      r2,|L1.996|
000020  6011              STR      r1,[r2,#0]
                  |L1.34|
;;;192      }
;;;193    }
000022  4770              BX       lr
;;;194    
                          ENDP

                  FLASH_InstructionCacheCmd PROC
;;;200      */
;;;201    void FLASH_InstructionCacheCmd(FunctionalState NewState)
000024  b130              CBZ      r0,|L1.52|
;;;202    {
;;;203      /* Check the parameters */
;;;204      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;205      
;;;206      if(NewState != DISABLE)
;;;207      {
;;;208        FLASH->ACR |= FLASH_ACR_ICEN;
000026  49ef              LDR      r1,|L1.996|
000028  6809              LDR      r1,[r1,#0]
00002a  f4417100          ORR      r1,r1,#0x200
00002e  4aed              LDR      r2,|L1.996|
000030  6011              STR      r1,[r2,#0]
000032  e005              B        |L1.64|
                  |L1.52|
;;;209      }
;;;210      else
;;;211      {
;;;212        FLASH->ACR &= (~FLASH_ACR_ICEN);
000034  49eb              LDR      r1,|L1.996|
000036  6809              LDR      r1,[r1,#0]
000038  f4217100          BIC      r1,r1,#0x200
00003c  4ae9              LDR      r2,|L1.996|
00003e  6011              STR      r1,[r2,#0]
                  |L1.64|
;;;213      }
;;;214    }
000040  4770              BX       lr
;;;215    
                          ENDP

                  FLASH_DataCacheCmd PROC
;;;221      */
;;;222    void FLASH_DataCacheCmd(FunctionalState NewState)
000042  b130              CBZ      r0,|L1.82|
;;;223    {
;;;224      /* Check the parameters */
;;;225      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;226      
;;;227      if(NewState != DISABLE)
;;;228      {
;;;229        FLASH->ACR |= FLASH_ACR_DCEN;
000044  49e7              LDR      r1,|L1.996|
000046  6809              LDR      r1,[r1,#0]
000048  f4416180          ORR      r1,r1,#0x400
00004c  4ae5              LDR      r2,|L1.996|
00004e  6011              STR      r1,[r2,#0]
000050  e005              B        |L1.94|
                  |L1.82|
;;;230      }
;;;231      else
;;;232      {
;;;233        FLASH->ACR &= (~FLASH_ACR_DCEN);
000052  49e4              LDR      r1,|L1.996|
000054  6809              LDR      r1,[r1,#0]
000056  f4216180          BIC      r1,r1,#0x400
00005a  4ae2              LDR      r2,|L1.996|
00005c  6011              STR      r1,[r2,#0]
                  |L1.94|
;;;234      }
;;;235    }
00005e  4770              BX       lr
;;;236    
                          ENDP

                  FLASH_InstructionCacheReset PROC
;;;242      */
;;;243    void FLASH_InstructionCacheReset(void)
000060  48e0              LDR      r0,|L1.996|
;;;244    {
;;;245      FLASH->ACR |= FLASH_ACR_ICRST;
000062  6800              LDR      r0,[r0,#0]
000064  f4406000          ORR      r0,r0,#0x800
000068  49de              LDR      r1,|L1.996|
00006a  6008              STR      r0,[r1,#0]
;;;246    }
00006c  4770              BX       lr
;;;247    
                          ENDP

                  FLASH_DataCacheReset PROC
;;;253      */
;;;254    void FLASH_DataCacheReset(void)
00006e  48dd              LDR      r0,|L1.996|
;;;255    {
;;;256      FLASH->ACR |= FLASH_ACR_DCRST;
000070  6800              LDR      r0,[r0,#0]
000072  f4405080          ORR      r0,r0,#0x1000
000076  49db              LDR      r1,|L1.996|
000078  6008              STR      r0,[r1,#0]
;;;257    }
00007a  4770              BX       lr
;;;258    
                          ENDP

                  FLASH_Unlock PROC
;;;297      */
;;;298    void FLASH_Unlock(void)
00007c  48d9              LDR      r0,|L1.996|
;;;299    {
;;;300      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
00007e  3010              ADDS     r0,r0,#0x10
000080  6800              LDR      r0,[r0,#0]
000082  f0104f00          TST      r0,#0x80000000
000086  d004              BEQ      |L1.146|
;;;301      {
;;;302        /* Authorize the FLASH Registers access */
;;;303        FLASH->KEYR = FLASH_KEY1;
000088  48d7              LDR      r0,|L1.1000|
00008a  49d8              LDR      r1,|L1.1004|
00008c  6008              STR      r0,[r1,#0]
;;;304        FLASH->KEYR = FLASH_KEY2;
00008e  48d8              LDR      r0,|L1.1008|
000090  6008              STR      r0,[r1,#0]
                  |L1.146|
;;;305      }  
;;;306    }
000092  4770              BX       lr
;;;307    
                          ENDP

                  FLASH_Lock PROC
;;;312      */
;;;313    void FLASH_Lock(void)
000094  48d7              LDR      r0,|L1.1012|
;;;314    {
;;;315      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;316      FLASH->CR |= FLASH_CR_LOCK;
000096  6800              LDR      r0,[r0,#0]
000098  f0404000          ORR      r0,r0,#0x80000000
00009c  49d5              LDR      r1,|L1.1012|
00009e  6008              STR      r0,[r1,#0]
;;;317    }
0000a0  4770              BX       lr
;;;318    
                          ENDP

                  FLASH_GetStatus PROC
;;;976      */
;;;977    FLASH_Status FLASH_GetStatus(void)
0000a2  f04f0008          MOV      r0,#8
;;;978    {
;;;979      FLASH_Status flashstatus = FLASH_COMPLETE;
;;;980      
;;;981      if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
0000a6  49d4              LDR      r1,|L1.1016|
0000a8  6809              LDR      r1,[r1,#0]
0000aa  f4013180          AND      r1,r1,#0x10000
0000ae  f5b13f80          CMP      r1,#0x10000
0000b2  d102              BNE      |L1.186|
;;;982      {
;;;983        flashstatus = FLASH_BUSY;
0000b4  f04f0001          MOV      r0,#1
0000b8  e019              B        |L1.238|
                  |L1.186|
;;;984      }
;;;985      else 
;;;986      {  
;;;987        if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
0000ba  49cf              LDR      r1,|L1.1016|
0000bc  6809              LDR      r1,[r1,#0]
0000be  f0110f10          TST      r1,#0x10
0000c2  d002              BEQ      |L1.202|
;;;988        { 
;;;989          flashstatus = FLASH_ERROR_WRP;
0000c4  f04f0005          MOV      r0,#5
0000c8  e011              B        |L1.238|
                  |L1.202|
;;;990        }
;;;991        else 
;;;992        {
;;;993          if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
0000ca  49cb              LDR      r1,|L1.1016|
0000cc  6809              LDR      r1,[r1,#0]
0000ce  f0110fef          TST      r1,#0xef
0000d2  d002              BEQ      |L1.218|
;;;994          {
;;;995            flashstatus = FLASH_ERROR_PROGRAM; 
0000d4  f04f0006          MOV      r0,#6
0000d8  e009              B        |L1.238|
                  |L1.218|
;;;996          }
;;;997          else
;;;998          {
;;;999            if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
0000da  49c7              LDR      r1,|L1.1016|
0000dc  6809              LDR      r1,[r1,#0]
0000de  f0110f02          TST      r1,#2
0000e2  d002              BEQ      |L1.234|
;;;1000           {
;;;1001             flashstatus = FLASH_ERROR_OPERATION;
0000e4  f04f0007          MOV      r0,#7
0000e8  e001              B        |L1.238|
                  |L1.234|
;;;1002           }
;;;1003           else
;;;1004           {
;;;1005             flashstatus = FLASH_COMPLETE;
0000ea  f04f0008          MOV      r0,#8
                  |L1.238|
;;;1006           }
;;;1007         }
;;;1008       }
;;;1009     }
;;;1010     /* Return the FLASH Status */
;;;1011     return flashstatus;
;;;1012   }
0000ee  4770              BX       lr
;;;1013   
                          ENDP

                  FLASH_WaitForLastOperation PROC
;;;1019     */
;;;1020   FLASH_Status FLASH_WaitForLastOperation(void)
0000f0  b500              PUSH     {lr}
;;;1021   { 
;;;1022     __IO FLASH_Status status = FLASH_COMPLETE;
0000f2  f04f0208          MOV      r2,#8
;;;1023      
;;;1024     /* Check for the FLASH Status */
;;;1025     status = FLASH_GetStatus();
0000f6  f7fffffe          BL       FLASH_GetStatus
0000fa  4602              MOV      r2,r0
;;;1026   
;;;1027     /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;1028        Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;1029        flag will be set */
;;;1030     while(status == FLASH_BUSY)
0000fc  e002              B        |L1.260|
                  |L1.254|
;;;1031     {
;;;1032       status = FLASH_GetStatus();
0000fe  f7fffffe          BL       FLASH_GetStatus
000102  4602              MOV      r2,r0
                  |L1.260|
000104  2a01              CMP      r2,#1                 ;1030
000106  d0fa              BEQ      |L1.254|
;;;1033     }
;;;1034     /* Return the operation status */
;;;1035     return status;
000108  4610              MOV      r0,r2
;;;1036   }
00010a  bd00              POP      {pc}
;;;1037   
                          ENDP

                  FLASH_EraseSector PROC
;;;338      */
;;;339    FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
00010c  b570              PUSH     {r4-r6,lr}
;;;340    {
00010e  4604              MOV      r4,r0
000110  460b              MOV      r3,r1
;;;341      uint32_t tmp_psize = 0x0;
000112  f04f0600          MOV      r6,#0
;;;342      FLASH_Status status = FLASH_COMPLETE;
000116  f04f0508          MOV      r5,#8
;;;343    
;;;344      /* Check the parameters */
;;;345      assert_param(IS_FLASH_SECTOR(FLASH_Sector));
;;;346      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;347      
;;;348      if(VoltageRange == VoltageRange_1)
00011a  b903              CBNZ     r3,|L1.286|
;;;349      {
;;;350         tmp_psize = FLASH_PSIZE_BYTE;
00011c  e00b              B        |L1.310|
                  |L1.286|
;;;351      }
;;;352      else if(VoltageRange == VoltageRange_2)
00011e  2b01              CMP      r3,#1
000120  d102              BNE      |L1.296|
;;;353      {
;;;354        tmp_psize = FLASH_PSIZE_HALF_WORD;
000122  f44f7680          MOV      r6,#0x100
000126  e006              B        |L1.310|
                  |L1.296|
;;;355      }
;;;356      else if(VoltageRange == VoltageRange_3)
000128  2b02              CMP      r3,#2
00012a  d102              BNE      |L1.306|
;;;357      {
;;;358        tmp_psize = FLASH_PSIZE_WORD;
00012c  f44f7600          MOV      r6,#0x200
000130  e001              B        |L1.310|
                  |L1.306|
;;;359      }
;;;360      else
;;;361      {
;;;362        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000132  f44f7640          MOV      r6,#0x300
                  |L1.310|
;;;363      }
;;;364      /* Wait for last operation to be completed */
;;;365      status = FLASH_WaitForLastOperation();
000136  f7fffffe          BL       FLASH_WaitForLastOperation
00013a  4605              MOV      r5,r0
;;;366      
;;;367      if(status == FLASH_COMPLETE)
00013c  2d08              CMP      r5,#8
00013e  d12a              BNE      |L1.406|
;;;368      { 
;;;369        /* if the previous operation is completed, proceed to erase the sector */
;;;370        FLASH->CR &= CR_PSIZE_MASK;
000140  48ac              LDR      r0,|L1.1012|
000142  6800              LDR      r0,[r0,#0]
000144  f4207040          BIC      r0,r0,#0x300
000148  49aa              LDR      r1,|L1.1012|
00014a  6008              STR      r0,[r1,#0]
;;;371        FLASH->CR |= tmp_psize;
00014c  4608              MOV      r0,r1
00014e  6800              LDR      r0,[r0,#0]
000150  ea400006          ORR      r0,r0,r6
000154  6008              STR      r0,[r1,#0]
;;;372        FLASH->CR &= SECTOR_MASK;
000156  4608              MOV      r0,r1
000158  6800              LDR      r0,[r0,#0]
00015a  f02000f8          BIC      r0,r0,#0xf8
00015e  6008              STR      r0,[r1,#0]
;;;373        FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
000160  4608              MOV      r0,r1
000162  6800              LDR      r0,[r0,#0]
000164  f0440102          ORR      r1,r4,#2
000168  ea400001          ORR      r0,r0,r1
00016c  49a1              LDR      r1,|L1.1012|
00016e  6008              STR      r0,[r1,#0]
;;;374        FLASH->CR |= FLASH_CR_STRT;
000170  4608              MOV      r0,r1
000172  6800              LDR      r0,[r0,#0]
000174  f4403080          ORR      r0,r0,#0x10000
000178  6008              STR      r0,[r1,#0]
;;;375        
;;;376        /* Wait for last operation to be completed */
;;;377        status = FLASH_WaitForLastOperation();
00017a  f7fffffe          BL       FLASH_WaitForLastOperation
00017e  4605              MOV      r5,r0
;;;378        
;;;379        /* if the erase operation is completed, disable the SER Bit */
;;;380        FLASH->CR &= (~FLASH_CR_SER);
000180  489c              LDR      r0,|L1.1012|
000182  6800              LDR      r0,[r0,#0]
000184  f0200002          BIC      r0,r0,#2
000188  499a              LDR      r1,|L1.1012|
00018a  6008              STR      r0,[r1,#0]
;;;381        FLASH->CR &= SECTOR_MASK; 
00018c  4608              MOV      r0,r1
00018e  6800              LDR      r0,[r0,#0]
000190  f02000f8          BIC      r0,r0,#0xf8
000194  6008              STR      r0,[r1,#0]
                  |L1.406|
;;;382      }
;;;383      /* Return the Erase Status */
;;;384      return status;
000196  4628              MOV      r0,r5
;;;385    }
000198  bd70              POP      {r4-r6,pc}
;;;386    
                          ENDP

                  FLASH_EraseAllSectors PROC
;;;403      */
;;;404    FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
00019a  b530              PUSH     {r4,r5,lr}
;;;405    {
00019c  4603              MOV      r3,r0
;;;406      uint32_t tmp_psize = 0x0;
00019e  f04f0500          MOV      r5,#0
;;;407      FLASH_Status status = FLASH_COMPLETE;
0001a2  f04f0408          MOV      r4,#8
;;;408      
;;;409      /* Wait for last operation to be completed */
;;;410      status = FLASH_WaitForLastOperation();
0001a6  f7fffffe          BL       FLASH_WaitForLastOperation
0001aa  4604              MOV      r4,r0
;;;411      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;412      
;;;413      if(VoltageRange == VoltageRange_1)
0001ac  b903              CBNZ     r3,|L1.432|
;;;414      {
;;;415         tmp_psize = FLASH_PSIZE_BYTE;
0001ae  e00b              B        |L1.456|
                  |L1.432|
;;;416      }
;;;417      else if(VoltageRange == VoltageRange_2)
0001b0  2b01              CMP      r3,#1
0001b2  d102              BNE      |L1.442|
;;;418      {
;;;419        tmp_psize = FLASH_PSIZE_HALF_WORD;
0001b4  f44f7580          MOV      r5,#0x100
0001b8  e006              B        |L1.456|
                  |L1.442|
;;;420      }
;;;421      else if(VoltageRange == VoltageRange_3)
0001ba  2b02              CMP      r3,#2
0001bc  d102              BNE      |L1.452|
;;;422      {
;;;423        tmp_psize = FLASH_PSIZE_WORD;
0001be  f44f7500          MOV      r5,#0x200
0001c2  e001              B        |L1.456|
                  |L1.452|
;;;424      }
;;;425      else
;;;426      {
;;;427        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
0001c4  f44f7540          MOV      r5,#0x300
                  |L1.456|
;;;428      }  
;;;429      if(status == FLASH_COMPLETE)
0001c8  2c08              CMP      r4,#8
0001ca  d11d              BNE      |L1.520|
;;;430      {
;;;431        /* if the previous operation is completed, proceed to erase all sectors */
;;;432         FLASH->CR &= CR_PSIZE_MASK;
0001cc  4889              LDR      r0,|L1.1012|
0001ce  6800              LDR      r0,[r0,#0]
0001d0  f4207040          BIC      r0,r0,#0x300
0001d4  4987              LDR      r1,|L1.1012|
0001d6  6008              STR      r0,[r1,#0]
;;;433         FLASH->CR |= tmp_psize;
0001d8  4608              MOV      r0,r1
0001da  6800              LDR      r0,[r0,#0]
0001dc  ea400005          ORR      r0,r0,r5
0001e0  6008              STR      r0,[r1,#0]
;;;434         FLASH->CR |= FLASH_CR_MER;
0001e2  4608              MOV      r0,r1
0001e4  6800              LDR      r0,[r0,#0]
0001e6  f0400004          ORR      r0,r0,#4
0001ea  6008              STR      r0,[r1,#0]
;;;435         FLASH->CR |= FLASH_CR_STRT;
0001ec  4608              MOV      r0,r1
0001ee  6800              LDR      r0,[r0,#0]
0001f0  f4403080          ORR      r0,r0,#0x10000
0001f4  6008              STR      r0,[r1,#0]
;;;436        
;;;437        /* Wait for last operation to be completed */
;;;438        status = FLASH_WaitForLastOperation();
0001f6  f7fffffe          BL       FLASH_WaitForLastOperation
0001fa  4604              MOV      r4,r0
;;;439    
;;;440        /* if the erase operation is completed, disable the MER Bit */
;;;441        FLASH->CR &= (~FLASH_CR_MER);
0001fc  487d              LDR      r0,|L1.1012|
0001fe  6800              LDR      r0,[r0,#0]
000200  f0200004          BIC      r0,r0,#4
000204  497b              LDR      r1,|L1.1012|
000206  6008              STR      r0,[r1,#0]
                  |L1.520|
;;;442    
;;;443      }   
;;;444      /* Return the Erase Status */
;;;445      return status;
000208  4620              MOV      r0,r4
;;;446    }
00020a  bd30              POP      {r4,r5,pc}
;;;447    
                          ENDP

                  FLASH_ProgramDoubleWord PROC
;;;456      */
;;;457    FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
00020c  b570              PUSH     {r4-r6,lr}
;;;458    {
00020e  4606              MOV      r6,r0
000210  4614              MOV      r4,r2
000212  461d              MOV      r5,r3
;;;459      FLASH_Status status = FLASH_COMPLETE;
000214  f04f0308          MOV      r3,#8
;;;460    
;;;461      /* Check the parameters */
;;;462      assert_param(IS_FLASH_ADDRESS(Address));
;;;463    
;;;464      /* Wait for last operation to be completed */
;;;465      status = FLASH_WaitForLastOperation();
000218  f7fffffe          BL       FLASH_WaitForLastOperation
00021c  4603              MOV      r3,r0
;;;466      
;;;467      if(status == FLASH_COMPLETE)
00021e  2b08              CMP      r3,#8
000220  d11a              BNE      |L1.600|
;;;468      {
;;;469        /* if the previous operation is completed, proceed to program the new data */
;;;470        FLASH->CR &= CR_PSIZE_MASK;
000222  4874              LDR      r0,|L1.1012|
000224  6800              LDR      r0,[r0,#0]
000226  f4207040          BIC      r0,r0,#0x300
00022a  4972              LDR      r1,|L1.1012|
00022c  6008              STR      r0,[r1,#0]
;;;471        FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
00022e  4608              MOV      r0,r1
000230  6800              LDR      r0,[r0,#0]
000232  f4407040          ORR      r0,r0,#0x300
000236  6008              STR      r0,[r1,#0]
;;;472        FLASH->CR |= FLASH_CR_PG;
000238  4608              MOV      r0,r1
00023a  6800              LDR      r0,[r0,#0]
00023c  f0400001          ORR      r0,r0,#1
000240  6008              STR      r0,[r1,#0]
;;;473      
;;;474        *(__IO uint64_t*)Address = Data;
000242  6034              STR      r4,[r6,#0]
000244  6075              STR      r5,[r6,#4]
;;;475            
;;;476        /* Wait for last operation to be completed */
;;;477        status = FLASH_WaitForLastOperation();
000246  f7fffffe          BL       FLASH_WaitForLastOperation
00024a  4603              MOV      r3,r0
;;;478    
;;;479        /* if the program operation is completed, disable the PG Bit */
;;;480        FLASH->CR &= (~FLASH_CR_PG);
00024c  4869              LDR      r0,|L1.1012|
00024e  6800              LDR      r0,[r0,#0]
000250  f0200001          BIC      r0,r0,#1
000254  4967              LDR      r1,|L1.1012|
000256  6008              STR      r0,[r1,#0]
                  |L1.600|
;;;481      } 
;;;482      /* Return the Program Status */
;;;483      return status;
000258  4618              MOV      r0,r3
;;;484    }
00025a  bd70              POP      {r4-r6,pc}
;;;485    
                          ENDP

                  FLASH_ProgramWord PROC
;;;494      */
;;;495    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
00025c  b530              PUSH     {r4,r5,lr}
;;;496    {
00025e  4603              MOV      r3,r0
000260  460c              MOV      r4,r1
;;;497      FLASH_Status status = FLASH_COMPLETE;
000262  f04f0508          MOV      r5,#8
;;;498    
;;;499      /* Check the parameters */
;;;500      assert_param(IS_FLASH_ADDRESS(Address));
;;;501    
;;;502      /* Wait for last operation to be completed */
;;;503      status = FLASH_WaitForLastOperation();
000266  f7fffffe          BL       FLASH_WaitForLastOperation
00026a  4605              MOV      r5,r0
;;;504      
;;;505      if(status == FLASH_COMPLETE)
00026c  2d08              CMP      r5,#8
00026e  d119              BNE      |L1.676|
;;;506      {
;;;507        /* if the previous operation is completed, proceed to program the new data */
;;;508        FLASH->CR &= CR_PSIZE_MASK;
000270  4860              LDR      r0,|L1.1012|
000272  6800              LDR      r0,[r0,#0]
000274  f4207040          BIC      r0,r0,#0x300
000278  495e              LDR      r1,|L1.1012|
00027a  6008              STR      r0,[r1,#0]
;;;509        FLASH->CR |= FLASH_PSIZE_WORD;
00027c  4608              MOV      r0,r1
00027e  6800              LDR      r0,[r0,#0]
000280  f4407000          ORR      r0,r0,#0x200
000284  6008              STR      r0,[r1,#0]
;;;510        FLASH->CR |= FLASH_CR_PG;
000286  4608              MOV      r0,r1
000288  6800              LDR      r0,[r0,#0]
00028a  f0400001          ORR      r0,r0,#1
00028e  6008              STR      r0,[r1,#0]
;;;511      
;;;512        *(__IO uint32_t*)Address = Data;
000290  601c              STR      r4,[r3,#0]
;;;513            
;;;514        /* Wait for last operation to be completed */
;;;515        status = FLASH_WaitForLastOperation();
000292  f7fffffe          BL       FLASH_WaitForLastOperation
000296  4605              MOV      r5,r0
;;;516    
;;;517        /* if the program operation is completed, disable the PG Bit */
;;;518        FLASH->CR &= (~FLASH_CR_PG);
000298  4856              LDR      r0,|L1.1012|
00029a  6800              LDR      r0,[r0,#0]
00029c  f0200001          BIC      r0,r0,#1
0002a0  4954              LDR      r1,|L1.1012|
0002a2  6008              STR      r0,[r1,#0]
                  |L1.676|
;;;519      } 
;;;520      /* Return the Program Status */
;;;521      return status;
0002a4  4628              MOV      r0,r5
;;;522    }
0002a6  bd30              POP      {r4,r5,pc}
;;;523    
                          ENDP

                  FLASH_ProgramHalfWord PROC
;;;532      */
;;;533    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
0002a8  b530              PUSH     {r4,r5,lr}
;;;534    {
0002aa  4603              MOV      r3,r0
0002ac  460c              MOV      r4,r1
;;;535      FLASH_Status status = FLASH_COMPLETE;
0002ae  f04f0508          MOV      r5,#8
;;;536    
;;;537      /* Check the parameters */
;;;538      assert_param(IS_FLASH_ADDRESS(Address));
;;;539    
;;;540      /* Wait for last operation to be completed */
;;;541      status = FLASH_WaitForLastOperation();
0002b2  f7fffffe          BL       FLASH_WaitForLastOperation
0002b6  4605              MOV      r5,r0
;;;542      
;;;543      if(status == FLASH_COMPLETE)
0002b8  2d08              CMP      r5,#8
0002ba  d119              BNE      |L1.752|
;;;544      {
;;;545        /* if the previous operation is completed, proceed to program the new data */
;;;546        FLASH->CR &= CR_PSIZE_MASK;
0002bc  484d              LDR      r0,|L1.1012|
0002be  6800              LDR      r0,[r0,#0]
0002c0  f4207040          BIC      r0,r0,#0x300
0002c4  494b              LDR      r1,|L1.1012|
0002c6  6008              STR      r0,[r1,#0]
;;;547        FLASH->CR |= FLASH_PSIZE_HALF_WORD;
0002c8  4608              MOV      r0,r1
0002ca  6800              LDR      r0,[r0,#0]
0002cc  f4407080          ORR      r0,r0,#0x100
0002d0  6008              STR      r0,[r1,#0]
;;;548        FLASH->CR |= FLASH_CR_PG;
0002d2  4608              MOV      r0,r1
0002d4  6800              LDR      r0,[r0,#0]
0002d6  f0400001          ORR      r0,r0,#1
0002da  6008              STR      r0,[r1,#0]
;;;549      
;;;550        *(__IO uint16_t*)Address = Data;
0002dc  801c              STRH     r4,[r3,#0]
;;;551            
;;;552        /* Wait for last operation to be completed */
;;;553        status = FLASH_WaitForLastOperation();
0002de  f7fffffe          BL       FLASH_WaitForLastOperation
0002e2  4605              MOV      r5,r0
;;;554    
;;;555        /* if the program operation is completed, disable the PG Bit */
;;;556        FLASH->CR &= (~FLASH_CR_PG);
0002e4  4843              LDR      r0,|L1.1012|
0002e6  6800              LDR      r0,[r0,#0]
0002e8  f0200001          BIC      r0,r0,#1
0002ec  4941              LDR      r1,|L1.1012|
0002ee  6008              STR      r0,[r1,#0]
                  |L1.752|
;;;557      } 
;;;558      /* Return the Program Status */
;;;559      return status;
0002f0  4628              MOV      r0,r5
;;;560    }
0002f2  bd30              POP      {r4,r5,pc}
;;;561    
                          ENDP

                  FLASH_ProgramByte PROC
;;;570      */
;;;571    FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
0002f4  b530              PUSH     {r4,r5,lr}
;;;572    {
0002f6  4603              MOV      r3,r0
0002f8  460c              MOV      r4,r1
;;;573      FLASH_Status status = FLASH_COMPLETE;
0002fa  f04f0508          MOV      r5,#8
;;;574    
;;;575      /* Check the parameters */
;;;576      assert_param(IS_FLASH_ADDRESS(Address));
;;;577    
;;;578      /* Wait for last operation to be completed */
;;;579      status = FLASH_WaitForLastOperation();
0002fe  f7fffffe          BL       FLASH_WaitForLastOperation
000302  4605              MOV      r5,r0
;;;580      
;;;581      if(status == FLASH_COMPLETE)
000304  2d08              CMP      r5,#8
000306  d117              BNE      |L1.824|
;;;582      {
;;;583        /* if the previous operation is completed, proceed to program the new data */
;;;584        FLASH->CR &= CR_PSIZE_MASK;
000308  483a              LDR      r0,|L1.1012|
00030a  6800              LDR      r0,[r0,#0]
00030c  f4207040          BIC      r0,r0,#0x300
000310  4938              LDR      r1,|L1.1012|
000312  6008              STR      r0,[r1,#0]
;;;585        FLASH->CR |= FLASH_PSIZE_BYTE;
000314  4608              MOV      r0,r1
000316  6800              LDR      r0,[r0,#0]
000318  6008              STR      r0,[r1,#0]
;;;586        FLASH->CR |= FLASH_CR_PG;
00031a  4608              MOV      r0,r1
00031c  6800              LDR      r0,[r0,#0]
00031e  f0400001          ORR      r0,r0,#1
000322  6008              STR      r0,[r1,#0]
;;;587      
;;;588        *(__IO uint8_t*)Address = Data;
000324  701c              STRB     r4,[r3,#0]
;;;589            
;;;590        /* Wait for last operation to be completed */
;;;591        status = FLASH_WaitForLastOperation();
000326  f7fffffe          BL       FLASH_WaitForLastOperation
00032a  4605              MOV      r5,r0
;;;592    
;;;593        /* if the program operation is completed, disable the PG Bit */
;;;594        FLASH->CR &= (~FLASH_CR_PG);
00032c  4831              LDR      r0,|L1.1012|
00032e  6800              LDR      r0,[r0,#0]
000330  f0200001          BIC      r0,r0,#1
000334  492f              LDR      r1,|L1.1012|
000336  6008              STR      r0,[r1,#0]
                  |L1.824|
;;;595      } 
;;;596    
;;;597      /* Return the Program Status */
;;;598      return status;
000338  4628              MOV      r0,r5
;;;599    }
00033a  bd30              POP      {r4,r5,pc}
;;;600    
                          ENDP

                  FLASH_OB_Unlock PROC
;;;655      */
;;;656    void FLASH_OB_Unlock(void)
00033c  482d              LDR      r0,|L1.1012|
;;;657    {
;;;658      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
00033e  1d00              ADDS     r0,r0,#4
000340  6800              LDR      r0,[r0,#0]
000342  f0100f01          TST      r0,#1
000346  d004              BEQ      |L1.850|
;;;659      {
;;;660        /* Authorizes the Option Byte register programming */
;;;661        FLASH->OPTKEYR = FLASH_OPT_KEY1;
000348  482c              LDR      r0,|L1.1020|
00034a  492d              LDR      r1,|L1.1024|
00034c  6008              STR      r0,[r1,#0]
;;;662        FLASH->OPTKEYR = FLASH_OPT_KEY2;
00034e  482d              LDR      r0,|L1.1028|
000350  6008              STR      r0,[r1,#0]
                  |L1.850|
;;;663      }  
;;;664    }
000352  4770              BX       lr
;;;665    
                          ENDP

                  FLASH_OB_Lock PROC
;;;670      */
;;;671    void FLASH_OB_Lock(void)
000354  482c              LDR      r0,|L1.1032|
;;;672    {
;;;673      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;674      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000356  6800              LDR      r0,[r0,#0]
000358  f0400001          ORR      r0,r0,#1
00035c  492a              LDR      r1,|L1.1032|
00035e  6008              STR      r0,[r1,#0]
;;;675    }
000360  4770              BX       lr
;;;676    
                          ENDP

                  FLASH_OB_WRPConfig PROC
;;;686      */
;;;687    void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
000362  b530              PUSH     {r4,r5,lr}
;;;688    { 
000364  4603              MOV      r3,r0
000366  460c              MOV      r4,r1
;;;689      FLASH_Status status = FLASH_COMPLETE;
000368  f04f0508          MOV      r5,#8
;;;690      
;;;691      /* Check the parameters */
;;;692      assert_param(IS_OB_WRP(OB_WRP));
;;;693      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;694        
;;;695      status = FLASH_WaitForLastOperation();
00036c  f7fffffe          BL       FLASH_WaitForLastOperation
000370  4605              MOV      r5,r0
;;;696    
;;;697      if(status == FLASH_COMPLETE)
000372  2d08              CMP      r5,#8
000374  d10e              BNE      |L1.916|
;;;698      { 
;;;699        if(NewState != DISABLE)
000376  b134              CBZ      r4,|L1.902|
;;;700        {
;;;701          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
000378  4824              LDR      r0,|L1.1036|
00037a  8800              LDRH     r0,[r0,#0]
00037c  ea200003          BIC      r0,r0,r3
000380  4922              LDR      r1,|L1.1036|
000382  8008              STRH     r0,[r1,#0]
000384  e006              B        |L1.916|
                  |L1.902|
;;;702        }
;;;703        else
;;;704        {
;;;705          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
000386  4821              LDR      r0,|L1.1036|
000388  8800              LDRH     r0,[r0,#0]
00038a  b299              UXTH     r1,r3
00038c  ea400001          ORR      r0,r0,r1
000390  491e              LDR      r1,|L1.1036|
000392  8008              STRH     r0,[r1,#0]
                  |L1.916|
;;;706        }
;;;707      }
;;;708    }
000394  bd30              POP      {r4,r5,pc}
;;;709    
                          ENDP

                  FLASH_OB_RDPConfig PROC
;;;721      */
;;;722    void FLASH_OB_RDPConfig(uint8_t OB_RDP)
000396  b510              PUSH     {r4,lr}
;;;723    {
000398  4603              MOV      r3,r0
;;;724      FLASH_Status status = FLASH_COMPLETE;
00039a  f04f0408          MOV      r4,#8
;;;725    
;;;726      /* Check the parameters */
;;;727      assert_param(IS_OB_RDP(OB_RDP));
;;;728    
;;;729      status = FLASH_WaitForLastOperation();
00039e  f7fffffe          BL       FLASH_WaitForLastOperation
0003a2  4604              MOV      r4,r0
;;;730    
;;;731      if(status == FLASH_COMPLETE)
0003a4  2c08              CMP      r4,#8
0003a6  d101              BNE      |L1.940|
;;;732      {
;;;733        *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
0003a8  4819              LDR      r0,|L1.1040|
0003aa  7003              STRB     r3,[r0,#0]
                  |L1.940|
;;;734    
;;;735      }
;;;736    }
0003ac  bd10              POP      {r4,pc}
;;;737    
                          ENDP

                  FLASH_OB_UserConfig PROC
;;;753      */
;;;754    void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
0003ae  b5f0              PUSH     {r4-r7,lr}
;;;755    {
0003b0  4603              MOV      r3,r0
0003b2  460c              MOV      r4,r1
0003b4  4615              MOV      r5,r2
;;;756      uint8_t optiontmp = 0xFF;
0003b6  f04f06ff          MOV      r6,#0xff
;;;757      FLASH_Status status = FLASH_COMPLETE; 
0003ba  f04f0708          MOV      r7,#8
;;;758    
;;;759      /* Check the parameters */
;;;760      assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;761      assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;762      assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;763    
;;;764      /* Wait for last operation to be completed */
;;;765      status = FLASH_WaitForLastOperation();
0003be  f7fffffe          BL       FLASH_WaitForLastOperation
0003c2  4607              MOV      r7,r0
;;;766      
;;;767      if(status == FLASH_COMPLETE)
0003c4  2f08              CMP      r7,#8
0003c6  d10b              BNE      |L1.992|
;;;768      { 
;;;769        /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
;;;770        optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
0003c8  480f              LDR      r0,|L1.1032|
0003ca  7800              LDRB     r0,[r0,#0]
0003cc  f000060f          AND      r6,r0,#0xf
;;;771    
;;;772        /* Update User Option Byte */
;;;773        *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
0003d0  ea440006          ORR      r0,r4,r6
0003d4  ea400005          ORR      r0,r0,r5
0003d8  ea400003          ORR      r0,r0,r3
0003dc  490a              LDR      r1,|L1.1032|
0003de  7008              STRB     r0,[r1,#0]
                  |L1.992|
;;;774      }  
;;;775    }
0003e0  bdf0              POP      {r4-r7,pc}
0003e2  0000              DCW      0x0000
                  |L1.996|
                          DCD      0x40023c00
                  |L1.1000|
                          DCD      0x45670123
                  |L1.1004|
                          DCD      0x40023c04
                  |L1.1008|
                          DCD      0xcdef89ab
                  |L1.1012|
                          DCD      0x40023c10
                  |L1.1016|
                          DCD      0x40023c0c
                  |L1.1020|
                          DCD      0x08192a3b
                  |L1.1024|
                          DCD      0x40023c08
                  |L1.1028|
                          DCD      0x4c5d6e7f
                  |L1.1032|
                          DCD      0x40023c14
                  |L1.1036|
                          DCD      0x40023c16
                  |L1.1040|
                          DCD      0x40023c15
                          ENDP

                  FLASH_OB_BORConfig PROC
;;;786      */
;;;787    void FLASH_OB_BORConfig(uint8_t OB_BOR)
000414  4929              LDR      r1,|L1.1212|
;;;788    {
;;;789      /* Check the parameters */
;;;790      assert_param(IS_OB_BOR(OB_BOR));
;;;791    
;;;792      /* Set the BOR Level */
;;;793      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
000416  7809              LDRB     r1,[r1,#0]
000418  f021010c          BIC      r1,r1,#0xc
00041c  4a27              LDR      r2,|L1.1212|
00041e  7011              STRB     r1,[r2,#0]
;;;794      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
000420  4611              MOV      r1,r2
000422  7809              LDRB     r1,[r1,#0]
000424  ea410100          ORR      r1,r1,r0
000428  7011              STRB     r1,[r2,#0]
;;;795    
;;;796    }
00042a  4770              BX       lr
;;;797    
                          ENDP

                  FLASH_OB_Launch PROC
;;;803      */
;;;804    FLASH_Status FLASH_OB_Launch(void)
00042c  b500              PUSH     {lr}
;;;805    {
;;;806      FLASH_Status status = FLASH_COMPLETE;
00042e  f04f0308          MOV      r3,#8
;;;807    
;;;808      /* Set the OPTSTRT bit in OPTCR register */
;;;809      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000432  4822              LDR      r0,|L1.1212|
000434  7800              LDRB     r0,[r0,#0]
000436  f0400002          ORR      r0,r0,#2
00043a  4920              LDR      r1,|L1.1212|
00043c  7008              STRB     r0,[r1,#0]
;;;810    
;;;811      /* Wait for last operation to be completed */
;;;812      status = FLASH_WaitForLastOperation();
00043e  f7fffffe          BL       FLASH_WaitForLastOperation
000442  4603              MOV      r3,r0
;;;813    
;;;814      return status;
000444  4618              MOV      r0,r3
;;;815    }
000446  bd00              POP      {pc}
;;;816    
                          ENDP

                  FLASH_OB_GetUser PROC
;;;822      */
;;;823    uint8_t FLASH_OB_GetUser(void)
000448  481c              LDR      r0,|L1.1212|
;;;824    {
;;;825      /* Return the User Option Byte */
;;;826      return (uint8_t)(FLASH->OPTCR >> 5);
00044a  6800              LDR      r0,[r0,#0]
00044c  f3c01047          UBFX     r0,r0,#5,#8
;;;827    }
000450  4770              BX       lr
;;;828    
                          ENDP

                  FLASH_OB_GetWRP PROC
;;;833      */
;;;834    uint16_t FLASH_OB_GetWRP(void)
000452  481a              LDR      r0,|L1.1212|
;;;835    {
;;;836      /* Return the FLASH write protection Register value */
;;;837      return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
000454  1c80              ADDS     r0,r0,#2
000456  8800              LDRH     r0,[r0,#0]
;;;838    }
000458  4770              BX       lr
;;;839    
                          ENDP

                  FLASH_OB_GetRDP PROC
;;;846      */
;;;847    FlagStatus FLASH_OB_GetRDP(void)
00045a  f04f0000          MOV      r0,#0
;;;848    {
;;;849      FlagStatus readstatus = RESET;
;;;850    
;;;851      if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
00045e  4918              LDR      r1,|L1.1216|
000460  7809              LDRB     r1,[r1,#0]
000462  29aa              CMP      r1,#0xaa
000464  d002              BEQ      |L1.1132|
;;;852      {
;;;853        readstatus = SET;
000466  f04f0001          MOV      r0,#1
00046a  e001              B        |L1.1136|
                  |L1.1132|
;;;854      }
;;;855      else
;;;856      {
;;;857        readstatus = RESET;
00046c  f04f0000          MOV      r0,#0
                  |L1.1136|
;;;858      }
;;;859      return readstatus;
;;;860    }
000470  4770              BX       lr
;;;861    
                          ENDP

                  FLASH_OB_GetBOR PROC
;;;870      */
;;;871    uint8_t FLASH_OB_GetBOR(void)
000472  4812              LDR      r0,|L1.1212|
;;;872    {
;;;873      /* Return the FLASH BOR level */
;;;874      return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
000474  7800              LDRB     r0,[r0,#0]
000476  f000000c          AND      r0,r0,#0xc
;;;875    }
00047a  4770              BX       lr
;;;876    
                          ENDP

                  FLASH_ITConfig PROC
;;;900      */
;;;901    void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
00047c  b131              CBZ      r1,|L1.1164|
;;;902    {
;;;903      /* Check the parameters */
;;;904      assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;905      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;906    
;;;907      if(NewState != DISABLE)
;;;908      {
;;;909        /* Enable the interrupt sources */
;;;910        FLASH->CR |= FLASH_IT;
00047e  4a11              LDR      r2,|L1.1220|
000480  6812              LDR      r2,[r2,#0]
000482  ea420200          ORR      r2,r2,r0
000486  4b0f              LDR      r3,|L1.1220|
000488  601a              STR      r2,[r3,#0]
00048a  e005              B        |L1.1176|
                  |L1.1164|
;;;911      }
;;;912      else
;;;913      {
;;;914        /* Disable the interrupt sources */
;;;915        FLASH->CR &= ~(uint32_t)FLASH_IT;
00048c  4a0d              LDR      r2,|L1.1220|
00048e  6812              LDR      r2,[r2,#0]
000490  ea220200          BIC      r2,r2,r0
000494  4b0b              LDR      r3,|L1.1220|
000496  601a              STR      r2,[r3,#0]
                  |L1.1176|
;;;916      }
;;;917    }
000498  4770              BX       lr
;;;918    
                          ENDP

                  FLASH_GetFlagStatus PROC
;;;931      */
;;;932    FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
00049a  4601              MOV      r1,r0
;;;933    {
;;;934      FlagStatus bitstatus = RESET;
00049c  f04f0000          MOV      r0,#0
;;;935      /* Check the parameters */
;;;936      assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
;;;937    
;;;938      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
0004a0  4a09              LDR      r2,|L1.1224|
0004a2  6812              LDR      r2,[r2,#0]
0004a4  420a              TST      r2,r1
0004a6  d002              BEQ      |L1.1198|
;;;939      {
;;;940        bitstatus = SET;
0004a8  f04f0001          MOV      r0,#1
0004ac  e001              B        |L1.1202|
                  |L1.1198|
;;;941      }
;;;942      else
;;;943      {
;;;944        bitstatus = RESET;
0004ae  f04f0000          MOV      r0,#0
                  |L1.1202|
;;;945      }
;;;946      /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;947      return bitstatus; 
;;;948    }
0004b2  4770              BX       lr
;;;949    
                          ENDP

                  FLASH_ClearFlag PROC
;;;961      */
;;;962    void FLASH_ClearFlag(uint32_t FLASH_FLAG)
0004b4  4904              LDR      r1,|L1.1224|
;;;963    {
;;;964      /* Check the parameters */
;;;965      assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
;;;966      
;;;967      /* Clear the flags */
;;;968      FLASH->SR = FLASH_FLAG;
0004b6  6008              STR      r0,[r1,#0]
;;;969    }
0004b8  4770              BX       lr
;;;970    
                          ENDP

0004ba  0000              DCW      0x0000
                  |L1.1212|
                          DCD      0x40023c14
                  |L1.1216|
                          DCD      0x40023c15
                  |L1.1220|
                          DCD      0x40023c10
                  |L1.1224|
                          DCD      0x40023c0c

;*** Start embedded assembler ***

#line 1 "..\\BSP\\STM32F2xx\\src\\stm32f2xx_flash.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_stm32f2xx_flash_c_a2a150d6____REV16|
#line 112 "..\\BSP\\CMSIS\\core_cmInstr.h"
|__asm___17_stm32f2xx_flash_c_a2a150d6____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___17_stm32f2xx_flash_c_a2a150d6____REVSH|
#line 130
|__asm___17_stm32f2xx_flash_c_a2a150d6____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
