; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\os_mem.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\os_mem.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\os_mem.crf ..\..\uCOS-II\Source\os_mem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSMemCreate PROC
;;;60     
;;;61     OS_MEM  *OSMemCreate (void   *addr,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;62                           INT32U  nblks,
;;;63                           INT32U  blksize,
;;;64                           INT8U  *perr)
;;;65     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;66         OS_MEM    *pmem;
;;;67         INT8U     *pblk;
;;;68         void     **plink;
;;;69         INT32U     loops;
;;;70         INT32U     i;
;;;71     #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;72         OS_CPU_SR  cpu_sr = 0u;
00000c  f04f0000          MOV      r0,#0
000010  9000              STR      r0,[sp,#0]
;;;73     #endif
;;;74     
;;;75     
;;;76     
;;;77     #ifdef OS_SAFETY_CRITICAL
;;;78         if (perr == (INT8U *)0) {
;;;79             OS_SAFETY_CRITICAL_EXCEPTION();
;;;80             return ((OS_MEM *)0);
;;;81         }
;;;82     #endif
;;;83     
;;;84     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;85         if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;86             OS_SAFETY_CRITICAL_EXCEPTION();
;;;87             return ((OS_MEM *)0);
;;;88         }
;;;89     #endif
;;;90     
;;;91     #if OS_ARG_CHK_EN > 0u
;;;92         if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
;;;93             *perr = OS_ERR_MEM_INVALID_ADDR;
;;;94             return ((OS_MEM *)0);
;;;95         }
;;;96         if (((INT32U)addr & (sizeof(void *) - 1u)) != 0u){  /* Must be pointer size aligned                */
;;;97             *perr = OS_ERR_MEM_INVALID_ADDR;
;;;98             return ((OS_MEM *)0);
;;;99         }
;;;100        if (nblks < 2u) {                                 /* Must have at least 2 blocks per partition     */
;;;101            *perr = OS_ERR_MEM_INVALID_BLKS;
;;;102            return ((OS_MEM *)0);
;;;103        }
;;;104        if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
;;;105            *perr = OS_ERR_MEM_INVALID_SIZE;
;;;106            return ((OS_MEM *)0);
;;;107        }
;;;108    #endif
;;;109        OS_ENTER_CRITICAL();
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  9000              STR      r0,[sp,#0]
;;;110        pmem = OSMemFreeList;                             /* Get next free memory partition                */
000018  487b              LDR      r0,|L1.520|
00001a  6804              LDR      r4,[r0,#0]  ; OSMemFreeList
;;;111        if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
00001c  6800              LDR      r0,[r0,#0]  ; OSMemFreeList
00001e  b120              CBZ      r0,|L1.42|
;;;112            OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
000020  4879              LDR      r0,|L1.520|
000022  6800              LDR      r0,[r0,#0]  ; OSMemFreeList
000024  6840              LDR      r0,[r0,#4]
000026  4978              LDR      r1,|L1.520|
000028  6008              STR      r0,[r1,#0]  ; OSMemFreeList
                  |L1.42|
;;;113        }
;;;114        OS_EXIT_CRITICAL();
00002a  9800              LDR      r0,[sp,#0]
00002c  f7fffffe          BL       OS_CPU_SR_Restore
;;;115        if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
000030  b93c              CBNZ     r4,|L1.66|
;;;116            *perr = OS_ERR_MEM_INVALID_PART;
000032  f04f005a          MOV      r0,#0x5a
000036  f88a0000          STRB     r0,[r10,#0]
;;;117            return ((OS_MEM *)0);
00003a  f04f0000          MOV      r0,#0
                  |L1.62|
;;;118        }
;;;119        plink = (void **)addr;                            /* Create linked list of free memory blocks      */
;;;120        pblk  = (INT8U *)addr;
;;;121        loops  = nblks - 1u;
;;;122        for (i = 0u; i < loops; i++) {
;;;123            pblk +=  blksize;                             /* Point to the FOLLOWING block                  */
;;;124           *plink = (void  *)pblk;                        /* Save pointer to NEXT block in CURRENT block   */
;;;125            plink = (void **)pblk;                        /* Position to  NEXT      block                  */
;;;126        }
;;;127        *plink              = (void *)0;                  /* Last memory block points to NULL              */
;;;128        pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
;;;129        pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
;;;130        pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
;;;131        pmem->OSMemNBlks    = nblks;
;;;132        pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
;;;133        *perr               = OS_ERR_NONE;
;;;134        return (pmem);
;;;135    }
00003e  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.66|
000042  46a8              MOV      r8,r5                 ;119
000044  462e              MOV      r6,r5                 ;120
000046  f1a70001          SUB      r0,r7,#1              ;121
00004a  9001              STR      r0,[sp,#4]            ;121
00004c  f04f0b00          MOV      r11,#0                ;122
000050  e005              B        |L1.94|
                  |L1.82|
000052  444e              ADD      r6,r6,r9              ;123
000054  f8c86000          STR      r6,[r8,#0]            ;124
000058  46b0              MOV      r8,r6                 ;125
00005a  f10b0b01          ADD      r11,r11,#1            ;122
                  |L1.94|
00005e  9801              LDR      r0,[sp,#4]            ;122
000060  4583              CMP      r11,r0                ;122
000062  d3f6              BCC      |L1.82|
000064  f04f0000          MOV      r0,#0                 ;127
000068  f8c80000          STR      r0,[r8,#0]            ;127
00006c  6025              STR      r5,[r4,#0]            ;128
00006e  6065              STR      r5,[r4,#4]            ;129
000070  6127              STR      r7,[r4,#0x10]         ;130
000072  60e7              STR      r7,[r4,#0xc]          ;131
000074  f8c49008          STR      r9,[r4,#8]            ;132
000078  f88a0000          STRB     r0,[r10,#0]           ;133
00007c  4620              MOV      r0,r4                 ;134
00007e  e7de              B        |L1.62|
;;;136    /*$PAGE*/
                          ENDP

                  OSMemGet PROC
;;;156    
;;;157    void  *OSMemGet (OS_MEM  *pmem,
000080  e92d41f0          PUSH     {r4-r8,lr}
;;;158                     INT8U   *perr)
;;;159    {
000084  4604              MOV      r4,r0
000086  460d              MOV      r5,r1
;;;160        void      *pblk;
;;;161    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;162        OS_CPU_SR  cpu_sr = 0u;
000088  f04f0700          MOV      r7,#0
;;;163    #endif
;;;164    
;;;165    
;;;166    
;;;167    #ifdef OS_SAFETY_CRITICAL
;;;168        if (perr == (INT8U *)0) {
;;;169            OS_SAFETY_CRITICAL_EXCEPTION();
;;;170            return ((void *)0);
;;;171        }
;;;172    #endif
;;;173    
;;;174    #if OS_ARG_CHK_EN > 0u
;;;175        if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
;;;176            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;177            return ((void *)0);
;;;178        }
;;;179    #endif
;;;180        OS_ENTER_CRITICAL();
00008c  f7fffffe          BL       OS_CPU_SR_Save
000090  4607              MOV      r7,r0
;;;181        if (pmem->OSMemNFree > 0u) {                      /* See if there are any free memory blocks       */
000092  6920              LDR      r0,[r4,#0x10]
000094  b178              CBZ      r0,|L1.182|
;;;182            pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
000096  6866              LDR      r6,[r4,#4]
;;;183            pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
000098  6830              LDR      r0,[r6,#0]
00009a  6060              STR      r0,[r4,#4]
;;;184            pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
00009c  6920              LDR      r0,[r4,#0x10]
00009e  f1a00001          SUB      r0,r0,#1
0000a2  6120              STR      r0,[r4,#0x10]
;;;185            OS_EXIT_CRITICAL();
0000a4  4638              MOV      r0,r7
0000a6  f7fffffe          BL       OS_CPU_SR_Restore
;;;186            *perr = OS_ERR_NONE;                          /*      No error                                 */
0000aa  f04f0000          MOV      r0,#0
0000ae  7028              STRB     r0,[r5,#0]
;;;187            return (pblk);                                /*      Return memory block to caller            */
0000b0  4630              MOV      r0,r6
                  |L1.178|
;;;188        }
;;;189        OS_EXIT_CRITICAL();
;;;190        *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
;;;191        return ((void *)0);                               /*      Return NULL pointer to caller            */
;;;192    }
0000b2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.182|
0000b6  4638              MOV      r0,r7                 ;189
0000b8  f7fffffe          BL       OS_CPU_SR_Restore
0000bc  f04f005d          MOV      r0,#0x5d              ;190
0000c0  7028              STRB     r0,[r5,#0]            ;190
0000c2  f04f0000          MOV      r0,#0                 ;191
0000c6  e7f4              B        |L1.178|
;;;193    /*$PAGE*/
                          ENDP

                  OSMemNameGet PROC
;;;215    #if OS_MEM_NAME_EN > 0u
;;;216    INT8U  OSMemNameGet (OS_MEM   *pmem,
0000c8  e92d41f0          PUSH     {r4-r8,lr}
;;;217                         INT8U   **pname,
;;;218                         INT8U    *perr)
;;;219    {
0000cc  4606              MOV      r6,r0
0000ce  460c              MOV      r4,r1
0000d0  4615              MOV      r5,r2
;;;220        INT8U      len;
;;;221    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;222        OS_CPU_SR  cpu_sr = 0u;
0000d2  f04f0700          MOV      r7,#0
;;;223    #endif
;;;224    
;;;225    
;;;226    
;;;227    #ifdef OS_SAFETY_CRITICAL
;;;228        if (perr == (INT8U *)0) {
;;;229            OS_SAFETY_CRITICAL_EXCEPTION();
;;;230            return (0u);
;;;231        }
;;;232    #endif
;;;233    
;;;234    #if OS_ARG_CHK_EN > 0u
;;;235        if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
;;;236            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;237            return (0u);
;;;238        }
;;;239        if (pname == (INT8U **)0) {                  /* Is 'pname' a NULL pointer?                         */
;;;240            *perr = OS_ERR_PNAME_NULL;
;;;241            return (0u);
;;;242        }
;;;243    #endif
;;;244        if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
0000d6  484d              LDR      r0,|L1.524|
0000d8  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0000da  b130              CBZ      r0,|L1.234|
;;;245            *perr = OS_ERR_NAME_GET_ISR;
0000dc  f04f0011          MOV      r0,#0x11
0000e0  7028              STRB     r0,[r5,#0]
;;;246            return (0u);
0000e2  f04f0000          MOV      r0,#0
                  |L1.230|
;;;247        }
;;;248        OS_ENTER_CRITICAL();
;;;249        *pname = pmem->OSMemName;
;;;250        len    = OS_StrLen(*pname);
;;;251        OS_EXIT_CRITICAL();
;;;252        *perr  = OS_ERR_NONE;
;;;253        return (len);
;;;254    }
0000e6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.234|
0000ea  f7fffffe          BL       OS_CPU_SR_Save
0000ee  4607              MOV      r7,r0                 ;248
0000f0  6970              LDR      r0,[r6,#0x14]         ;249
0000f2  6020              STR      r0,[r4,#0]            ;249
0000f4  6820              LDR      r0,[r4,#0]            ;250
0000f6  f7fffffe          BL       OS_StrLen
0000fa  4680              MOV      r8,r0                 ;250
0000fc  4638              MOV      r0,r7                 ;251
0000fe  f7fffffe          BL       OS_CPU_SR_Restore
000102  f04f0000          MOV      r0,#0                 ;252
000106  7028              STRB     r0,[r5,#0]            ;252
000108  4640              MOV      r0,r8                 ;253
00010a  e7ec              B        |L1.230|
;;;255    #endif
                          ENDP

                  OSMemNameSet PROC
;;;280    #if OS_MEM_NAME_EN > 0u
;;;281    void  OSMemNameSet (OS_MEM  *pmem,
00010c  e92d41f0          PUSH     {r4-r8,lr}
;;;282                        INT8U   *pname,
;;;283                        INT8U   *perr)
;;;284    {
000110  4605              MOV      r5,r0
000112  460e              MOV      r6,r1
000114  4614              MOV      r4,r2
;;;285    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;286        OS_CPU_SR  cpu_sr = 0u;
000116  f04f0700          MOV      r7,#0
;;;287    #endif
;;;288    
;;;289    
;;;290    
;;;291    #ifdef OS_SAFETY_CRITICAL
;;;292        if (perr == (INT8U *)0) {
;;;293            OS_SAFETY_CRITICAL_EXCEPTION();
;;;294            return;
;;;295        }
;;;296    #endif
;;;297    
;;;298    #if OS_ARG_CHK_EN > 0u
;;;299        if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
;;;300            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;301            return;
;;;302        }
;;;303        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;304            *perr = OS_ERR_PNAME_NULL;
;;;305            return;
;;;306        }
;;;307    #endif
;;;308        if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
00011a  483c              LDR      r0,|L1.524|
00011c  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00011e  b120              CBZ      r0,|L1.298|
;;;309            *perr = OS_ERR_NAME_SET_ISR;
000120  f04f0012          MOV      r0,#0x12
000124  7020              STRB     r0,[r4,#0]
                  |L1.294|
;;;310            return;
;;;311        }
;;;312        OS_ENTER_CRITICAL();
;;;313        pmem->OSMemName = pname;
;;;314        OS_EXIT_CRITICAL();
;;;315        *perr           = OS_ERR_NONE;
;;;316    }
000126  e8bd81f0          POP      {r4-r8,pc}
                  |L1.298|
00012a  f7fffffe          BL       OS_CPU_SR_Save
00012e  4607              MOV      r7,r0                 ;312
000130  616e              STR      r6,[r5,#0x14]         ;313
000132  4638              MOV      r0,r7                 ;314
000134  f7fffffe          BL       OS_CPU_SR_Restore
000138  f04f0000          MOV      r0,#0                 ;315
00013c  7020              STRB     r0,[r4,#0]            ;315
00013e  bf00              NOP      
000140  e7f1              B        |L1.294|
;;;317    #endif
                          ENDP

                  OSMemPut PROC
;;;337    
;;;338    INT8U  OSMemPut (OS_MEM  *pmem,
000142  b570              PUSH     {r4-r6,lr}
;;;339                     void    *pblk)
;;;340    {
000144  4604              MOV      r4,r0
000146  460d              MOV      r5,r1
;;;341    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;342        OS_CPU_SR  cpu_sr = 0u;
000148  f04f0600          MOV      r6,#0
;;;343    #endif
;;;344    
;;;345    
;;;346    
;;;347    #if OS_ARG_CHK_EN > 0u
;;;348        if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
;;;349            return (OS_ERR_MEM_INVALID_PMEM);
;;;350        }
;;;351        if (pblk == (void *)0) {                     /* Must release a valid block                         */
;;;352            return (OS_ERR_MEM_INVALID_PBLK);
;;;353        }
;;;354    #endif
;;;355        OS_ENTER_CRITICAL();
00014c  f7fffffe          BL       OS_CPU_SR_Save
000150  4606              MOV      r6,r0
;;;356        if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
000152  e9d41003          LDRD     r1,r0,[r4,#0xc]
000156  4288              CMP      r0,r1
000158  d304              BCC      |L1.356|
;;;357            OS_EXIT_CRITICAL();
00015a  4630              MOV      r0,r6
00015c  f7fffffe          BL       OS_CPU_SR_Restore
;;;358            return (OS_ERR_MEM_FULL);
000160  205e              MOVS     r0,#0x5e
                  |L1.354|
;;;359        }
;;;360        *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
;;;361        pmem->OSMemFreeList = pblk;
;;;362        pmem->OSMemNFree++;                          /* One more memory block in this partition            */
;;;363        OS_EXIT_CRITICAL();
;;;364        return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
;;;365    }
000162  bd70              POP      {r4-r6,pc}
                  |L1.356|
000164  6860              LDR      r0,[r4,#4]            ;360
000166  6028              STR      r0,[r5,#0]            ;360
000168  6065              STR      r5,[r4,#4]            ;361
00016a  6920              LDR      r0,[r4,#0x10]         ;362
00016c  f1000001          ADD      r0,r0,#1              ;362
000170  6120              STR      r0,[r4,#0x10]         ;362
000172  4630              MOV      r0,r6                 ;363
000174  f7fffffe          BL       OS_CPU_SR_Restore
000178  2000              MOVS     r0,#0                 ;364
00017a  e7f2              B        |L1.354|
;;;366    /*$PAGE*/
                          ENDP

                  OSMemQuery PROC
;;;385    #if OS_MEM_QUERY_EN > 0u
;;;386    INT8U  OSMemQuery (OS_MEM       *pmem,
00017c  b570              PUSH     {r4-r6,lr}
;;;387                       OS_MEM_DATA  *p_mem_data)
;;;388    {
00017e  4605              MOV      r5,r0
000180  460c              MOV      r4,r1
;;;389    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;390        OS_CPU_SR  cpu_sr = 0u;
000182  f04f0600          MOV      r6,#0
;;;391    #endif
;;;392    
;;;393    
;;;394    
;;;395    #if OS_ARG_CHK_EN > 0u
;;;396        if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
;;;397            return (OS_ERR_MEM_INVALID_PMEM);
;;;398        }
;;;399        if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
;;;400            return (OS_ERR_MEM_INVALID_PDATA);
;;;401        }
;;;402    #endif
;;;403        OS_ENTER_CRITICAL();
000186  f7fffffe          BL       OS_CPU_SR_Save
00018a  4606              MOV      r6,r0
;;;404        p_mem_data->OSAddr     = pmem->OSMemAddr;
00018c  6828              LDR      r0,[r5,#0]
00018e  6020              STR      r0,[r4,#0]
;;;405        p_mem_data->OSFreeList = pmem->OSMemFreeList;
000190  6868              LDR      r0,[r5,#4]
000192  6060              STR      r0,[r4,#4]
;;;406        p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
000194  68a8              LDR      r0,[r5,#8]
000196  60a0              STR      r0,[r4,#8]
;;;407        p_mem_data->OSNBlks    = pmem->OSMemNBlks;
000198  68e8              LDR      r0,[r5,#0xc]
00019a  60e0              STR      r0,[r4,#0xc]
;;;408        p_mem_data->OSNFree    = pmem->OSMemNFree;
00019c  6928              LDR      r0,[r5,#0x10]
00019e  6120              STR      r0,[r4,#0x10]
;;;409        OS_EXIT_CRITICAL();
0001a0  4630              MOV      r0,r6
0001a2  f7fffffe          BL       OS_CPU_SR_Restore
;;;410        p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
0001a6  e9d40103          LDRD     r0,r1,[r4,#0xc]
0001aa  eba00001          SUB      r0,r0,r1
0001ae  6160              STR      r0,[r4,#0x14]
;;;411        return (OS_ERR_NONE);
0001b0  f04f0000          MOV      r0,#0
;;;412    }
0001b4  bd70              POP      {r4-r6,pc}
;;;413    #endif                                           /* OS_MEM_QUERY_EN                                    */
                          ENDP

                  OS_MemInit PROC
;;;429    
;;;430    void  OS_MemInit (void)
0001b6  b570              PUSH     {r4-r6,lr}
;;;431    {
;;;432    #if OS_MAX_MEM_PART == 1u
;;;433        OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
;;;434        OSMemFreeList               = (OS_MEM *)&OSMemTbl[0]; /* Point to beginning of free list           */
;;;435    #if OS_MEM_NAME_EN > 0u
;;;436        OSMemFreeList->OSMemName    = (INT8U *)"?";           /* Unknown name                              */
;;;437    #endif
;;;438    #endif
;;;439    
;;;440    #if OS_MAX_MEM_PART >= 2u
;;;441        OS_MEM  *pmem;
;;;442        INT16U   i;
;;;443    
;;;444    
;;;445        OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
0001b8  2178              MOVS     r1,#0x78
0001ba  4815              LDR      r0,|L1.528|
0001bc  f7fffffe          BL       OS_MemClr
;;;446        for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
0001c0  f04f0400          MOV      r4,#0
0001c4  e010              B        |L1.488|
                  |L1.454|
;;;447            pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
0001c6  eb040044          ADD      r0,r4,r4,LSL #1
0001ca  4911              LDR      r1,|L1.528|
0001cc  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;448            pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
0001d0  f1040001          ADD      r0,r4,#1
0001d4  eb000040          ADD      r0,r0,r0,LSL #1
0001d8  eb0100c0          ADD      r0,r1,r0,LSL #3
0001dc  6068              STR      r0,[r5,#4]
;;;449    #if OS_MEM_NAME_EN > 0u
;;;450            pmem->OSMemName  = (INT8U *)(void *)"?";
0001de  a00d              ADR      r0,|L1.532|
0001e0  6168              STR      r0,[r5,#0x14]
0001e2  f1040001          ADD      r0,r4,#1              ;446
0001e6  b284              UXTH     r4,r0                 ;446
                  |L1.488|
0001e8  2c04              CMP      r4,#4                 ;446
0001ea  d3ec              BCC      |L1.454|
;;;451    #endif
;;;452        }
;;;453        pmem                = &OSMemTbl[i];
0001ec  eb040044          ADD      r0,r4,r4,LSL #1
0001f0  4907              LDR      r1,|L1.528|
0001f2  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;454        pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
0001f6  f04f0000          MOV      r0,#0
0001fa  6068              STR      r0,[r5,#4]
;;;455    #if OS_MEM_NAME_EN > 0u
;;;456        pmem->OSMemName = (INT8U *)(void *)"?";
0001fc  a005              ADR      r0,|L1.532|
0001fe  6168              STR      r0,[r5,#0x14]
;;;457    #endif
;;;458    
;;;459        OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
000200  4608              MOV      r0,r1
000202  4901              LDR      r1,|L1.520|
000204  6008              STR      r0,[r1,#0]  ; OSMemFreeList
;;;460    #endif
;;;461    }
000206  bd70              POP      {r4-r6,pc}
;;;462    #endif                                                    /* OS_MEM_EN                                 */
                          ENDP

                  |L1.520|
                          DCD      OSMemFreeList
                  |L1.524|
                          DCD      OSIntNesting
                  |L1.528|
                          DCD      OSMemTbl
                  |L1.532|
000214  3f00              DCB      "?",0
000216  00                DCB      0
000217  00                DCB      0
