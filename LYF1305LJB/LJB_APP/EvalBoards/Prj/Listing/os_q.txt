; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\os_q.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\os_q.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\os_q.crf ..\..\uCOS-II\Source\os_q.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSQAccept PROC
;;;62     #if OS_Q_ACCEPT_EN > 0u
;;;63     void  *OSQAccept (OS_EVENT  *pevent,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;64                       INT8U     *perr)
;;;65     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;66         void      *pmsg;
;;;67         OS_Q      *pq;
;;;68     #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;69         OS_CPU_SR  cpu_sr = 0u;
000008  f04f0800          MOV      r8,#0
;;;70     #endif
;;;71     
;;;72     
;;;73     
;;;74     #ifdef OS_SAFETY_CRITICAL
;;;75         if (perr == (INT8U *)0) {
;;;76             OS_SAFETY_CRITICAL_EXCEPTION();
;;;77             return ((void *)0);
;;;78         }
;;;79     #endif
;;;80     
;;;81     #if OS_ARG_CHK_EN > 0u
;;;82         if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;83             *perr = OS_ERR_PEVENT_NULL;
;;;84             return ((void *)0);
;;;85         }
;;;86     #endif
;;;87         if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
00000c  7830              LDRB     r0,[r6,#0]
00000e  2802              CMP      r0,#2
000010  d006              BEQ      |L1.32|
;;;88             *perr = OS_ERR_EVENT_TYPE;
000012  f04f0001          MOV      r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;89             return ((void *)0);
000018  f04f0000          MOV      r0,#0
                  |L1.28|
;;;90         }
;;;91         OS_ENTER_CRITICAL();
;;;92         pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;93         if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
;;;94             pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;95             pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;96             if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;97                 pq->OSQOut = pq->OSQStart;
;;;98             }
;;;99             *perr = OS_ERR_NONE;
;;;100        } else {
;;;101            *perr = OS_ERR_Q_EMPTY;
;;;102            pmsg  = (void *)0;                       /* Queue is empty                                     */
;;;103        }
;;;104        OS_EXIT_CRITICAL();
;;;105        return (pmsg);                               /* Return message received (or NULL)                  */
;;;106    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  f7fffffe          BL       OS_CPU_SR_Save
000024  4680              MOV      r8,r0                 ;91
000026  6874              LDR      r4,[r6,#4]            ;92
000028  8ae0              LDRH     r0,[r4,#0x16]         ;93
00002a  b190              CBZ      r0,|L1.82|
00002c  6921              LDR      r1,[r4,#0x10]         ;94
00002e  f1010004          ADD      r0,r1,#4              ;94
000032  6120              STR      r0,[r4,#0x10]         ;94
000034  680f              LDR      r7,[r1,#0]            ;94
000036  8ae0              LDRH     r0,[r4,#0x16]         ;95
000038  f1a00001          SUB      r0,r0,#1              ;95
00003c  82e0              STRH     r0,[r4,#0x16]         ;95
00003e  68a1              LDR      r1,[r4,#8]            ;96
000040  6920              LDR      r0,[r4,#0x10]         ;96
000042  4288              CMP      r0,r1                 ;96
000044  d101              BNE      |L1.74|
000046  6860              LDR      r0,[r4,#4]            ;97
000048  6120              STR      r0,[r4,#0x10]         ;97
                  |L1.74|
00004a  f04f0000          MOV      r0,#0                 ;99
00004e  7028              STRB     r0,[r5,#0]            ;99
000050  e004              B        |L1.92|
                  |L1.82|
000052  f04f001f          MOV      r0,#0x1f              ;101
000056  7028              STRB     r0,[r5,#0]            ;101
000058  f04f0700          MOV      r7,#0                 ;102
                  |L1.92|
00005c  4640              MOV      r0,r8                 ;104
00005e  f7fffffe          BL       OS_CPU_SR_Restore
000062  4638              MOV      r0,r7                 ;105
000064  e7da              B        |L1.28|
;;;107    #endif
                          ENDP

                  OSQCreate PROC
;;;127    
;;;128    OS_EVENT  *OSQCreate (void    **start,
000066  e92d41f0          PUSH     {r4-r8,lr}
;;;129                          INT16U    size)
;;;130    {
00006a  4606              MOV      r6,r0
00006c  460f              MOV      r7,r1
;;;131        OS_EVENT  *pevent;
;;;132        OS_Q      *pq;
;;;133    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;134        OS_CPU_SR  cpu_sr = 0u;
00006e  f04f0800          MOV      r8,#0
;;;135    #endif
;;;136    
;;;137    
;;;138    
;;;139    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;140        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;141            OS_SAFETY_CRITICAL_EXCEPTION();
;;;142            return ((OS_EVENT *)0);
;;;143        }
;;;144    #endif
;;;145    
;;;146        if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
000072  48fe              LDR      r0,|L1.1132|
000074  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000076  b110              CBZ      r0,|L1.126|
;;;147            return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
000078  2000              MOVS     r0,#0
                  |L1.122|
;;;148        }
;;;149        OS_ENTER_CRITICAL();
;;;150        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;151        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;152            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;153        }
;;;154        OS_EXIT_CRITICAL();
;;;155        if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
;;;156            OS_ENTER_CRITICAL();
;;;157            pq = OSQFreeList;                        /* Get a free queue control block                     */
;;;158            if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
;;;159                OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
;;;160                OS_EXIT_CRITICAL();
;;;161                pq->OSQStart           = start;               /*      Initialize the queue                 */
;;;162                pq->OSQEnd             = &start[size];
;;;163                pq->OSQIn              = start;
;;;164                pq->OSQOut             = start;
;;;165                pq->OSQSize            = size;
;;;166                pq->OSQEntries         = 0u;
;;;167                pevent->OSEventType    = OS_EVENT_TYPE_Q;
;;;168                pevent->OSEventCnt     = 0u;
;;;169                pevent->OSEventPtr     = pq;
;;;170    #if OS_EVENT_NAME_EN > 0u
;;;171                pevent->OSEventName    = (INT8U *)(void *)"?";
;;;172    #endif
;;;173                OS_EventWaitListInit(pevent);                 /*      Initialize the wait list             */
;;;174            } else {
;;;175                pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
;;;176                OSEventFreeList    = pevent;
;;;177                OS_EXIT_CRITICAL();
;;;178                pevent = (OS_EVENT *)0;
;;;179            }
;;;180        }
;;;181        return (pevent);
;;;182    }
00007a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.126|
00007e  f7fffffe          BL       OS_CPU_SR_Save
000082  4680              MOV      r8,r0                 ;149
000084  48fa              LDR      r0,|L1.1136|
000086  6804              LDR      r4,[r0,#0]            ;150  ; OSEventFreeList
000088  6800              LDR      r0,[r0,#0]            ;151  ; OSEventFreeList
00008a  b120              CBZ      r0,|L1.150|
00008c  48f8              LDR      r0,|L1.1136|
00008e  6800              LDR      r0,[r0,#0]            ;152  ; OSEventFreeList
000090  6840              LDR      r0,[r0,#4]            ;152
000092  49f7              LDR      r1,|L1.1136|
000094  6008              STR      r0,[r1,#0]            ;152  ; OSEventFreeList
                  |L1.150|
000096  4640              MOV      r0,r8                 ;154
000098  f7fffffe          BL       OS_CPU_SR_Restore
00009c  b314              CBZ      r4,|L1.228|
00009e  f7fffffe          BL       OS_CPU_SR_Save
0000a2  4680              MOV      r8,r0                 ;156
0000a4  48f3              LDR      r0,|L1.1140|
0000a6  6805              LDR      r5,[r0,#0]            ;157  ; OSQFreeList
0000a8  b1ed              CBZ      r5,|L1.230|
0000aa  6800              LDR      r0,[r0,#0]            ;159  ; OSQFreeList
0000ac  6800              LDR      r0,[r0,#0]            ;159
0000ae  49f1              LDR      r1,|L1.1140|
0000b0  6008              STR      r0,[r1,#0]            ;159  ; OSQFreeList
0000b2  4640              MOV      r0,r8                 ;160
0000b4  f7fffffe          BL       OS_CPU_SR_Restore
0000b8  606e              STR      r6,[r5,#4]            ;161
0000ba  eb060087          ADD      r0,r6,r7,LSL #2       ;162
0000be  60a8              STR      r0,[r5,#8]            ;162
0000c0  60ee              STR      r6,[r5,#0xc]          ;163
0000c2  612e              STR      r6,[r5,#0x10]         ;164
0000c4  82af              STRH     r7,[r5,#0x14]         ;165
0000c6  f04f0000          MOV      r0,#0                 ;166
0000ca  82e8              STRH     r0,[r5,#0x16]         ;166
0000cc  f04f0002          MOV      r0,#2                 ;167
0000d0  7020              STRB     r0,[r4,#0]            ;167
0000d2  f04f0000          MOV      r0,#0                 ;168
0000d6  8120              STRH     r0,[r4,#8]            ;168
0000d8  6065              STR      r5,[r4,#4]            ;169
0000da  a0e7              ADR      r0,|L1.1144|
0000dc  6160              STR      r0,[r4,#0x14]         ;171
0000de  4620              MOV      r0,r4                 ;173
0000e0  f7fffffe          BL       OS_EventWaitListInit
                  |L1.228|
0000e4  e009              B        |L1.250|
                  |L1.230|
0000e6  48e2              LDR      r0,|L1.1136|
0000e8  6800              LDR      r0,[r0,#0]            ;175  ; OSEventFreeList
0000ea  6060              STR      r0,[r4,#4]            ;175
0000ec  48e0              LDR      r0,|L1.1136|
0000ee  6004              STR      r4,[r0,#0]            ;176  ; OSEventFreeList
0000f0  4640              MOV      r0,r8                 ;177
0000f2  f7fffffe          BL       OS_CPU_SR_Restore
0000f6  f04f0400          MOV      r4,#0                 ;178
                  |L1.250|
0000fa  4620              MOV      r0,r4                 ;181
0000fc  e7bd              B        |L1.122|
;;;183    /*$PAGE*/
                          ENDP

                  OSQDel PROC
;;;227    #if OS_Q_DEL_EN > 0u
;;;228    OS_EVENT  *OSQDel (OS_EVENT  *pevent,
0000fe  e92d47f0          PUSH     {r4-r10,lr}
;;;229                       INT8U      opt,
;;;230                       INT8U     *perr)
;;;231    {
000102  4604              MOV      r4,r0
000104  4689              MOV      r9,r1
000106  4615              MOV      r5,r2
;;;232        BOOLEAN    tasks_waiting;
;;;233        OS_EVENT  *pevent_return;
;;;234        OS_Q      *pq;
;;;235    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;236        OS_CPU_SR  cpu_sr = 0u;
000108  f04f0a00          MOV      r10,#0
;;;237    #endif
;;;238    
;;;239    
;;;240    
;;;241    #ifdef OS_SAFETY_CRITICAL
;;;242        if (perr == (INT8U *)0) {
;;;243            OS_SAFETY_CRITICAL_EXCEPTION();
;;;244            return ((OS_EVENT *)0);
;;;245        }
;;;246    #endif
;;;247    
;;;248    #if OS_ARG_CHK_EN > 0u
;;;249        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;250            *perr = OS_ERR_PEVENT_NULL;
;;;251            return (pevent);
;;;252        }
;;;253    #endif
;;;254        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
00010c  7820              LDRB     r0,[r4,#0]
00010e  2802              CMP      r0,#2
000110  d005              BEQ      |L1.286|
;;;255            *perr = OS_ERR_EVENT_TYPE;
000112  f04f0001          MOV      r0,#1
000116  7028              STRB     r0,[r5,#0]
;;;256            return (pevent);
000118  4620              MOV      r0,r4
                  |L1.282|
;;;257        }
;;;258        if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
;;;259            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;260            return (pevent);
;;;261        }
;;;262        OS_ENTER_CRITICAL();
;;;263        if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
;;;264            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;265        } else {
;;;266            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;267        }
;;;268        switch (opt) {
;;;269            case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
;;;270                 if (tasks_waiting == OS_FALSE) {
;;;271    #if OS_EVENT_NAME_EN > 0u
;;;272                     pevent->OSEventName    = (INT8U *)(void *)"?";
;;;273    #endif
;;;274                     pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
;;;275                     pq->OSQPtr             = OSQFreeList;
;;;276                     OSQFreeList            = pq;
;;;277                     pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;278                     pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;279                     pevent->OSEventCnt     = 0u;
;;;280                     OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;281                     OS_EXIT_CRITICAL();
;;;282                     *perr                  = OS_ERR_NONE;
;;;283                     pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
;;;284                 } else {
;;;285                     OS_EXIT_CRITICAL();
;;;286                     *perr                  = OS_ERR_TASK_WAITING;
;;;287                     pevent_return          = pevent;
;;;288                 }
;;;289                 break;
;;;290    
;;;291            case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
;;;292                 while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
;;;293                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;294                 }
;;;295    #if OS_EVENT_NAME_EN > 0u
;;;296                 pevent->OSEventName    = (INT8U *)(void *)"?";
;;;297    #endif
;;;298                 pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
;;;299                 pq->OSQPtr             = OSQFreeList;
;;;300                 OSQFreeList            = pq;
;;;301                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;302                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;303                 pevent->OSEventCnt     = 0u;
;;;304                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;305                 OS_EXIT_CRITICAL();
;;;306                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;307                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;308                 }
;;;309                 *perr                  = OS_ERR_NONE;
;;;310                 pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
;;;311                 break;
;;;312    
;;;313            default:
;;;314                 OS_EXIT_CRITICAL();
;;;315                 *perr                  = OS_ERR_INVALID_OPT;
;;;316                 pevent_return          = pevent;
;;;317                 break;
;;;318        }
;;;319        return (pevent_return);
;;;320    }
00011a  e8bd87f0          POP      {r4-r10,pc}
                  |L1.286|
00011e  48d3              LDR      r0,|L1.1132|
000120  7800              LDRB     r0,[r0,#0]            ;258  ; OSIntNesting
000122  b120              CBZ      r0,|L1.302|
000124  f04f000f          MOV      r0,#0xf               ;259
000128  7028              STRB     r0,[r5,#0]            ;259
00012a  4620              MOV      r0,r4                 ;260
00012c  e7f5              B        |L1.282|
                  |L1.302|
00012e  f7fffffe          BL       OS_CPU_SR_Save
000132  4682              MOV      r10,r0                ;262
000134  7aa0              LDRB     r0,[r4,#0xa]          ;263
000136  b110              CBZ      r0,|L1.318|
000138  f04f0801          MOV      r8,#1                 ;264
00013c  e001              B        |L1.322|
                  |L1.318|
00013e  f04f0800          MOV      r8,#0                 ;266
                  |L1.322|
000142  f1b90f00          CMP      r9,#0                 ;268
000146  d003              BEQ      |L1.336|
000148  f1b90f01          CMP      r9,#1                 ;268
00014c  d150              BNE      |L1.496|
00014e  e025              B        |L1.412|
                  |L1.336|
000150  f1b80f00          CMP      r8,#0                 ;270
000154  d11a              BNE      |L1.396|
000156  a0c8              ADR      r0,|L1.1144|
000158  6160              STR      r0,[r4,#0x14]         ;272
00015a  6866              LDR      r6,[r4,#4]            ;274
00015c  48c5              LDR      r0,|L1.1140|
00015e  6800              LDR      r0,[r0,#0]            ;275  ; OSQFreeList
000160  6030              STR      r0,[r6,#0]            ;275
000162  48c4              LDR      r0,|L1.1140|
000164  6006              STR      r6,[r0,#0]            ;276  ; OSQFreeList
000166  f04f0000          MOV      r0,#0                 ;277
00016a  7020              STRB     r0,[r4,#0]            ;277
00016c  48c0              LDR      r0,|L1.1136|
00016e  6800              LDR      r0,[r0,#0]            ;278  ; OSEventFreeList
000170  6060              STR      r0,[r4,#4]            ;278
000172  f04f0000          MOV      r0,#0                 ;279
000176  8120              STRH     r0,[r4,#8]            ;279
000178  48bd              LDR      r0,|L1.1136|
00017a  6004              STR      r4,[r0,#0]            ;280  ; OSEventFreeList
00017c  4650              MOV      r0,r10                ;281
00017e  f7fffffe          BL       OS_CPU_SR_Restore
000182  f04f0000          MOV      r0,#0                 ;282
000186  7028              STRB     r0,[r5,#0]            ;282
000188  4607              MOV      r7,r0                 ;283
00018a  e006              B        |L1.410|
                  |L1.396|
00018c  4650              MOV      r0,r10                ;285
00018e  f7fffffe          BL       OS_CPU_SR_Restore
000192  f04f0049          MOV      r0,#0x49              ;286
000196  7028              STRB     r0,[r5,#0]            ;286
000198  4627              MOV      r7,r4                 ;287
                  |L1.410|
00019a  e031              B        |L1.512|
                  |L1.412|
00019c  e005              B        |L1.426|
                  |L1.414|
00019e  2302              MOVS     r3,#2                 ;293
0001a0  2204              MOVS     r2,#4                 ;293
0001a2  2100              MOVS     r1,#0                 ;293
0001a4  4620              MOV      r0,r4                 ;293
0001a6  f7fffffe          BL       OS_EventTaskRdy
                  |L1.426|
0001aa  7aa0              LDRB     r0,[r4,#0xa]          ;292
0001ac  2800              CMP      r0,#0                 ;292
0001ae  d1f6              BNE      |L1.414|
0001b0  a0b1              ADR      r0,|L1.1144|
0001b2  6160              STR      r0,[r4,#0x14]         ;296
0001b4  6866              LDR      r6,[r4,#4]            ;298
0001b6  48af              LDR      r0,|L1.1140|
0001b8  6800              LDR      r0,[r0,#0]            ;299  ; OSQFreeList
0001ba  6030              STR      r0,[r6,#0]            ;299
0001bc  48ad              LDR      r0,|L1.1140|
0001be  6006              STR      r6,[r0,#0]            ;300  ; OSQFreeList
0001c0  f04f0000          MOV      r0,#0                 ;301
0001c4  7020              STRB     r0,[r4,#0]            ;301
0001c6  48aa              LDR      r0,|L1.1136|
0001c8  6800              LDR      r0,[r0,#0]            ;302  ; OSEventFreeList
0001ca  6060              STR      r0,[r4,#4]            ;302
0001cc  f04f0000          MOV      r0,#0                 ;303
0001d0  8120              STRH     r0,[r4,#8]            ;303
0001d2  48a7              LDR      r0,|L1.1136|
0001d4  6004              STR      r4,[r0,#0]            ;304  ; OSEventFreeList
0001d6  4650              MOV      r0,r10                ;305
0001d8  f7fffffe          BL       OS_CPU_SR_Restore
0001dc  f1b80f01          CMP      r8,#1                 ;306
0001e0  d101              BNE      |L1.486|
0001e2  f7fffffe          BL       OS_Sched
                  |L1.486|
0001e6  f04f0000          MOV      r0,#0                 ;309
0001ea  7028              STRB     r0,[r5,#0]            ;309
0001ec  4607              MOV      r7,r0                 ;310
0001ee  e007              B        |L1.512|
                  |L1.496|
0001f0  4650              MOV      r0,r10                ;314
0001f2  f7fffffe          BL       OS_CPU_SR_Restore
0001f6  f04f0007          MOV      r0,#7                 ;315
0001fa  7028              STRB     r0,[r5,#0]            ;315
0001fc  4627              MOV      r7,r4                 ;316
0001fe  bf00              NOP                            ;317
                  |L1.512|
000200  bf00              NOP                            ;289
000202  4638              MOV      r0,r7                 ;319
000204  e789              B        |L1.282|
;;;321    #endif
                          ENDP

                  OSQFlush PROC
;;;343    #if OS_Q_FLUSH_EN > 0u
;;;344    INT8U  OSQFlush (OS_EVENT *pevent)
000206  b570              PUSH     {r4-r6,lr}
;;;345    {
000208  4605              MOV      r5,r0
;;;346        OS_Q      *pq;
;;;347    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;348        OS_CPU_SR  cpu_sr = 0u;
00020a  f04f0600          MOV      r6,#0
;;;349    #endif
;;;350    
;;;351    
;;;352    
;;;353    #if OS_ARG_CHK_EN > 0u
;;;354        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;355            return (OS_ERR_PEVENT_NULL);
;;;356        }
;;;357        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;358            return (OS_ERR_EVENT_TYPE);
;;;359        }
;;;360    #endif
;;;361        OS_ENTER_CRITICAL();
00020e  f7fffffe          BL       OS_CPU_SR_Save
000212  4606              MOV      r6,r0
;;;362        pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
000214  686c              LDR      r4,[r5,#4]
;;;363        pq->OSQIn      = pq->OSQStart;
000216  6860              LDR      r0,[r4,#4]
000218  60e0              STR      r0,[r4,#0xc]
;;;364        pq->OSQOut     = pq->OSQStart;
00021a  6860              LDR      r0,[r4,#4]
00021c  6120              STR      r0,[r4,#0x10]
;;;365        pq->OSQEntries = 0u;
00021e  f04f0000          MOV      r0,#0
000222  82e0              STRH     r0,[r4,#0x16]
;;;366        OS_EXIT_CRITICAL();
000224  4630              MOV      r0,r6
000226  f7fffffe          BL       OS_CPU_SR_Restore
;;;367        return (OS_ERR_NONE);
00022a  2000              MOVS     r0,#0
;;;368    }
00022c  bd70              POP      {r4-r6,pc}
;;;369    #endif
                          ENDP

                  OSQPend PROC
;;;407    
;;;408    void  *OSQPend (OS_EVENT  *pevent,
00022e  e92d47f0          PUSH     {r4-r10,lr}
;;;409                    INT32U     timeout,
;;;410                    INT8U     *perr)
;;;411    {
000232  4607              MOV      r7,r0
000234  4688              MOV      r8,r1
000236  4615              MOV      r5,r2
;;;412        void      *pmsg;
;;;413        OS_Q      *pq;
;;;414    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;415        OS_CPU_SR  cpu_sr = 0u;
000238  f04f0900          MOV      r9,#0
;;;416    #endif
;;;417    
;;;418    
;;;419    
;;;420    #ifdef OS_SAFETY_CRITICAL
;;;421        if (perr == (INT8U *)0) {
;;;422            OS_SAFETY_CRITICAL_EXCEPTION();
;;;423            return ((void *)0);
;;;424        }
;;;425    #endif
;;;426    
;;;427    #if OS_ARG_CHK_EN > 0u
;;;428        if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;429            *perr = OS_ERR_PEVENT_NULL;
;;;430            return ((void *)0);
;;;431        }
;;;432    #endif
;;;433        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
00023c  7838              LDRB     r0,[r7,#0]
00023e  2802              CMP      r0,#2
000240  d006              BEQ      |L1.592|
;;;434            *perr = OS_ERR_EVENT_TYPE;
000242  f04f0001          MOV      r0,#1
000246  7028              STRB     r0,[r5,#0]
;;;435            return ((void *)0);
000248  f04f0000          MOV      r0,#0
                  |L1.588|
;;;436        }
;;;437        if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
;;;438            *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
;;;439            return ((void *)0);
;;;440        }
;;;441        if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
;;;442            *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
;;;443            return ((void *)0);
;;;444        }
;;;445        OS_ENTER_CRITICAL();
;;;446        pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;447        if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
;;;448            pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;449            pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;450            if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;451                pq->OSQOut = pq->OSQStart;
;;;452            }
;;;453            OS_EXIT_CRITICAL();
;;;454            *perr = OS_ERR_NONE;
;;;455            return (pmsg);                           /* Return message received                            */
;;;456        }
;;;457        OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
;;;458        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;459        OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
;;;460        OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
;;;461        OS_EXIT_CRITICAL();
;;;462        OS_Sched();                                  /* Find next highest priority task ready to run       */
;;;463        OS_ENTER_CRITICAL();
;;;464        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;465            case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
;;;466                 pmsg =  OSTCBCur->OSTCBMsg;
;;;467                *perr =  OS_ERR_NONE;
;;;468                 break;
;;;469    
;;;470            case OS_STAT_PEND_ABORT:
;;;471                 pmsg = (void *)0;
;;;472                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;473                 break;
;;;474    
;;;475            case OS_STAT_PEND_TO:
;;;476            default:
;;;477                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;478                 pmsg = (void *)0;
;;;479                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;480                 break;
;;;481        }
;;;482        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;483        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;484        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;485    #if (OS_EVENT_MULTI_EN > 0u)
;;;486        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;487    #endif
;;;488        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;489        OS_EXIT_CRITICAL();
;;;490        return (pmsg);                                    /* Return received message                       */
;;;491    }
00024c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.592|
000250  4886              LDR      r0,|L1.1132|
000252  7800              LDRB     r0,[r0,#0]            ;437  ; OSIntNesting
000254  b128              CBZ      r0,|L1.610|
000256  f04f0002          MOV      r0,#2                 ;438
00025a  7028              STRB     r0,[r5,#0]            ;438
00025c  f04f0000          MOV      r0,#0                 ;439
000260  e7f4              B        |L1.588|
                  |L1.610|
000262  4886              LDR      r0,|L1.1148|
000264  7800              LDRB     r0,[r0,#0]            ;441  ; OSLockNesting
000266  b128              CBZ      r0,|L1.628|
000268  f04f000d          MOV      r0,#0xd               ;442
00026c  7028              STRB     r0,[r5,#0]            ;442
00026e  f04f0000          MOV      r0,#0                 ;443
000272  e7eb              B        |L1.588|
                  |L1.628|
000274  f7fffffe          BL       OS_CPU_SR_Save
000278  4681              MOV      r9,r0                 ;445
00027a  687c              LDR      r4,[r7,#4]            ;446
00027c  8ae0              LDRH     r0,[r4,#0x16]         ;447
00027e  b1b0              CBZ      r0,|L1.686|
000280  6921              LDR      r1,[r4,#0x10]         ;448
000282  f1010004          ADD      r0,r1,#4              ;448
000286  6120              STR      r0,[r4,#0x10]         ;448
000288  680e              LDR      r6,[r1,#0]            ;448
00028a  8ae0              LDRH     r0,[r4,#0x16]         ;449
00028c  f1a00001          SUB      r0,r0,#1              ;449
000290  82e0              STRH     r0,[r4,#0x16]         ;449
000292  68a1              LDR      r1,[r4,#8]            ;450
000294  6920              LDR      r0,[r4,#0x10]         ;450
000296  4288              CMP      r0,r1                 ;450
000298  d101              BNE      |L1.670|
00029a  6860              LDR      r0,[r4,#4]            ;451
00029c  6120              STR      r0,[r4,#0x10]         ;451
                  |L1.670|
00029e  4648              MOV      r0,r9                 ;453
0002a0  f7fffffe          BL       OS_CPU_SR_Restore
0002a4  f04f0000          MOV      r0,#0                 ;454
0002a8  7028              STRB     r0,[r5,#0]            ;454
0002aa  4630              MOV      r0,r6                 ;455
0002ac  e7ce              B        |L1.588|
                  |L1.686|
0002ae  4874              LDR      r0,|L1.1152|
0002b0  6800              LDR      r0,[r0,#0]            ;457  ; OSTCBCur
0002b2  f8900034          LDRB     r0,[r0,#0x34]         ;457
0002b6  f0400004          ORR      r0,r0,#4              ;457
0002ba  4971              LDR      r1,|L1.1152|
0002bc  6809              LDR      r1,[r1,#0]            ;457  ; OSTCBCur
0002be  f8810034          STRB     r0,[r1,#0x34]         ;457
0002c2  f04f0000          MOV      r0,#0                 ;458
0002c6  496e              LDR      r1,|L1.1152|
0002c8  6809              LDR      r1,[r1,#0]            ;458  ; OSTCBCur
0002ca  f8810035          STRB     r0,[r1,#0x35]         ;458
0002ce  486c              LDR      r0,|L1.1152|
0002d0  6800              LDR      r0,[r0,#0]            ;459  ; OSTCBCur
0002d2  f8c08030          STR      r8,[r0,#0x30]         ;459
0002d6  4638              MOV      r0,r7                 ;460
0002d8  f7fffffe          BL       OS_EventTaskWait
0002dc  4648              MOV      r0,r9                 ;461
0002de  f7fffffe          BL       OS_CPU_SR_Restore
0002e2  f7fffffe          BL       OS_Sched
0002e6  f7fffffe          BL       OS_CPU_SR_Save
0002ea  4681              MOV      r9,r0                 ;463
0002ec  4864              LDR      r0,|L1.1152|
0002ee  6800              LDR      r0,[r0,#0]            ;464  ; OSTCBCur
0002f0  f8900035          LDRB     r0,[r0,#0x35]         ;464
0002f4  b120              CBZ      r0,|L1.768|
0002f6  2801              CMP      r0,#1                 ;464
0002f8  d010              BEQ      |L1.796|
0002fa  2802              CMP      r0,#2                 ;464
0002fc  d10d              BNE      |L1.794|
0002fe  e006              B        |L1.782|
                  |L1.768|
000300  485f              LDR      r0,|L1.1152|
000302  6800              LDR      r0,[r0,#0]            ;466  ; OSTCBCur
000304  6a46              LDR      r6,[r0,#0x24]         ;466
000306  f04f0000          MOV      r0,#0                 ;467
00030a  7028              STRB     r0,[r5,#0]            ;467
00030c  e011              B        |L1.818|
                  |L1.782|
00030e  f04f0600          MOV      r6,#0                 ;471
000312  f04f000e          MOV      r0,#0xe               ;472
000316  7028              STRB     r0,[r5,#0]            ;472
000318  e00b              B        |L1.818|
                  |L1.794|
00031a  bf00              NOP                            ;475
                  |L1.796|
00031c  4639              MOV      r1,r7                 ;477
00031e  4858              LDR      r0,|L1.1152|
000320  6800              LDR      r0,[r0,#0]            ;477  ; OSTCBCur
000322  f7fffffe          BL       OS_EventTaskRemove
000326  f04f0600          MOV      r6,#0                 ;478
00032a  f04f000a          MOV      r0,#0xa               ;479
00032e  7028              STRB     r0,[r5,#0]            ;479
000330  bf00              NOP                            ;480
                  |L1.818|
000332  bf00              NOP                            ;468
000334  f04f0000          MOV      r0,#0                 ;482
000338  4951              LDR      r1,|L1.1152|
00033a  6809              LDR      r1,[r1,#0]            ;482  ; OSTCBCur
00033c  f8810034          STRB     r0,[r1,#0x34]         ;482
000340  494f              LDR      r1,|L1.1152|
000342  6809              LDR      r1,[r1,#0]            ;483  ; OSTCBCur
000344  f8810035          STRB     r0,[r1,#0x35]         ;483
000348  494d              LDR      r1,|L1.1152|
00034a  6809              LDR      r1,[r1,#0]            ;484  ; OSTCBCur
00034c  61c8              STR      r0,[r1,#0x1c]         ;484
00034e  494c              LDR      r1,|L1.1152|
000350  6809              LDR      r1,[r1,#0]            ;486  ; OSTCBCur
000352  6208              STR      r0,[r1,#0x20]         ;486
000354  494a              LDR      r1,|L1.1152|
000356  6809              LDR      r1,[r1,#0]            ;488  ; OSTCBCur
000358  6248              STR      r0,[r1,#0x24]         ;488
00035a  4648              MOV      r0,r9                 ;489
00035c  f7fffffe          BL       OS_CPU_SR_Restore
000360  4630              MOV      r0,r6                 ;490
000362  e773              B        |L1.588|
;;;492    /*$PAGE*/
                          ENDP

                  OSQPendAbort PROC
;;;525    #if OS_Q_PEND_ABORT_EN > 0u
;;;526    INT8U  OSQPendAbort (OS_EVENT  *pevent,
000364  e92d41f0          PUSH     {r4-r8,lr}
;;;527                         INT8U      opt,
;;;528                         INT8U     *perr)
;;;529    {
000368  4604              MOV      r4,r0
00036a  460f              MOV      r7,r1
00036c  4615              MOV      r5,r2
;;;530        INT8U      nbr_tasks;
;;;531    #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
;;;532        OS_CPU_SR  cpu_sr = 0u;
00036e  f04f0800          MOV      r8,#0
;;;533    #endif
;;;534    
;;;535    
;;;536    
;;;537    #ifdef OS_SAFETY_CRITICAL
;;;538        if (perr == (INT8U *)0) {
;;;539            OS_SAFETY_CRITICAL_EXCEPTION();
;;;540            return (0u);
;;;541        }
;;;542    #endif
;;;543    
;;;544    #if OS_ARG_CHK_EN > 0u
;;;545        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;546            *perr = OS_ERR_PEVENT_NULL;
;;;547            return (0u);
;;;548        }
;;;549    #endif
;;;550        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
000372  7820              LDRB     r0,[r4,#0]
000374  2802              CMP      r0,#2
000376  d006              BEQ      |L1.902|
;;;551            *perr = OS_ERR_EVENT_TYPE;
000378  f04f0001          MOV      r0,#1
00037c  7028              STRB     r0,[r5,#0]
;;;552            return (0u);
00037e  f04f0000          MOV      r0,#0
                  |L1.898|
;;;553        }
;;;554        OS_ENTER_CRITICAL();
;;;555        if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
;;;556            nbr_tasks = 0u;
;;;557            switch (opt) {
;;;558                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;559                     while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
;;;560                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;561                         nbr_tasks++;
;;;562                     }
;;;563                     break;
;;;564    
;;;565                case OS_PEND_OPT_NONE:
;;;566                default:                                       /* No,  ready HPT       waiting on queue    */
;;;567                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;568                     nbr_tasks++;
;;;569                     break;
;;;570            }
;;;571            OS_EXIT_CRITICAL();
;;;572            OS_Sched();                                        /* Find HPT ready to run                    */
;;;573            *perr = OS_ERR_PEND_ABORT;
;;;574            return (nbr_tasks);
;;;575        }
;;;576        OS_EXIT_CRITICAL();
;;;577        *perr = OS_ERR_NONE;
;;;578        return (0u);                                           /* No tasks waiting on queue                */
;;;579    }
000382  e8bd81f0          POP      {r4-r8,pc}
                  |L1.902|
000386  f7fffffe          BL       OS_CPU_SR_Save
00038a  4680              MOV      r8,r0                 ;554
00038c  7aa0              LDRB     r0,[r4,#0xa]          ;555
00038e  b340              CBZ      r0,|L1.994|
000390  f04f0600          MOV      r6,#0                 ;556
000394  b187              CBZ      r7,|L1.952|
000396  2f01              CMP      r7,#1                 ;557
000398  d10d              BNE      |L1.950|
00039a  e008              B        |L1.942|
                  |L1.924|
00039c  2302              MOVS     r3,#2                 ;560
00039e  2204              MOVS     r2,#4                 ;560
0003a0  2100              MOVS     r1,#0                 ;560
0003a2  4620              MOV      r0,r4                 ;560
0003a4  f7fffffe          BL       OS_EventTaskRdy
0003a8  f1060001          ADD      r0,r6,#1              ;561
0003ac  b2c6              UXTB     r6,r0                 ;561
                  |L1.942|
0003ae  7aa0              LDRB     r0,[r4,#0xa]          ;559
0003b0  2800              CMP      r0,#0                 ;559
0003b2  d1f3              BNE      |L1.924|
0003b4  e00a              B        |L1.972|
                  |L1.950|
0003b6  bf00              NOP                            ;565
                  |L1.952|
0003b8  2302              MOVS     r3,#2                 ;567
0003ba  2204              MOVS     r2,#4                 ;567
0003bc  2100              MOVS     r1,#0                 ;567
0003be  4620              MOV      r0,r4                 ;567
0003c0  f7fffffe          BL       OS_EventTaskRdy
0003c4  f1060001          ADD      r0,r6,#1              ;568
0003c8  b2c6              UXTB     r6,r0                 ;568
0003ca  bf00              NOP                            ;569
                  |L1.972|
0003cc  bf00              NOP                            ;563
0003ce  4640              MOV      r0,r8                 ;571
0003d0  f7fffffe          BL       OS_CPU_SR_Restore
0003d4  f7fffffe          BL       OS_Sched
0003d8  f04f000e          MOV      r0,#0xe               ;573
0003dc  7028              STRB     r0,[r5,#0]            ;573
0003de  4630              MOV      r0,r6                 ;574
0003e0  e7cf              B        |L1.898|
                  |L1.994|
0003e2  4640              MOV      r0,r8                 ;576
0003e4  f7fffffe          BL       OS_CPU_SR_Restore
0003e8  f04f0000          MOV      r0,#0                 ;577
0003ec  7028              STRB     r0,[r5,#0]            ;577
0003ee  bf00              NOP                            ;578
0003f0  e7c7              B        |L1.898|
;;;580    #endif
                          ENDP

                  OSQPost PROC
;;;602    #if OS_Q_POST_EN > 0u
;;;603    INT8U  OSQPost (OS_EVENT  *pevent,
0003f2  e92d41f0          PUSH     {r4-r8,lr}
;;;604                    void      *pmsg)
;;;605    {
0003f6  4605              MOV      r5,r0
0003f8  460e              MOV      r6,r1
;;;606        OS_Q      *pq;
;;;607    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;608        OS_CPU_SR  cpu_sr = 0u;
0003fa  f04f0700          MOV      r7,#0
;;;609    #endif
;;;610    
;;;611    
;;;612    
;;;613    #if OS_ARG_CHK_EN > 0u
;;;614        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;615            return (OS_ERR_PEVENT_NULL);
;;;616        }
;;;617    #endif
;;;618        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
0003fe  7828              LDRB     r0,[r5,#0]
000400  2802              CMP      r0,#2
000402  d002              BEQ      |L1.1034|
;;;619            return (OS_ERR_EVENT_TYPE);
000404  2001              MOVS     r0,#1
                  |L1.1030|
;;;620        }
;;;621        OS_ENTER_CRITICAL();
;;;622        if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
;;;623                                                           /* Ready highest priority task waiting on event */
;;;624            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;625            OS_EXIT_CRITICAL();
;;;626            OS_Sched();                                    /* Find highest priority task ready to run      */
;;;627            return (OS_ERR_NONE);
;;;628        }
;;;629        pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
;;;630        if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
;;;631            OS_EXIT_CRITICAL();
;;;632            return (OS_ERR_Q_FULL);
;;;633        }
;;;634        *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
;;;635        pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
;;;636        if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
;;;637            pq->OSQIn = pq->OSQStart;
;;;638        }
;;;639        OS_EXIT_CRITICAL();
;;;640        return (OS_ERR_NONE);
;;;641    }
000406  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1034|
00040a  f7fffffe          BL       OS_CPU_SR_Save
00040e  4607              MOV      r7,r0                 ;621
000410  7aa8              LDRB     r0,[r5,#0xa]          ;622
000412  b160              CBZ      r0,|L1.1070|
000414  2300              MOVS     r3,#0                 ;624
000416  2204              MOVS     r2,#4                 ;624
000418  4631              MOV      r1,r6                 ;624
00041a  4628              MOV      r0,r5                 ;624
00041c  f7fffffe          BL       OS_EventTaskRdy
000420  4638              MOV      r0,r7                 ;625
000422  f7fffffe          BL       OS_CPU_SR_Restore
000426  f7fffffe          BL       OS_Sched
00042a  2000              MOVS     r0,#0                 ;627
00042c  e7eb              B        |L1.1030|
                  |L1.1070|
00042e  686c              LDR      r4,[r5,#4]            ;629
000430  8ae0              LDRH     r0,[r4,#0x16]         ;630
000432  8aa1              LDRH     r1,[r4,#0x14]         ;630
000434  4288              CMP      r0,r1                 ;630
000436  db04              BLT      |L1.1090|
000438  4638              MOV      r0,r7                 ;631
00043a  f7fffffe          BL       OS_CPU_SR_Restore
00043e  201e              MOVS     r0,#0x1e              ;632
000440  e7e1              B        |L1.1030|
                  |L1.1090|
000442  68e1              LDR      r1,[r4,#0xc]          ;634
000444  f1010004          ADD      r0,r1,#4              ;634
000448  60e0              STR      r0,[r4,#0xc]          ;634
00044a  600e              STR      r6,[r1,#0]            ;634
00044c  8ae0              LDRH     r0,[r4,#0x16]         ;635
00044e  f1000001          ADD      r0,r0,#1              ;635
000452  82e0              STRH     r0,[r4,#0x16]         ;635
000454  e9d41002          LDRD     r1,r0,[r4,#8]         ;636
000458  4288              CMP      r0,r1                 ;636
00045a  d101              BNE      |L1.1120|
00045c  6860              LDR      r0,[r4,#4]            ;637
00045e  60e0              STR      r0,[r4,#0xc]          ;637
                  |L1.1120|
000460  4638              MOV      r0,r7                 ;639
000462  f7fffffe          BL       OS_CPU_SR_Restore
000466  2000              MOVS     r0,#0                 ;640
000468  e7cd              B        |L1.1030|
00046a  0000              DCW      0x0000
                  |L1.1132|
                          DCD      OSIntNesting
                  |L1.1136|
                          DCD      OSEventFreeList
                  |L1.1140|
                          DCD      OSQFreeList
                  |L1.1144|
000478  3f00              DCB      "?",0
00047a  00                DCB      0
00047b  00                DCB      0
                  |L1.1148|
                          DCD      OSLockNesting
                  |L1.1152|
                          DCD      OSTCBCur
                          ENDP

                  OSQPostFront PROC
;;;665    #if OS_Q_POST_FRONT_EN > 0u
;;;666    INT8U  OSQPostFront (OS_EVENT  *pevent,
000484  e92d41f0          PUSH     {r4-r8,lr}
;;;667                         void      *pmsg)
;;;668    {
000488  4605              MOV      r5,r0
00048a  460e              MOV      r6,r1
;;;669        OS_Q      *pq;
;;;670    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;671        OS_CPU_SR  cpu_sr = 0u;
00048c  f04f0700          MOV      r7,#0
;;;672    #endif
;;;673    
;;;674    
;;;675    
;;;676    #if OS_ARG_CHK_EN > 0u
;;;677        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;678            return (OS_ERR_PEVENT_NULL);
;;;679        }
;;;680    #endif
;;;681        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
000490  7828              LDRB     r0,[r5,#0]
000492  2802              CMP      r0,#2
000494  d002              BEQ      |L1.1180|
;;;682            return (OS_ERR_EVENT_TYPE);
000496  2001              MOVS     r0,#1
                  |L1.1176|
;;;683        }
;;;684        OS_ENTER_CRITICAL();
;;;685        if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
;;;686                                                          /* Ready highest priority task waiting on event  */
;;;687            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;688            OS_EXIT_CRITICAL();
;;;689            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;690            return (OS_ERR_NONE);
;;;691        }
;;;692        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;693        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;694            OS_EXIT_CRITICAL();
;;;695            return (OS_ERR_Q_FULL);
;;;696        }
;;;697        if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
;;;698            pq->OSQOut = pq->OSQEnd;
;;;699        }
;;;700        pq->OSQOut--;
;;;701        *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
;;;702        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;703        OS_EXIT_CRITICAL();
;;;704        return (OS_ERR_NONE);
;;;705    }
000498  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1180|
00049c  f7fffffe          BL       OS_CPU_SR_Save
0004a0  4607              MOV      r7,r0                 ;684
0004a2  7aa8              LDRB     r0,[r5,#0xa]          ;685
0004a4  b160              CBZ      r0,|L1.1216|
0004a6  2300              MOVS     r3,#0                 ;687
0004a8  2204              MOVS     r2,#4                 ;687
0004aa  4631              MOV      r1,r6                 ;687
0004ac  4628              MOV      r0,r5                 ;687
0004ae  f7fffffe          BL       OS_EventTaskRdy
0004b2  4638              MOV      r0,r7                 ;688
0004b4  f7fffffe          BL       OS_CPU_SR_Restore
0004b8  f7fffffe          BL       OS_Sched
0004bc  2000              MOVS     r0,#0                 ;690
0004be  e7eb              B        |L1.1176|
                  |L1.1216|
0004c0  686c              LDR      r4,[r5,#4]            ;692
0004c2  8ae0              LDRH     r0,[r4,#0x16]         ;693
0004c4  8aa1              LDRH     r1,[r4,#0x14]         ;693
0004c6  4288              CMP      r0,r1                 ;693
0004c8  db04              BLT      |L1.1236|
0004ca  4638              MOV      r0,r7                 ;694
0004cc  f7fffffe          BL       OS_CPU_SR_Restore
0004d0  201e              MOVS     r0,#0x1e              ;695
0004d2  e7e1              B        |L1.1176|
                  |L1.1236|
0004d4  6861              LDR      r1,[r4,#4]            ;697
0004d6  6920              LDR      r0,[r4,#0x10]         ;697
0004d8  4288              CMP      r0,r1                 ;697
0004da  d101              BNE      |L1.1248|
0004dc  68a0              LDR      r0,[r4,#8]            ;698
0004de  6120              STR      r0,[r4,#0x10]         ;698
                  |L1.1248|
0004e0  6920              LDR      r0,[r4,#0x10]         ;700
0004e2  f1a00004          SUB      r0,r0,#4              ;700
0004e6  6120              STR      r0,[r4,#0x10]         ;700
0004e8  6920              LDR      r0,[r4,#0x10]         ;701
0004ea  6006              STR      r6,[r0,#0]            ;701
0004ec  8ae0              LDRH     r0,[r4,#0x16]         ;702
0004ee  f1000001          ADD      r0,r0,#1              ;702
0004f2  82e0              STRH     r0,[r4,#0x16]         ;702
0004f4  4638              MOV      r0,r7                 ;703
0004f6  f7fffffe          BL       OS_CPU_SR_Restore
0004fa  2000              MOVS     r0,#0                 ;704
0004fc  e7cc              B        |L1.1176|
;;;706    #endif
                          ENDP

                  OSQPostOpt PROC
;;;737    #if OS_Q_POST_OPT_EN > 0u
;;;738    INT8U  OSQPostOpt (OS_EVENT  *pevent,
0004fe  e92d41f0          PUSH     {r4-r8,lr}
;;;739                       void      *pmsg,
;;;740                       INT8U      opt)
;;;741    {
000502  4605              MOV      r5,r0
000504  460f              MOV      r7,r1
000506  4616              MOV      r6,r2
;;;742        OS_Q      *pq;
;;;743    #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
;;;744        OS_CPU_SR  cpu_sr = 0u;
000508  f04f0800          MOV      r8,#0
;;;745    #endif
;;;746    
;;;747    
;;;748    
;;;749    #if OS_ARG_CHK_EN > 0u
;;;750        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;751            return (OS_ERR_PEVENT_NULL);
;;;752        }
;;;753    #endif
;;;754        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
00050c  7828              LDRB     r0,[r5,#0]
00050e  2802              CMP      r0,#2
000510  d002              BEQ      |L1.1304|
;;;755            return (OS_ERR_EVENT_TYPE);
000512  2001              MOVS     r0,#1
                  |L1.1300|
;;;756        }
;;;757        OS_ENTER_CRITICAL();
;;;758        if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
;;;759            if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
;;;760                while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
;;;761                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;762                }
;;;763            } else {                                      /* No,  Post to HPT waiting on queue             */
;;;764                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;765            }
;;;766            OS_EXIT_CRITICAL();
;;;767            if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
;;;768                OS_Sched();                               /* Find highest priority task ready to run       */
;;;769            }
;;;770            return (OS_ERR_NONE);
;;;771        }
;;;772        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;773        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;774            OS_EXIT_CRITICAL();
;;;775            return (OS_ERR_Q_FULL);
;;;776        }
;;;777        if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
;;;778            if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
;;;779                pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
;;;780            }
;;;781            pq->OSQOut--;
;;;782            *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
;;;783        } else {                                          /* No,  Post as FIFO                             */
;;;784            *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
;;;785            if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
;;;786                pq->OSQIn = pq->OSQStart;
;;;787            }
;;;788        }
;;;789        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;790        OS_EXIT_CRITICAL();
;;;791        return (OS_ERR_NONE);
;;;792    }
000514  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1304|
000518  f7fffffe          BL       OS_CPU_SR_Save
00051c  4680              MOV      r8,r0                 ;757
00051e  7aa8              LDRB     r0,[r5,#0xa]          ;758
000520  b1e8              CBZ      r0,|L1.1374|
000522  f0160f01          TST      r6,#1                 ;759
000526  d00a              BEQ      |L1.1342|
000528  e005              B        |L1.1334|
                  |L1.1322|
00052a  2300              MOVS     r3,#0                 ;761
00052c  2204              MOVS     r2,#4                 ;761
00052e  4639              MOV      r1,r7                 ;761
000530  4628              MOV      r0,r5                 ;761
000532  f7fffffe          BL       OS_EventTaskRdy
                  |L1.1334|
000536  7aa8              LDRB     r0,[r5,#0xa]          ;760
000538  2800              CMP      r0,#0                 ;760
00053a  d1f6              BNE      |L1.1322|
00053c  e005              B        |L1.1354|
                  |L1.1342|
00053e  2300              MOVS     r3,#0                 ;764
000540  2204              MOVS     r2,#4                 ;764
000542  4639              MOV      r1,r7                 ;764
000544  4628              MOV      r0,r5                 ;764
000546  f7fffffe          BL       OS_EventTaskRdy
                  |L1.1354|
00054a  4640              MOV      r0,r8                 ;766
00054c  f7fffffe          BL       OS_CPU_SR_Restore
000550  f0160f04          TST      r6,#4                 ;767
000554  d101              BNE      |L1.1370|
000556  f7fffffe          BL       OS_Sched
                  |L1.1370|
00055a  2000              MOVS     r0,#0                 ;770
00055c  e7da              B        |L1.1300|
                  |L1.1374|
00055e  686c              LDR      r4,[r5,#4]            ;772
000560  8ae0              LDRH     r0,[r4,#0x16]         ;773
000562  8aa1              LDRH     r1,[r4,#0x14]         ;773
000564  4288              CMP      r0,r1                 ;773
000566  db04              BLT      |L1.1394|
000568  4640              MOV      r0,r8                 ;774
00056a  f7fffffe          BL       OS_CPU_SR_Restore
00056e  201e              MOVS     r0,#0x1e              ;775
000570  e7d0              B        |L1.1300|
                  |L1.1394|
000572  f0160f02          TST      r6,#2                 ;777
000576  d00c              BEQ      |L1.1426|
000578  6861              LDR      r1,[r4,#4]            ;778
00057a  6920              LDR      r0,[r4,#0x10]         ;778
00057c  4288              CMP      r0,r1                 ;778
00057e  d101              BNE      |L1.1412|
000580  68a0              LDR      r0,[r4,#8]            ;779
000582  6120              STR      r0,[r4,#0x10]         ;779
                  |L1.1412|
000584  6920              LDR      r0,[r4,#0x10]         ;781
000586  f1a00004          SUB      r0,r0,#4              ;781
00058a  6120              STR      r0,[r4,#0x10]         ;781
00058c  6920              LDR      r0,[r4,#0x10]         ;782
00058e  6007              STR      r7,[r0,#0]            ;782
000590  e00a              B        |L1.1448|
                  |L1.1426|
000592  68e1              LDR      r1,[r4,#0xc]          ;784
000594  f1010004          ADD      r0,r1,#4              ;784
000598  60e0              STR      r0,[r4,#0xc]          ;784
00059a  600f              STR      r7,[r1,#0]            ;784
00059c  e9d41002          LDRD     r1,r0,[r4,#8]         ;785
0005a0  4288              CMP      r0,r1                 ;785
0005a2  d101              BNE      |L1.1448|
0005a4  6860              LDR      r0,[r4,#4]            ;786
0005a6  60e0              STR      r0,[r4,#0xc]          ;786
                  |L1.1448|
0005a8  8ae0              LDRH     r0,[r4,#0x16]         ;789
0005aa  f1000001          ADD      r0,r0,#1              ;789
0005ae  82e0              STRH     r0,[r4,#0x16]         ;789
0005b0  4640              MOV      r0,r8                 ;790
0005b2  f7fffffe          BL       OS_CPU_SR_Restore
0005b6  2000              MOVS     r0,#0                 ;791
0005b8  e7ac              B        |L1.1300|
;;;793    #endif
                          ENDP

                  OSQQuery PROC
;;;813    #if OS_Q_QUERY_EN > 0u
;;;814    INT8U  OSQQuery (OS_EVENT  *pevent,
0005ba  e92d47f0          PUSH     {r4-r10,lr}
;;;815                     OS_Q_DATA *p_q_data)
;;;816    {
0005be  4605              MOV      r5,r0
0005c0  460c              MOV      r4,r1
;;;817        OS_Q       *pq;
;;;818        INT8U       i;
;;;819        OS_PRIO    *psrc;
;;;820        OS_PRIO    *pdest;
;;;821    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;822        OS_CPU_SR   cpu_sr = 0u;
0005c2  f04f0a00          MOV      r10,#0
;;;823    #endif
;;;824    
;;;825    
;;;826    
;;;827    #if OS_ARG_CHK_EN > 0u
;;;828        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;829            return (OS_ERR_PEVENT_NULL);
;;;830        }
;;;831        if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
;;;832            return (OS_ERR_PDATA_NULL);
;;;833        }
;;;834    #endif
;;;835        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
0005c6  7828              LDRB     r0,[r5,#0]
0005c8  2802              CMP      r0,#2
0005ca  d002              BEQ      |L1.1490|
;;;836            return (OS_ERR_EVENT_TYPE);
0005cc  2001              MOVS     r0,#1
                  |L1.1486|
;;;837        }
;;;838        OS_ENTER_CRITICAL();
;;;839        p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
;;;840        psrc                 = &pevent->OSEventTbl[0];
;;;841        pdest                = &p_q_data->OSEventTbl[0];
;;;842        for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
;;;843            *pdest++ = *psrc++;
;;;844        }
;;;845        pq = (OS_Q *)pevent->OSEventPtr;
;;;846        if (pq->OSQEntries > 0u) {
;;;847            p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
;;;848        } else {
;;;849            p_q_data->OSMsg = (void *)0;
;;;850        }
;;;851        p_q_data->OSNMsgs = pq->OSQEntries;
;;;852        p_q_data->OSQSize = pq->OSQSize;
;;;853        OS_EXIT_CRITICAL();
;;;854        return (OS_ERR_NONE);
;;;855    }
0005ce  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1490|
0005d2  f7fffffe          BL       OS_CPU_SR_Save
0005d6  4682              MOV      r10,r0                ;838
0005d8  7aa8              LDRB     r0,[r5,#0xa]          ;839
0005da  7420              STRB     r0,[r4,#0x10]         ;839
0005dc  f105080b          ADD      r8,r5,#0xb            ;840
0005e0  f1040908          ADD      r9,r4,#8              ;841
0005e4  f04f0700          MOV      r7,#0                 ;842
0005e8  e006              B        |L1.1528|
                  |L1.1514|
0005ea  f8180b01          LDRB     r0,[r8],#1            ;843
0005ee  f8090b01          STRB     r0,[r9],#1            ;843
0005f2  f1070001          ADD      r0,r7,#1              ;842
0005f6  b2c7              UXTB     r7,r0                 ;842
                  |L1.1528|
0005f8  2f08              CMP      r7,#8                 ;842
0005fa  d3f6              BCC      |L1.1514|
0005fc  686e              LDR      r6,[r5,#4]            ;845
0005fe  8af0              LDRH     r0,[r6,#0x16]         ;846
000600  b118              CBZ      r0,|L1.1546|
000602  6930              LDR      r0,[r6,#0x10]         ;847
000604  6800              LDR      r0,[r0,#0]            ;847
000606  6020              STR      r0,[r4,#0]            ;847
000608  e002              B        |L1.1552|
                  |L1.1546|
00060a  f04f0000          MOV      r0,#0                 ;849
00060e  6020              STR      r0,[r4,#0]            ;849
                  |L1.1552|
000610  8af0              LDRH     r0,[r6,#0x16]         ;851
000612  80a0              STRH     r0,[r4,#4]            ;851
000614  8ab0              LDRH     r0,[r6,#0x14]         ;852
000616  80e0              STRH     r0,[r4,#6]            ;852
000618  4650              MOV      r0,r10                ;853
00061a  f7fffffe          BL       OS_CPU_SR_Restore
00061e  2000              MOVS     r0,#0                 ;854
000620  e7d5              B        |L1.1486|
;;;856    #endif                                                 /* OS_Q_QUERY_EN                                */
                          ENDP

                  OS_QInit PROC
;;;873    
;;;874    void  OS_QInit (void)
000622  e92d41f0          PUSH     {r4-r8,lr}
;;;875    {
;;;876    #if OS_MAX_QS == 1u
;;;877        OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                                */
;;;878        OSQFreeList->OSQPtr = (OS_Q *)0;
;;;879    #endif
;;;880    
;;;881    #if OS_MAX_QS >= 2u
;;;882        INT16U   ix;
;;;883        INT16U   ix_next;
;;;884        OS_Q    *pq1;
;;;885        OS_Q    *pq2;
;;;886    
;;;887    
;;;888    
;;;889        OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
000626  2160              MOVS     r1,#0x60
000628  4812              LDR      r0,|L1.1652|
00062a  f7fffffe          BL       OS_MemClr
;;;890        for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
00062e  f04f0400          MOV      r4,#0
000632  e00f              B        |L1.1620|
                  |L1.1588|
;;;891            ix_next = ix + 1u;
000634  f1040001          ADD      r0,r4,#1
000638  b286              UXTH     r6,r0
;;;892            pq1 = &OSQTbl[ix];
00063a  eb040044          ADD      r0,r4,r4,LSL #1
00063e  490d              LDR      r1,|L1.1652|
000640  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;893            pq2 = &OSQTbl[ix_next];
000644  eb060046          ADD      r0,r6,r6,LSL #1
000648  eb0107c0          ADD      r7,r1,r0,LSL #3
;;;894            pq1->OSQPtr = pq2;
00064c  602f              STR      r7,[r5,#0]
00064e  f1040001          ADD      r0,r4,#1              ;890
000652  b284              UXTH     r4,r0                 ;890
                  |L1.1620|
000654  2c03              CMP      r4,#3                 ;890
000656  d3ed              BCC      |L1.1588|
;;;895        }
;;;896        pq1         = &OSQTbl[ix];
000658  eb040044          ADD      r0,r4,r4,LSL #1
00065c  4905              LDR      r1,|L1.1652|
00065e  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;897        pq1->OSQPtr = (OS_Q *)0;
000662  f04f0000          MOV      r0,#0
000666  6028              STR      r0,[r5,#0]
;;;898        OSQFreeList = &OSQTbl[0];
000668  4608              MOV      r0,r1
00066a  4903              LDR      r1,|L1.1656|
00066c  6008              STR      r0,[r1,#0]  ; OSQFreeList
;;;899    #endif
;;;900    }
00066e  e8bd81f0          POP      {r4-r8,pc}
;;;901    #endif                                               /* OS_Q_EN                                        */
                          ENDP

000672  0000              DCW      0x0000
                  |L1.1652|
                          DCD      OSQTbl
                  |L1.1656|
                          DCD      OSQFreeList
