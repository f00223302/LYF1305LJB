; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Output\os_task.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\Output\os_task.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\BSP -I..\BSP\UCOS-II -I..\BSP\STM32F2xx\inc -I..\BSP\CMSIS -I..\BSP\CMSIS\Device_Support -I..\BSP\UCOS-II -I..\..\uC-CPU -I..\..\uC-CPU\ARM-Cortex-M3 -I..\..\uC-LIB -I..\..\uC-LIB\Ports\ARM-Cortex-M3 -I..\..\uCOS-II\Source -I..\..\uCOS-II\Ports\ARM-Cortex-M3 -I..\App -I..\Prj -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DDEBUG -DLJB_CPU_MAIN -DUSE_CPU_F205RC --omf_browse=.\Output\os_task.crf ..\..\uCOS-II\Source\os_task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;52     #if OS_TASK_CHANGE_PRIO_EN > 0u
;;;53     INT8U  OSTaskChangePrio (INT8U  oldprio,
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;54                              INT8U  newprio)
;;;55     {
000004  b085              SUB      sp,sp,#0x14
000006  4688              MOV      r8,r1
;;;56     #if (OS_EVENT_EN)
;;;57         OS_EVENT  *pevent;
;;;58     #if (OS_EVENT_MULTI_EN > 0u)
;;;59         OS_EVENT **pevents;
;;;60     #endif
;;;61     #endif
;;;62         OS_TCB    *ptcb;
;;;63         INT8U      y_new;
;;;64         INT8U      x_new;
;;;65         INT8U      y_old;
;;;66         OS_PRIO    bity_new;
;;;67         OS_PRIO    bitx_new;
;;;68         OS_PRIO    bity_old;
;;;69         OS_PRIO    bitx_old;
;;;70     #if OS_CRITICAL_METHOD == 3u
;;;71         OS_CPU_SR  cpu_sr = 0u;                                 /* Storage for CPU status register         */
000008  f04f0000          MOV      r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;72     #endif
;;;73     
;;;74     
;;;75     /*$PAGE*/
;;;76     #if OS_ARG_CHK_EN > 0u
;;;77         if (oldprio >= OS_LOWEST_PRIO) {
;;;78             if (oldprio != OS_PRIO_SELF) {
;;;79                 return (OS_ERR_PRIO_INVALID);
;;;80             }
;;;81         }
;;;82         if (newprio >= OS_LOWEST_PRIO) {
;;;83             return (OS_ERR_PRIO_INVALID);
;;;84         }
;;;85     #endif
;;;86         OS_ENTER_CRITICAL();
00000e  f7fffffe          BL       OS_CPU_SR_Save
000012  9001              STR      r0,[sp,#4]
;;;87         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
000014  48fe              LDR      r0,|L1.1040|
000016  f8500028          LDR      r0,[r0,r8,LSL #2]
00001a  b130              CBZ      r0,|L1.42|
;;;88             OS_EXIT_CRITICAL();
00001c  9801              LDR      r0,[sp,#4]
00001e  f7fffffe          BL       OS_CPU_SR_Restore
;;;89             return (OS_ERR_PRIO_EXIST);
000022  2028              MOVS     r0,#0x28
                  |L1.36|
;;;90         }
;;;91         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;92             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;93         }
;;;94         ptcb = OSTCBPrioTbl[oldprio];
;;;95         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;96             OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;97             return (OS_ERR_PRIO);
;;;98         }
;;;99         if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;100            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;101            return (OS_ERR_TASK_NOT_EXIST);
;;;102        }
;;;103    #if OS_LOWEST_PRIO <= 63u
;;;104        y_new                 = (INT8U)(newprio >> 3u);         /* Yes, compute new TCB fields             */
;;;105        x_new                 = (INT8U)(newprio & 0x07u);
;;;106    #else
;;;107        y_new                 = (INT8U)((INT8U)(newprio >> 4u) & 0x0Fu);
;;;108        x_new                 = (INT8U)(newprio & 0x0Fu);
;;;109    #endif
;;;110        bity_new              = (OS_PRIO)(1uL << y_new);
;;;111        bitx_new              = (OS_PRIO)(1uL << x_new);
;;;112    
;;;113        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;114        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;115        y_old                 =  ptcb->OSTCBY;
;;;116        bity_old              =  ptcb->OSTCBBitY;
;;;117        bitx_old              =  ptcb->OSTCBBitX;
;;;118        if ((OSRdyTbl[y_old] &   bitx_old) != 0u) {             /* If task is ready make it not            */
;;;119             OSRdyTbl[y_old] &= (OS_PRIO)~bitx_old;
;;;120             if (OSRdyTbl[y_old] == 0u) {
;;;121                 OSRdyGrp &= (OS_PRIO)~bity_old;
;;;122             }
;;;123             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;124             OSRdyTbl[y_new] |= bitx_new;
;;;125        }
;;;126    
;;;127    #if (OS_EVENT_EN)
;;;128        pevent = ptcb->OSTCBEventPtr;
;;;129        if (pevent != (OS_EVENT *)0) {
;;;130            pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;    /* Remove old task prio from wait list     */
;;;131            if (pevent->OSEventTbl[y_old] == 0u) {
;;;132                pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
;;;133            }
;;;134            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;135            pevent->OSEventTbl[y_new] |= bitx_new;
;;;136        }
;;;137    #if (OS_EVENT_MULTI_EN > 0u)
;;;138        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;139            pevents =  ptcb->OSTCBEventMultiPtr;
;;;140            pevent  = *pevents;
;;;141            while (pevent != (OS_EVENT *)0) {
;;;142                pevent->OSEventTbl[y_old] &= (OS_PRIO)~bitx_old;   /* Remove old task prio from wait lists */
;;;143                if (pevent->OSEventTbl[y_old] == 0u) {
;;;144                    pevent->OSEventGrp    &= (OS_PRIO)~bity_old;
;;;145                }
;;;146                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;147                pevent->OSEventTbl[y_new] |= bitx_new;
;;;148                pevents++;
;;;149                pevent                     = *pevents;
;;;150            }
;;;151        }
;;;152    #endif
;;;153    #endif
;;;154    
;;;155        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;156        ptcb->OSTCBY    = y_new;
;;;157        ptcb->OSTCBX    = x_new;
;;;158        ptcb->OSTCBBitY = bity_new;
;;;159        ptcb->OSTCBBitX = bitx_new;
;;;160        OS_EXIT_CRITICAL();
;;;161        if (OSRunning == OS_TRUE) {
;;;162            OS_Sched();                                         /* Find new highest priority task          */
;;;163        }
;;;164        return (OS_ERR_NONE);
;;;165    }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.42|
00002a  9805              LDR      r0,[sp,#0x14]         ;91
00002c  28ff              CMP      r0,#0xff              ;91
00002e  d104              BNE      |L1.58|
000030  48f8              LDR      r0,|L1.1044|
000032  6800              LDR      r0,[r0,#0]            ;92  ; OSTCBCur
000034  f8900036          LDRB     r0,[r0,#0x36]         ;92
000038  9005              STR      r0,[sp,#0x14]         ;92
                  |L1.58|
00003a  49f5              LDR      r1,|L1.1040|
00003c  9805              LDR      r0,[sp,#0x14]         ;94
00003e  f8515020          LDR      r5,[r1,r0,LSL #2]     ;94
000042  b925              CBNZ     r5,|L1.78|
000044  9801              LDR      r0,[sp,#4]            ;96
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  2029              MOVS     r0,#0x29              ;97
00004c  e7ea              B        |L1.36|
                  |L1.78|
00004e  2d01              CMP      r5,#1                 ;99
000050  d104              BNE      |L1.92|
000052  9801              LDR      r0,[sp,#4]            ;100
000054  f7fffffe          BL       OS_CPU_SR_Restore
000058  2043              MOVS     r0,#0x43              ;101
00005a  e7e3              B        |L1.36|
                  |L1.92|
00005c  ea4f07e8          ASR      r7,r8,#3              ;104
000060  f0080007          AND      r0,r8,#7              ;105
000064  9003              STR      r0,[sp,#0xc]          ;105
000066  f04f0001          MOV      r0,#1                 ;110
00006a  fa00f007          LSL      r0,r0,r7              ;110
00006e  f00009ff          AND      r9,r0,#0xff           ;110
000072  f04f0101          MOV      r1,#1                 ;111
000076  9803              LDR      r0,[sp,#0xc]          ;111
000078  fa01f100          LSL      r1,r1,r0              ;111
00007c  f0010aff          AND      r10,r1,#0xff          ;111
000080  f04f0100          MOV      r1,#0                 ;113
000084  4ae2              LDR      r2,|L1.1040|
000086  9805              LDR      r0,[sp,#0x14]         ;113
000088  f8421020          STR      r1,[r2,r0,LSL #2]     ;113
00008c  4610              MOV      r0,r2                 ;114
00008e  f8405028          STR      r5,[r0,r8,LSL #2]     ;114
000092  f8956038          LDRB     r6,[r5,#0x38]         ;115
000096  f895003a          LDRB     r0,[r5,#0x3a]         ;116
00009a  9002              STR      r0,[sp,#8]            ;116
00009c  f895b039          LDRB     r11,[r5,#0x39]        ;117
0000a0  48dd              LDR      r0,|L1.1048|
0000a2  5d80              LDRB     r0,[r0,r6]            ;118
0000a4  ea100f0b          TST      r0,r11                ;118
0000a8  d021              BEQ      |L1.238|
0000aa  48db              LDR      r0,|L1.1048|
0000ac  5d80              LDRB     r0,[r0,r6]            ;119
0000ae  ea6f010b          MVN      r1,r11                ;119
0000b2  b2c9              UXTB     r1,r1                 ;119
0000b4  ea000001          AND      r0,r0,r1              ;119
0000b8  49d7              LDR      r1,|L1.1048|
0000ba  5588              STRB     r0,[r1,r6]            ;119
0000bc  4608              MOV      r0,r1                 ;120
0000be  5d80              LDRB     r0,[r0,r6]            ;120
0000c0  b948              CBNZ     r0,|L1.214|
0000c2  48d6              LDR      r0,|L1.1052|
0000c4  7800              LDRB     r0,[r0,#0]            ;121  ; OSRdyGrp
0000c6  9902              LDR      r1,[sp,#8]            ;121
0000c8  ea6f0101          MVN      r1,r1                 ;121
0000cc  b2c9              UXTB     r1,r1                 ;121
0000ce  ea000001          AND      r0,r0,r1              ;121
0000d2  49d2              LDR      r1,|L1.1052|
0000d4  7008              STRB     r0,[r1,#0]            ;121
                  |L1.214|
0000d6  48d1              LDR      r0,|L1.1052|
0000d8  7800              LDRB     r0,[r0,#0]            ;123  ; OSRdyGrp
0000da  ea400009          ORR      r0,r0,r9              ;123
0000de  49cf              LDR      r1,|L1.1052|
0000e0  7008              STRB     r0,[r1,#0]            ;123
0000e2  48cd              LDR      r0,|L1.1048|
0000e4  5dc0              LDRB     r0,[r0,r7]            ;124
0000e6  ea40000a          ORR      r0,r0,r10             ;124
0000ea  49cb              LDR      r1,|L1.1048|
0000ec  55c8              STRB     r0,[r1,r7]            ;124
                  |L1.238|
0000ee  69ec              LDR      r4,[r5,#0x1c]         ;128
0000f0  b30c              CBZ      r4,|L1.310|
0000f2  f104000b          ADD      r0,r4,#0xb            ;130
0000f6  5d80              LDRB     r0,[r0,r6]            ;130
0000f8  ea6f010b          MVN      r1,r11                ;130
0000fc  b2c9              UXTB     r1,r1                 ;130
0000fe  ea000001          AND      r0,r0,r1              ;130
000102  f104010b          ADD      r1,r4,#0xb            ;130
000106  5588              STRB     r0,[r1,r6]            ;130
000108  4608              MOV      r0,r1                 ;131
00010a  5d80              LDRB     r0,[r0,r6]            ;131
00010c  b938              CBNZ     r0,|L1.286|
00010e  7aa0              LDRB     r0,[r4,#0xa]          ;132
000110  9902              LDR      r1,[sp,#8]            ;132
000112  ea6f0101          MVN      r1,r1                 ;132
000116  b2c9              UXTB     r1,r1                 ;132
000118  ea000001          AND      r0,r0,r1              ;132
00011c  72a0              STRB     r0,[r4,#0xa]          ;132
                  |L1.286|
00011e  7aa0              LDRB     r0,[r4,#0xa]          ;134
000120  ea400009          ORR      r0,r0,r9              ;134
000124  72a0              STRB     r0,[r4,#0xa]          ;134
000126  f104000b          ADD      r0,r4,#0xb            ;135
00012a  5dc0              LDRB     r0,[r0,r7]            ;135
00012c  ea40000a          ORR      r0,r0,r10             ;135
000130  f104010b          ADD      r1,r4,#0xb            ;135
000134  55c8              STRB     r0,[r1,r7]            ;135
                  |L1.310|
000136  6a28              LDR      r0,[r5,#0x20]         ;138
000138  b370              CBZ      r0,|L1.408|
00013a  6a28              LDR      r0,[r5,#0x20]         ;139
00013c  9004              STR      r0,[sp,#0x10]         ;139
00013e  9804              LDR      r0,[sp,#0x10]         ;140
000140  6804              LDR      r4,[r0,#0]            ;140
000142  e027              B        |L1.404|
                  |L1.324|
000144  f104000b          ADD      r0,r4,#0xb            ;142
000148  5d80              LDRB     r0,[r0,r6]            ;142
00014a  ea6f010b          MVN      r1,r11                ;142
00014e  b2c9              UXTB     r1,r1                 ;142
000150  ea000001          AND      r0,r0,r1              ;142
000154  f104010b          ADD      r1,r4,#0xb            ;142
000158  5588              STRB     r0,[r1,r6]            ;142
00015a  4608              MOV      r0,r1                 ;143
00015c  5d80              LDRB     r0,[r0,r6]            ;143
00015e  b938              CBNZ     r0,|L1.368|
000160  7aa0              LDRB     r0,[r4,#0xa]          ;144
000162  9902              LDR      r1,[sp,#8]            ;144
000164  ea6f0101          MVN      r1,r1                 ;144
000168  b2c9              UXTB     r1,r1                 ;144
00016a  ea000001          AND      r0,r0,r1              ;144
00016e  72a0              STRB     r0,[r4,#0xa]          ;144
                  |L1.368|
000170  7aa0              LDRB     r0,[r4,#0xa]          ;146
000172  ea400009          ORR      r0,r0,r9              ;146
000176  72a0              STRB     r0,[r4,#0xa]          ;146
000178  f104000b          ADD      r0,r4,#0xb            ;147
00017c  5dc0              LDRB     r0,[r0,r7]            ;147
00017e  ea40000a          ORR      r0,r0,r10             ;147
000182  f104010b          ADD      r1,r4,#0xb            ;147
000186  55c8              STRB     r0,[r1,r7]            ;147
000188  9804              LDR      r0,[sp,#0x10]         ;148
00018a  f1000004          ADD      r0,r0,#4              ;148
00018e  9004              STR      r0,[sp,#0x10]         ;148
000190  9804              LDR      r0,[sp,#0x10]         ;149
000192  6804              LDR      r4,[r0,#0]            ;149
                  |L1.404|
000194  2c00              CMP      r4,#0                 ;141
000196  d1d5              BNE      |L1.324|
                  |L1.408|
000198  f8858036          STRB     r8,[r5,#0x36]         ;155
00019c  f8857038          STRB     r7,[r5,#0x38]         ;156
0001a0  9803              LDR      r0,[sp,#0xc]          ;157
0001a2  f8850037          STRB     r0,[r5,#0x37]         ;157
0001a6  f885903a          STRB     r9,[r5,#0x3a]         ;158
0001aa  f885a039          STRB     r10,[r5,#0x39]        ;159
0001ae  9801              LDR      r0,[sp,#4]            ;160
0001b0  f7fffffe          BL       OS_CPU_SR_Restore
0001b4  489a              LDR      r0,|L1.1056|
0001b6  7800              LDRB     r0,[r0,#0]            ;161  ; OSRunning
0001b8  2801              CMP      r0,#1                 ;161
0001ba  d101              BNE      |L1.448|
0001bc  f7fffffe          BL       OS_Sched
                  |L1.448|
0001c0  2000              MOVS     r0,#0                 ;164
0001c2  e72f              B        |L1.36|
;;;166    #endif
                          ENDP

                  OSTaskCreate PROC
;;;210    #if OS_TASK_CREATE_EN > 0u
;;;211    INT8U  OSTaskCreate (void   (*task)(void *p_arg),
0001c4  e92d4ffe          PUSH     {r1-r11,lr}
;;;212                         void    *p_arg,
;;;213                         OS_STK  *ptos,
;;;214                         INT8U    prio)
;;;215    {
0001c8  4606              MOV      r6,r0
0001ca  460f              MOV      r7,r1
0001cc  4690              MOV      r8,r2
0001ce  461c              MOV      r4,r3
;;;216        OS_STK     *psp;
;;;217        INT8U       err;
;;;218    #if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
;;;219        OS_CPU_SR   cpu_sr = 0u;
0001d0  f04f0900          MOV      r9,#0
;;;220    #endif
;;;221    
;;;222    
;;;223    
;;;224    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;225        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;226            OS_SAFETY_CRITICAL_EXCEPTION();
;;;227            return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
;;;228        }
;;;229    #endif
;;;230    
;;;231    #if OS_ARG_CHK_EN > 0u
;;;232        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;233            return (OS_ERR_PRIO_INVALID);
;;;234        }
;;;235    #endif
;;;236        OS_ENTER_CRITICAL();
0001d4  f7fffffe          BL       OS_CPU_SR_Save
0001d8  4681              MOV      r9,r0
;;;237        if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
0001da  4892              LDR      r0,|L1.1060|
0001dc  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0001de  b128              CBZ      r0,|L1.492|
;;;238            OS_EXIT_CRITICAL();
0001e0  4648              MOV      r0,r9
0001e2  f7fffffe          BL       OS_CPU_SR_Restore
;;;239            return (OS_ERR_TASK_CREATE_ISR);
0001e6  203c              MOVS     r0,#0x3c
                  |L1.488|
;;;240        }
;;;241        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;242            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;243                                                 /* ... the same thing until task is created.              */
;;;244            OS_EXIT_CRITICAL();
;;;245            psp = OSTaskStkInit(task, p_arg, ptos, 0u);             /* Initialize the task's stack         */
;;;246            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0u, 0u, (void *)0, 0u);
;;;247            if (err == OS_ERR_NONE) {
;;;248                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;249                    OS_Sched();
;;;250                }
;;;251            } else {
;;;252                OS_ENTER_CRITICAL();
;;;253                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;254                OS_EXIT_CRITICAL();
;;;255            }
;;;256            return (err);
;;;257        }
;;;258        OS_EXIT_CRITICAL();
;;;259        return (OS_ERR_PRIO_EXIST);
;;;260    }
0001e8  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.492|
0001ec  4888              LDR      r0,|L1.1040|
0001ee  f8500024          LDR      r0,[r0,r4,LSL #2]     ;241
0001f2  bb78              CBNZ     r0,|L1.596|
0001f4  f04f0001          MOV      r0,#1                 ;242
0001f8  4985              LDR      r1,|L1.1040|
0001fa  f8410024          STR      r0,[r1,r4,LSL #2]     ;242
0001fe  4648              MOV      r0,r9                 ;244
000200  f7fffffe          BL       OS_CPU_SR_Restore
000204  2300              MOVS     r3,#0                 ;245
000206  4642              MOV      r2,r8                 ;245
000208  4639              MOV      r1,r7                 ;245
00020a  4630              MOV      r0,r6                 ;245
00020c  f7fffffe          BL       OSTaskStkInit
000210  4682              MOV      r10,r0                ;245
000212  f04f0000          MOV      r0,#0                 ;246
000216  9000              STR      r0,[sp,#0]            ;246
000218  9001              STR      r0,[sp,#4]            ;246
00021a  4603              MOV      r3,r0                 ;246
00021c  4602              MOV      r2,r0                 ;246
00021e  4651              MOV      r1,r10                ;246
000220  9002              STR      r0,[sp,#8]            ;246
000222  4620              MOV      r0,r4                 ;246
000224  f7fffffe          BL       OS_TCBInit
000228  4605              MOV      r5,r0                 ;246
00022a  b935              CBNZ     r5,|L1.570|
00022c  487c              LDR      r0,|L1.1056|
00022e  7800              LDRB     r0,[r0,#0]            ;248  ; OSRunning
000230  2801              CMP      r0,#1                 ;248
000232  d10d              BNE      |L1.592|
000234  f7fffffe          BL       OS_Sched
000238  e00a              B        |L1.592|
                  |L1.570|
00023a  f7fffffe          BL       OS_CPU_SR_Save
00023e  4681              MOV      r9,r0                 ;252
000240  f04f0000          MOV      r0,#0                 ;253
000244  4972              LDR      r1,|L1.1040|
000246  f8410024          STR      r0,[r1,r4,LSL #2]     ;253
00024a  4648              MOV      r0,r9                 ;254
00024c  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.592|
000250  4628              MOV      r0,r5                 ;256
000252  e7c9              B        |L1.488|
                  |L1.596|
000254  e7ff              B        |L1.598|
                  |L1.598|
000256  4648              MOV      r0,r9                 ;258
000258  f7fffffe          BL       OS_CPU_SR_Restore
00025c  2028              MOVS     r0,#0x28              ;259
00025e  e7c3              B        |L1.488|
;;;261    #endif
                          ENDP

                  OS_TaskStkClr PROC
;;;1314   #if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
;;;1315   void  OS_TaskStkClr (OS_STK  *pbos,
000260  f0120f01          TST      r2,#1
;;;1316                        INT32U   size,
;;;1317                        INT16U   opt)
;;;1318   {
;;;1319       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
000264  d00a              BEQ      |L1.636|
;;;1320           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
000266  f0120f02          TST      r2,#2
00026a  d007              BEQ      |L1.636|
;;;1321   #if OS_STK_GROWTH == 1u
;;;1322               while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
00026c  e004              B        |L1.632|
                  |L1.622|
;;;1323                   size--;
00026e  f1a10101          SUB      r1,r1,#1
;;;1324                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
000272  f04f0300          MOV      r3,#0
000276  c008              STM      r0!,{r3}
                  |L1.632|
000278  2900              CMP      r1,#0                 ;1322
00027a  d1f8              BNE      |L1.622|
                  |L1.636|
;;;1325               }
;;;1326   #else
;;;1327               while (size > 0u) {                        /* Stack grows from LOW to HIGH memory          */
;;;1328                   size--;
;;;1329                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1330               }
;;;1331   #endif
;;;1332           }
;;;1333       }
;;;1334   }
00027c  4770              BX       lr
;;;1335   
                          ENDP

                  OSTaskCreateExt PROC
;;;335    #if OS_TASK_CREATE_EXT_EN > 0u
;;;336    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
00027e  e92d4ff0          PUSH     {r4-r11,lr}
;;;337                            void    *p_arg,
;;;338                            OS_STK  *ptos,
;;;339                            INT8U    prio,
;;;340                            INT16U   id,
;;;341                            OS_STK  *pbos,
;;;342                            INT32U   stk_size,
;;;343                            void    *pext,
;;;344                            INT16U   opt)
;;;345    {
000282  b085              SUB      sp,sp,#0x14
000284  4681              MOV      r9,r0
000286  468a              MOV      r10,r1
000288  4693              MOV      r11,r2
00028a  461c              MOV      r4,r3
00028c  e9dd780f          LDRD     r7,r8,[sp,#0x3c]
000290  9d12              LDR      r5,[sp,#0x48]
;;;346        OS_STK     *psp;
;;;347        INT8U       err;
;;;348    #if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
;;;349        OS_CPU_SR   cpu_sr = 0u;
000292  f04f0000          MOV      r0,#0
000296  9003              STR      r0,[sp,#0xc]
;;;350    #endif
;;;351    
;;;352    
;;;353    
;;;354    #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;355        if (OSSafetyCriticalStartFlag == OS_TRUE) {
;;;356            OS_SAFETY_CRITICAL_EXCEPTION();
;;;357            return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
;;;358        }
;;;359    #endif
;;;360    
;;;361    #if OS_ARG_CHK_EN > 0u
;;;362        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;363            return (OS_ERR_PRIO_INVALID);
;;;364        }
;;;365    #endif
;;;366        OS_ENTER_CRITICAL();
000298  f7fffffe          BL       OS_CPU_SR_Save
00029c  9003              STR      r0,[sp,#0xc]
;;;367        if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
00029e  4861              LDR      r0,|L1.1060|
0002a0  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0002a2  b130              CBZ      r0,|L1.690|
;;;368            OS_EXIT_CRITICAL();
0002a4  9803              LDR      r0,[sp,#0xc]
0002a6  f7fffffe          BL       OS_CPU_SR_Restore
;;;369            return (OS_ERR_TASK_CREATE_ISR);
0002aa  203c              MOVS     r0,#0x3c
                  |L1.684|
;;;370        }
;;;371        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;372            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;373                                                 /* ... the same thing until task is created.              */
;;;374            OS_EXIT_CRITICAL();
;;;375    
;;;376    #if (OS_TASK_STAT_STK_CHK_EN > 0u)
;;;377            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;378    #endif
;;;379    
;;;380            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;381            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;382            if (err == OS_ERR_NONE) {
;;;383                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;384                    OS_Sched();
;;;385                }
;;;386            } else {
;;;387                OS_ENTER_CRITICAL();
;;;388                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;389                OS_EXIT_CRITICAL();
;;;390            }
;;;391            return (err);
;;;392        }
;;;393        OS_EXIT_CRITICAL();
;;;394        return (OS_ERR_PRIO_EXIST);
;;;395    }
0002ac  b005              ADD      sp,sp,#0x14
0002ae  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.690|
0002b2  4857              LDR      r0,|L1.1040|
0002b4  f8500024          LDR      r0,[r0,r4,LSL #2]     ;371
0002b8  bb98              CBNZ     r0,|L1.802|
0002ba  f04f0001          MOV      r0,#1                 ;372
0002be  4954              LDR      r1,|L1.1040|
0002c0  f8410024          STR      r0,[r1,r4,LSL #2]     ;372
0002c4  9803              LDR      r0,[sp,#0xc]          ;374
0002c6  f7fffffe          BL       OS_CPU_SR_Restore
0002ca  462a              MOV      r2,r5                 ;377
0002cc  4641              MOV      r1,r8                 ;377
0002ce  4638              MOV      r0,r7                 ;377
0002d0  f7fffffe          BL       OS_TaskStkClr
0002d4  462b              MOV      r3,r5                 ;380
0002d6  465a              MOV      r2,r11                ;380
0002d8  4651              MOV      r1,r10                ;380
0002da  4648              MOV      r0,r9                 ;380
0002dc  f7fffffe          BL       OSTaskStkInit
0002e0  9004              STR      r0,[sp,#0x10]         ;380
0002e2  9811              LDR      r0,[sp,#0x44]         ;381
0002e4  e9cd8000          STRD     r8,r0,[sp,#0]         ;381
0002e8  9502              STR      r5,[sp,#8]            ;381
0002ea  463a              MOV      r2,r7                 ;381
0002ec  4620              MOV      r0,r4                 ;381
0002ee  9b0e              LDR      r3,[sp,#0x38]         ;381
0002f0  9904              LDR      r1,[sp,#0x10]         ;381
0002f2  f7fffffe          BL       OS_TCBInit
0002f6  4606              MOV      r6,r0                 ;381
0002f8  b936              CBNZ     r6,|L1.776|
0002fa  4849              LDR      r0,|L1.1056|
0002fc  7800              LDRB     r0,[r0,#0]            ;383  ; OSRunning
0002fe  2801              CMP      r0,#1                 ;383
000300  d10d              BNE      |L1.798|
000302  f7fffffe          BL       OS_Sched
000306  e00a              B        |L1.798|
                  |L1.776|
000308  f7fffffe          BL       OS_CPU_SR_Save
00030c  9003              STR      r0,[sp,#0xc]          ;387
00030e  f04f0000          MOV      r0,#0                 ;388
000312  493f              LDR      r1,|L1.1040|
000314  f8410024          STR      r0,[r1,r4,LSL #2]     ;388
000318  9803              LDR      r0,[sp,#0xc]          ;389
00031a  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.798|
00031e  4630              MOV      r0,r6                 ;391
000320  e7c4              B        |L1.684|
                  |L1.802|
000322  e7ff              B        |L1.804|
                  |L1.804|
000324  9803              LDR      r0,[sp,#0xc]          ;393
000326  f7fffffe          BL       OS_CPU_SR_Restore
00032a  2028              MOVS     r0,#0x28              ;394
00032c  e7be              B        |L1.684|
;;;396    #endif
                          ENDP

                  OSTaskDel PROC
;;;434    #if OS_TASK_DEL_EN > 0u
;;;435    INT8U  OSTaskDel (INT8U prio)
00032e  e92d41f0          PUSH     {r4-r8,lr}
;;;436    {
000332  4605              MOV      r5,r0
;;;437    #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
;;;438        OS_FLAG_NODE *pnode;
;;;439    #endif
;;;440        OS_TCB       *ptcb;
;;;441    #if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
;;;442        OS_CPU_SR     cpu_sr = 0u;
000334  f04f0700          MOV      r7,#0
;;;443    #endif
;;;444    
;;;445    
;;;446    
;;;447        if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
000338  483a              LDR      r0,|L1.1060|
00033a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00033c  b110              CBZ      r0,|L1.836|
;;;448            return (OS_ERR_TASK_DEL_ISR);
00033e  2040              MOVS     r0,#0x40
                  |L1.832|
;;;449        }
;;;450        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;451            return (OS_ERR_TASK_DEL_IDLE);
;;;452        }
;;;453    #if OS_ARG_CHK_EN > 0u
;;;454        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;455            if (prio != OS_PRIO_SELF) {
;;;456                return (OS_ERR_PRIO_INVALID);
;;;457            }
;;;458        }
;;;459    #endif
;;;460    
;;;461    /*$PAGE*/
;;;462        OS_ENTER_CRITICAL();
;;;463        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;464            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;465        }
;;;466        ptcb = OSTCBPrioTbl[prio];
;;;467        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;468            OS_EXIT_CRITICAL();
;;;469            return (OS_ERR_TASK_NOT_EXIST);
;;;470        }
;;;471        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;472            OS_EXIT_CRITICAL();
;;;473            return (OS_ERR_TASK_DEL);
;;;474        }
;;;475    
;;;476        OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
;;;477        if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
;;;478            OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;479        }
;;;480    
;;;481    #if (OS_EVENT_EN)
;;;482        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;483            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;484        }
;;;485    #if (OS_EVENT_MULTI_EN > 0u)
;;;486        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;487            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;488        }
;;;489    #endif
;;;490    #endif
;;;491    
;;;492    #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
;;;493        pnode = ptcb->OSTCBFlagNode;
;;;494        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;495            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;496        }
;;;497    #endif
;;;498    
;;;499        ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
;;;500        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;501        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;502        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;503            OSLockNesting++;
;;;504        }
;;;505        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;506        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;507        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;508        if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
;;;509            OSLockNesting--;
;;;510        }
;;;511        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;512        OSTaskCtr--;                                        /* One less task being managed                 */
;;;513        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;514        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;515            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;516            OSTCBList                  = ptcb->OSTCBNext;
;;;517        } else {
;;;518            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;519            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;520        }
;;;521        ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
;;;522        OSTCBFreeList       = ptcb;
;;;523    #if OS_TASK_NAME_EN > 0u
;;;524        ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
;;;525    #endif
;;;526        OS_EXIT_CRITICAL();
;;;527        if (OSRunning == OS_TRUE) {
;;;528            OS_Sched();                                     /* Find new highest priority task              */
;;;529        }
;;;530        return (OS_ERR_NONE);
;;;531    }
000340  e8bd81f0          POP      {r4-r8,pc}
                  |L1.836|
000344  2d3f              CMP      r5,#0x3f              ;450
000346  d101              BNE      |L1.844|
000348  203e              MOVS     r0,#0x3e              ;451
00034a  e7f9              B        |L1.832|
                  |L1.844|
00034c  f7fffffe          BL       OS_CPU_SR_Save
000350  4607              MOV      r7,r0                 ;462
000352  2dff              CMP      r5,#0xff              ;463
000354  d103              BNE      |L1.862|
000356  482f              LDR      r0,|L1.1044|
000358  6800              LDR      r0,[r0,#0]            ;464  ; OSTCBCur
00035a  f8905036          LDRB     r5,[r0,#0x36]         ;464
                  |L1.862|
00035e  482c              LDR      r0,|L1.1040|
000360  f8504025          LDR      r4,[r0,r5,LSL #2]     ;466
000364  b924              CBNZ     r4,|L1.880|
000366  4638              MOV      r0,r7                 ;468
000368  f7fffffe          BL       OS_CPU_SR_Restore
00036c  2043              MOVS     r0,#0x43              ;469
00036e  e7e7              B        |L1.832|
                  |L1.880|
000370  2c01              CMP      r4,#1                 ;471
000372  d104              BNE      |L1.894|
000374  4638              MOV      r0,r7                 ;472
000376  f7fffffe          BL       OS_CPU_SR_Restore
00037a  203d              MOVS     r0,#0x3d              ;473
00037c  e7e0              B        |L1.832|
                  |L1.894|
00037e  f8140f38          LDRB     r0,[r4,#0x38]!        ;476
000382  4925              LDR      r1,|L1.1048|
000384  5c08              LDRB     r0,[r1,r0]            ;476
000386  7861              LDRB     r1,[r4,#1]            ;476
000388  ea6f0101          MVN      r1,r1                 ;476
00038c  b2c9              UXTB     r1,r1                 ;476
00038e  ea000001          AND      r0,r0,r1              ;476
000392  7821              LDRB     r1,[r4,#0]            ;476
000394  4a20              LDR      r2,|L1.1048|
000396  5450              STRB     r0,[r2,r1]            ;476
000398  f8140938          LDRB     r0,[r4],#-0x38        ;477
00039c  4611              MOV      r1,r2                 ;477
00039e  5c08              LDRB     r0,[r1,r0]            ;477
0003a0  b950              CBNZ     r0,|L1.952|
0003a2  f894003a          LDRB     r0,[r4,#0x3a]         ;478
0003a6  ea6f0000          MVN      r0,r0                 ;478
0003aa  b2c0              UXTB     r0,r0                 ;478
0003ac  491b              LDR      r1,|L1.1052|
0003ae  7809              LDRB     r1,[r1,#0]            ;478  ; OSRdyGrp
0003b0  ea000001          AND      r0,r0,r1              ;478
0003b4  4919              LDR      r1,|L1.1052|
0003b6  7008              STRB     r0,[r1,#0]            ;478
                  |L1.952|
0003b8  69e0              LDR      r0,[r4,#0x1c]         ;482
0003ba  b118              CBZ      r0,|L1.964|
0003bc  4620              MOV      r0,r4                 ;483
0003be  69e1              LDR      r1,[r4,#0x1c]         ;483
0003c0  f7fffffe          BL       OS_EventTaskRemove
                  |L1.964|
0003c4  6a20              LDR      r0,[r4,#0x20]         ;486
0003c6  b118              CBZ      r0,|L1.976|
0003c8  4620              MOV      r0,r4                 ;487
0003ca  6a21              LDR      r1,[r4,#0x20]         ;487
0003cc  f7fffffe          BL       OS_EventTaskRemoveMulti
                  |L1.976|
0003d0  6aa6              LDR      r6,[r4,#0x28]         ;493
0003d2  b116              CBZ      r6,|L1.986|
0003d4  4630              MOV      r0,r6                 ;495
0003d6  f7fffffe          BL       OS_FlagUnlink
                  |L1.986|
0003da  f04f0000          MOV      r0,#0                 ;499
0003de  6320              STR      r0,[r4,#0x30]         ;499
0003e0  f8840034          STRB     r0,[r4,#0x34]         ;500
0003e4  f8840035          STRB     r0,[r4,#0x35]         ;501
0003e8  480f              LDR      r0,|L1.1064|
0003ea  7800              LDRB     r0,[r0,#0]            ;502  ; OSLockNesting
0003ec  28ff              CMP      r0,#0xff              ;502
0003ee  d205              BCS      |L1.1020|
0003f0  480d              LDR      r0,|L1.1064|
0003f2  7800              LDRB     r0,[r0,#0]            ;503  ; OSLockNesting
0003f4  f1000001          ADD      r0,r0,#1              ;503
0003f8  490b              LDR      r1,|L1.1064|
0003fa  7008              STRB     r0,[r1,#0]            ;503
                  |L1.1020|
0003fc  4638              MOV      r0,r7                 ;505
0003fe  f7fffffe          BL       OS_CPU_SR_Restore
000402  f7fffffe          BL       OS_Dummy
000406  f7fffffe          BL       OS_CPU_SR_Save
00040a  4607              MOV      r7,r0                 ;507
00040c  4806              LDR      r0,|L1.1064|
00040e  e00d              B        |L1.1068|
                  |L1.1040|
                          DCD      OSTCBPrioTbl
                  |L1.1044|
                          DCD      OSTCBCur
                  |L1.1048|
                          DCD      OSRdyTbl
                  |L1.1052|
                          DCD      OSRdyGrp
                  |L1.1056|
                          DCD      OSRunning
                  |L1.1060|
                          DCD      OSIntNesting
                  |L1.1064|
                          DCD      OSLockNesting
                  |L1.1068|
00042c  7800              LDRB     r0,[r0,#0]            ;508  ; OSLockNesting
00042e  b128              CBZ      r0,|L1.1084|
000430  48f9              LDR      r0,|L1.2072|
000432  7800              LDRB     r0,[r0,#0]            ;509  ; OSLockNesting
000434  f1a00001          SUB      r0,r0,#1              ;509
000438  49f7              LDR      r1,|L1.2072|
00043a  7008              STRB     r0,[r1,#0]            ;509
                  |L1.1084|
00043c  4620              MOV      r0,r4                 ;511
00043e  f7fffffe          BL       OSTaskDelHook
000442  48f6              LDR      r0,|L1.2076|
000444  7800              LDRB     r0,[r0,#0]            ;512  ; OSTaskCtr
000446  f1a00001          SUB      r0,r0,#1              ;512
00044a  49f4              LDR      r1,|L1.2076|
00044c  7008              STRB     r0,[r1,#0]            ;512
00044e  f04f0000          MOV      r0,#0                 ;513
000452  49f3              LDR      r1,|L1.2080|
000454  f8410025          STR      r0,[r1,r5,LSL #2]     ;513
000458  69a0              LDR      r0,[r4,#0x18]         ;514
00045a  b938              CBNZ     r0,|L1.1132|
00045c  f04f0000          MOV      r0,#0                 ;515
000460  6961              LDR      r1,[r4,#0x14]         ;515
000462  6188              STR      r0,[r1,#0x18]         ;515
000464  49ef              LDR      r1,|L1.2084|
000466  6960              LDR      r0,[r4,#0x14]         ;516
000468  6008              STR      r0,[r1,#0]            ;516  ; OSTCBList
00046a  e005              B        |L1.1144|
                  |L1.1132|
00046c  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;518
000470  6148              STR      r0,[r1,#0x14]         ;518
000472  e9d41005          LDRD     r1,r0,[r4,#0x14]      ;519
000476  6188              STR      r0,[r1,#0x18]         ;519
                  |L1.1144|
000478  48eb              LDR      r0,|L1.2088|
00047a  6800              LDR      r0,[r0,#0]            ;521  ; OSTCBFreeList
00047c  6160              STR      r0,[r4,#0x14]         ;521
00047e  48ea              LDR      r0,|L1.2088|
000480  6004              STR      r4,[r0,#0]            ;522  ; OSTCBFreeList
000482  a0ea              ADR      r0,|L1.2092|
000484  6520              STR      r0,[r4,#0x50]         ;524
000486  4638              MOV      r0,r7                 ;526
000488  f7fffffe          BL       OS_CPU_SR_Restore
00048c  48e8              LDR      r0,|L1.2096|
00048e  7800              LDRB     r0,[r0,#0]            ;527  ; OSRunning
000490  2801              CMP      r0,#1                 ;527
000492  d101              BNE      |L1.1176|
000494  f7fffffe          BL       OS_Sched
                  |L1.1176|
000498  2000              MOVS     r0,#0                 ;530
00049a  e751              B        |L1.832|
;;;532    #endif
                          ENDP

                  OSTaskDelReq PROC
;;;580    #if OS_TASK_DEL_EN > 0u
;;;581    INT8U  OSTaskDelReq (INT8U prio)
00049c  e92d41f0          PUSH     {r4-r8,lr}
;;;582    {
0004a0  4604              MOV      r4,r0
;;;583        INT8U      stat;
;;;584        OS_TCB    *ptcb;
;;;585    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;586        OS_CPU_SR  cpu_sr = 0u;
0004a2  f04f0700          MOV      r7,#0
;;;587    #endif
;;;588    
;;;589    
;;;590    
;;;591        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
0004a6  2c3f              CMP      r4,#0x3f
0004a8  d102              BNE      |L1.1200|
;;;592            return (OS_ERR_TASK_DEL_IDLE);
0004aa  203e              MOVS     r0,#0x3e
                  |L1.1196|
;;;593        }
;;;594    #if OS_ARG_CHK_EN > 0u
;;;595        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;596            if (prio != OS_PRIO_SELF) {
;;;597                return (OS_ERR_PRIO_INVALID);
;;;598            }
;;;599        }
;;;600    #endif
;;;601        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
;;;602            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;603            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;604            OS_EXIT_CRITICAL();
;;;605            return (stat);
;;;606        }
;;;607        OS_ENTER_CRITICAL();
;;;608        ptcb = OSTCBPrioTbl[prio];
;;;609        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
;;;610            OS_EXIT_CRITICAL();
;;;611            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;612        }
;;;613        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
;;;614            OS_EXIT_CRITICAL();
;;;615            return (OS_ERR_TASK_DEL);
;;;616        }
;;;617        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
;;;618        OS_EXIT_CRITICAL();
;;;619        return (OS_ERR_NONE);
;;;620    }
0004ac  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1200|
0004b0  2cff              CMP      r4,#0xff              ;601
0004b2  d10b              BNE      |L1.1228|
0004b4  f7fffffe          BL       OS_CPU_SR_Save
0004b8  4607              MOV      r7,r0                 ;602
0004ba  48de              LDR      r0,|L1.2100|
0004bc  6800              LDR      r0,[r0,#0]            ;603  ; OSTCBCur
0004be  f890603b          LDRB     r6,[r0,#0x3b]         ;603
0004c2  4638              MOV      r0,r7                 ;604
0004c4  f7fffffe          BL       OS_CPU_SR_Restore
0004c8  4630              MOV      r0,r6                 ;605
0004ca  e7ef              B        |L1.1196|
                  |L1.1228|
0004cc  f7fffffe          BL       OS_CPU_SR_Save
0004d0  4607              MOV      r7,r0                 ;607
0004d2  48d3              LDR      r0,|L1.2080|
0004d4  f8505024          LDR      r5,[r0,r4,LSL #2]     ;608
0004d8  b925              CBNZ     r5,|L1.1252|
0004da  4638              MOV      r0,r7                 ;610
0004dc  f7fffffe          BL       OS_CPU_SR_Restore
0004e0  2043              MOVS     r0,#0x43              ;611
0004e2  e7e3              B        |L1.1196|
                  |L1.1252|
0004e4  2d01              CMP      r5,#1                 ;613
0004e6  d104              BNE      |L1.1266|
0004e8  4638              MOV      r0,r7                 ;614
0004ea  f7fffffe          BL       OS_CPU_SR_Restore
0004ee  203d              MOVS     r0,#0x3d              ;615
0004f0  e7dc              B        |L1.1196|
                  |L1.1266|
0004f2  f04f003f          MOV      r0,#0x3f              ;617
0004f6  f885003b          STRB     r0,[r5,#0x3b]         ;617
0004fa  4638              MOV      r0,r7                 ;618
0004fc  f7fffffe          BL       OS_CPU_SR_Restore
000500  2000              MOVS     r0,#0                 ;619
000502  e7d3              B        |L1.1196|
;;;621    #endif
                          ENDP

                  OSTaskNameGet PROC
;;;647    #if OS_TASK_NAME_EN > 0u
;;;648    INT8U  OSTaskNameGet (INT8U    prio,
000504  e92d47f0          PUSH     {r4-r10,lr}
;;;649                          INT8U  **pname,
;;;650                          INT8U   *perr)
;;;651    {
000508  4606              MOV      r6,r0
00050a  460f              MOV      r7,r1
00050c  4614              MOV      r4,r2
;;;652        OS_TCB    *ptcb;
;;;653        INT8U      len;
;;;654    #if OS_CRITICAL_METHOD == 3u                             /* Allocate storage for CPU status register   */
;;;655        OS_CPU_SR  cpu_sr = 0u;
00050e  f04f0800          MOV      r8,#0
;;;656    #endif
;;;657    
;;;658    
;;;659    
;;;660    #ifdef OS_SAFETY_CRITICAL
;;;661        if (perr == (INT8U *)0) {
;;;662            OS_SAFETY_CRITICAL_EXCEPTION();
;;;663            return (0u);
;;;664        }
;;;665    #endif
;;;666    
;;;667    #if OS_ARG_CHK_EN > 0u
;;;668        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;669            if (prio != OS_PRIO_SELF) {
;;;670                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;671                return (0u);
;;;672            }
;;;673        }
;;;674        if (pname == (INT8U **)0) {                          /* Is 'pname' a NULL pointer?                 */
;;;675            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;676            return (0u);
;;;677        }
;;;678    #endif
;;;679        if (OSIntNesting > 0u) {                              /* See if trying to call from an ISR          */
000512  48c9              LDR      r0,|L1.2104|
000514  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000516  b130              CBZ      r0,|L1.1318|
;;;680            *perr = OS_ERR_NAME_GET_ISR;
000518  f04f0011          MOV      r0,#0x11
00051c  7020              STRB     r0,[r4,#0]
;;;681            return (0u);
00051e  f04f0000          MOV      r0,#0
                  |L1.1314|
;;;682        }
;;;683        OS_ENTER_CRITICAL();
;;;684        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;685            prio = OSTCBCur->OSTCBPrio;
;;;686        }
;;;687        ptcb = OSTCBPrioTbl[prio];
;;;688        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;689            OS_EXIT_CRITICAL();                              /* No                                         */
;;;690            *perr = OS_ERR_TASK_NOT_EXIST;
;;;691            return (0u);
;;;692        }
;;;693        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;694            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;695            *perr = OS_ERR_TASK_NOT_EXIST;
;;;696            return (0u);
;;;697        }
;;;698        *pname = ptcb->OSTCBTaskName;
;;;699        len    = OS_StrLen(*pname);
;;;700        OS_EXIT_CRITICAL();
;;;701        *perr  = OS_ERR_NONE;
;;;702        return (len);
;;;703    }
000522  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1318|
000526  f7fffffe          BL       OS_CPU_SR_Save
00052a  4680              MOV      r8,r0                 ;683
00052c  2eff              CMP      r6,#0xff              ;684
00052e  d103              BNE      |L1.1336|
000530  48c0              LDR      r0,|L1.2100|
000532  6800              LDR      r0,[r0,#0]            ;685  ; OSTCBCur
000534  f8906036          LDRB     r6,[r0,#0x36]         ;685
                  |L1.1336|
000538  48b9              LDR      r0,|L1.2080|
00053a  f8505026          LDR      r5,[r0,r6,LSL #2]     ;687
00053e  b945              CBNZ     r5,|L1.1362|
000540  4640              MOV      r0,r8                 ;689
000542  f7fffffe          BL       OS_CPU_SR_Restore
000546  f04f0043          MOV      r0,#0x43              ;690
00054a  7020              STRB     r0,[r4,#0]            ;690
00054c  f04f0000          MOV      r0,#0                 ;691
000550  e7e7              B        |L1.1314|
                  |L1.1362|
000552  2d01              CMP      r5,#1                 ;693
000554  d108              BNE      |L1.1384|
000556  4640              MOV      r0,r8                 ;694
000558  f7fffffe          BL       OS_CPU_SR_Restore
00055c  f04f0043          MOV      r0,#0x43              ;695
000560  7020              STRB     r0,[r4,#0]            ;695
000562  f04f0000          MOV      r0,#0                 ;696
000566  e7dc              B        |L1.1314|
                  |L1.1384|
000568  6d28              LDR      r0,[r5,#0x50]         ;698
00056a  6038              STR      r0,[r7,#0]            ;698
00056c  6838              LDR      r0,[r7,#0]            ;699
00056e  f7fffffe          BL       OS_StrLen
000572  4681              MOV      r9,r0                 ;699
000574  4640              MOV      r0,r8                 ;700
000576  f7fffffe          BL       OS_CPU_SR_Restore
00057a  f04f0000          MOV      r0,#0                 ;701
00057e  7020              STRB     r0,[r4,#0]            ;701
000580  4648              MOV      r0,r9                 ;702
000582  e7ce              B        |L1.1314|
;;;704    #endif
                          ENDP

                  OSTaskNameSet PROC
;;;729    #if OS_TASK_NAME_EN > 0u
;;;730    void  OSTaskNameSet (INT8U   prio,
000584  e92d41f0          PUSH     {r4-r8,lr}
;;;731                         INT8U  *pname,
;;;732                         INT8U  *perr)
;;;733    {
000588  4606              MOV      r6,r0
00058a  460f              MOV      r7,r1
00058c  4614              MOV      r4,r2
;;;734        OS_TCB    *ptcb;
;;;735    #if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
;;;736        OS_CPU_SR  cpu_sr = 0u;
00058e  f04f0800          MOV      r8,#0
;;;737    #endif
;;;738    
;;;739    
;;;740    
;;;741    #ifdef OS_SAFETY_CRITICAL
;;;742        if (perr == (INT8U *)0) {
;;;743            OS_SAFETY_CRITICAL_EXCEPTION();
;;;744            return;
;;;745        }
;;;746    #endif
;;;747    
;;;748    #if OS_ARG_CHK_EN > 0u
;;;749        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;750            if (prio != OS_PRIO_SELF) {
;;;751                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;752                return;
;;;753            }
;;;754        }
;;;755        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;756            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;757            return;
;;;758        }
;;;759    #endif
;;;760        if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
000592  48a9              LDR      r0,|L1.2104|
000594  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000596  b120              CBZ      r0,|L1.1442|
;;;761            *perr = OS_ERR_NAME_SET_ISR;
000598  f04f0012          MOV      r0,#0x12
00059c  7020              STRB     r0,[r4,#0]
                  |L1.1438|
;;;762            return;
;;;763        }
;;;764        OS_ENTER_CRITICAL();
;;;765        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;766            prio = OSTCBCur->OSTCBPrio;
;;;767        }
;;;768        ptcb = OSTCBPrioTbl[prio];
;;;769        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;770            OS_EXIT_CRITICAL();                          /* No                                             */
;;;771            *perr = OS_ERR_TASK_NOT_EXIST;
;;;772            return;
;;;773        }
;;;774        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;775            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;776            *perr = OS_ERR_TASK_NOT_EXIST;
;;;777            return;
;;;778        }
;;;779        ptcb->OSTCBTaskName = pname;
;;;780        OS_EXIT_CRITICAL();
;;;781        *perr               = OS_ERR_NONE;
;;;782    }
00059e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1442|
0005a2  f7fffffe          BL       OS_CPU_SR_Save
0005a6  4680              MOV      r8,r0                 ;764
0005a8  2eff              CMP      r6,#0xff              ;765
0005aa  d103              BNE      |L1.1460|
0005ac  48a1              LDR      r0,|L1.2100|
0005ae  6800              LDR      r0,[r0,#0]            ;766  ; OSTCBCur
0005b0  f8906036          LDRB     r6,[r0,#0x36]         ;766
                  |L1.1460|
0005b4  489a              LDR      r0,|L1.2080|
0005b6  f8505026          LDR      r5,[r0,r6,LSL #2]     ;768
0005ba  b935              CBNZ     r5,|L1.1482|
0005bc  4640              MOV      r0,r8                 ;770
0005be  f7fffffe          BL       OS_CPU_SR_Restore
0005c2  f04f0043          MOV      r0,#0x43              ;771
0005c6  7020              STRB     r0,[r4,#0]            ;771
0005c8  e7e9              B        |L1.1438|
                  |L1.1482|
0005ca  2d01              CMP      r5,#1                 ;774
0005cc  d106              BNE      |L1.1500|
0005ce  4640              MOV      r0,r8                 ;775
0005d0  f7fffffe          BL       OS_CPU_SR_Restore
0005d4  f04f0043          MOV      r0,#0x43              ;776
0005d8  7020              STRB     r0,[r4,#0]            ;776
0005da  e7e0              B        |L1.1438|
                  |L1.1500|
0005dc  652f              STR      r7,[r5,#0x50]         ;779
0005de  4640              MOV      r0,r8                 ;780
0005e0  f7fffffe          BL       OS_CPU_SR_Restore
0005e4  f04f0000          MOV      r0,#0                 ;781
0005e8  7020              STRB     r0,[r4,#0]            ;781
0005ea  bf00              NOP      
0005ec  e7d7              B        |L1.1438|
;;;783    #endif
                          ENDP

                  OSTaskResume PROC
;;;804    #if OS_TASK_SUSPEND_EN > 0u
;;;805    INT8U  OSTaskResume (INT8U prio)
0005ee  b570              PUSH     {r4-r6,lr}
;;;806    {
0005f0  4605              MOV      r5,r0
;;;807        OS_TCB    *ptcb;
;;;808    #if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
;;;809        OS_CPU_SR  cpu_sr = 0u;
0005f2  f04f0600          MOV      r6,#0
;;;810    #endif
;;;811    
;;;812    
;;;813    
;;;814    #if OS_ARG_CHK_EN > 0u
;;;815        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
;;;816            return (OS_ERR_PRIO_INVALID);
;;;817        }
;;;818    #endif
;;;819        OS_ENTER_CRITICAL();
0005f6  f7fffffe          BL       OS_CPU_SR_Save
0005fa  4606              MOV      r6,r0
;;;820        ptcb = OSTCBPrioTbl[prio];
0005fc  4888              LDR      r0,|L1.2080|
0005fe  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;821        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
000602  b924              CBNZ     r4,|L1.1550|
;;;822            OS_EXIT_CRITICAL();
000604  4630              MOV      r0,r6
000606  f7fffffe          BL       OS_CPU_SR_Restore
;;;823            return (OS_ERR_TASK_RESUME_PRIO);
00060a  2046              MOVS     r0,#0x46
                  |L1.1548|
;;;824        }
;;;825        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;826            OS_EXIT_CRITICAL();
;;;827            return (OS_ERR_TASK_NOT_EXIST);
;;;828        }
;;;829        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;830            ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
;;;831            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;832                if (ptcb->OSTCBDly == 0u) {
;;;833                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;834                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;835                    OS_EXIT_CRITICAL();
;;;836                    if (OSRunning == OS_TRUE) {
;;;837                        OS_Sched();                               /* Find new highest priority task        */
;;;838                    }
;;;839                } else {
;;;840                    OS_EXIT_CRITICAL();
;;;841                }
;;;842            } else {                                              /* Must be pending on event              */
;;;843                OS_EXIT_CRITICAL();
;;;844            }
;;;845            return (OS_ERR_NONE);
;;;846        }
;;;847        OS_EXIT_CRITICAL();
;;;848        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;849    }
00060c  bd70              POP      {r4-r6,pc}
                  |L1.1550|
00060e  2c01              CMP      r4,#1                 ;825
000610  d104              BNE      |L1.1564|
000612  4630              MOV      r0,r6                 ;826
000614  f7fffffe          BL       OS_CPU_SR_Restore
000618  2043              MOVS     r0,#0x43              ;827
00061a  e7f7              B        |L1.1548|
                  |L1.1564|
00061c  f8940034          LDRB     r0,[r4,#0x34]         ;829
000620  f0100f08          TST      r0,#8                 ;829
000624  d02f              BEQ      |L1.1670|
000626  f8140f34          LDRB     r0,[r4,#0x34]!        ;830
00062a  f00000f7          AND      r0,r0,#0xf7           ;830
00062e  7020              STRB     r0,[r4,#0]            ;830
000630  f8140934          LDRB     r0,[r4],#-0x34        ;831
000634  bb10              CBNZ     r0,|L1.1660|
000636  6b20              LDR      r0,[r4,#0x30]         ;832
000638  b9e0              CBNZ     r0,|L1.1652|
00063a  f1040438          ADD      r4,r4,#0x38           ;833
00063e  78a0              LDRB     r0,[r4,#2]            ;833
000640  497e              LDR      r1,|L1.2108|
000642  7809              LDRB     r1,[r1,#0]            ;833  ; OSRdyGrp
000644  ea400001          ORR      r0,r0,r1              ;833
000648  497c              LDR      r1,|L1.2108|
00064a  7008              STRB     r0,[r1,#0]            ;833
00064c  7820              LDRB     r0,[r4,#0]            ;834
00064e  497c              LDR      r1,|L1.2112|
000650  5c08              LDRB     r0,[r1,r0]            ;834
000652  7861              LDRB     r1,[r4,#1]            ;834
000654  ea400001          ORR      r0,r0,r1              ;834
000658  f8141938          LDRB     r1,[r4],#-0x38        ;834
00065c  4a78              LDR      r2,|L1.2112|
00065e  5450              STRB     r0,[r2,r1]            ;834
000660  4630              MOV      r0,r6                 ;835
000662  f7fffffe          BL       OS_CPU_SR_Restore
000666  4872              LDR      r0,|L1.2096|
000668  7800              LDRB     r0,[r0,#0]            ;836  ; OSRunning
00066a  2801              CMP      r0,#1                 ;836
00066c  d109              BNE      |L1.1666|
00066e  f7fffffe          BL       OS_Sched
000672  e006              B        |L1.1666|
                  |L1.1652|
000674  4630              MOV      r0,r6                 ;840
000676  f7fffffe          BL       OS_CPU_SR_Restore
00067a  e002              B        |L1.1666|
                  |L1.1660|
00067c  4630              MOV      r0,r6                 ;843
00067e  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.1666|
000682  2000              MOVS     r0,#0                 ;845
000684  e7c2              B        |L1.1548|
                  |L1.1670|
000686  4630              MOV      r0,r6                 ;847
000688  f7fffffe          BL       OS_CPU_SR_Restore
00068c  2044              MOVS     r0,#0x44              ;848
00068e  e7bd              B        |L1.1548|
;;;850    #endif
                          ENDP

                  OSTaskStkChk PROC
;;;871    #if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
;;;872    INT8U  OSTaskStkChk (INT8U         prio,
000690  e92d47f0          PUSH     {r4-r10,lr}
;;;873                         OS_STK_DATA  *p_stk_data)
;;;874    {
000694  4607              MOV      r7,r0
000696  460d              MOV      r5,r1
;;;875        OS_TCB    *ptcb;
;;;876        OS_STK    *pchk;
;;;877        INT32U     nfree;
;;;878        INT32U     size;
;;;879    #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
;;;880        OS_CPU_SR  cpu_sr = 0u;
000698  f04f0a00          MOV      r10,#0
;;;881    #endif
;;;882    
;;;883    
;;;884    
;;;885    #if OS_ARG_CHK_EN > 0u
;;;886        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
;;;887            if (prio != OS_PRIO_SELF) {
;;;888                return (OS_ERR_PRIO_INVALID);
;;;889            }
;;;890        }
;;;891        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;892            return (OS_ERR_PDATA_NULL);
;;;893        }
;;;894    #endif
;;;895        p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
00069c  4650              MOV      r0,r10
00069e  6028              STR      r0,[r5,#0]
;;;896        p_stk_data->OSUsed = 0u;
0006a0  6068              STR      r0,[r5,#4]
;;;897        OS_ENTER_CRITICAL();
0006a2  f7fffffe          BL       OS_CPU_SR_Save
0006a6  4682              MOV      r10,r0
;;;898        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
0006a8  2fff              CMP      r7,#0xff
0006aa  d103              BNE      |L1.1716|
;;;899            prio = OSTCBCur->OSTCBPrio;
0006ac  4861              LDR      r0,|L1.2100|
0006ae  6800              LDR      r0,[r0,#0]  ; OSTCBCur
0006b0  f8907036          LDRB     r7,[r0,#0x36]
                  |L1.1716|
;;;900        }
;;;901        ptcb = OSTCBPrioTbl[prio];
0006b4  485a              LDR      r0,|L1.2080|
0006b6  f8504027          LDR      r4,[r0,r7,LSL #2]
;;;902        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
0006ba  b92c              CBNZ     r4,|L1.1736|
;;;903            OS_EXIT_CRITICAL();
0006bc  4650              MOV      r0,r10
0006be  f7fffffe          BL       OS_CPU_SR_Restore
;;;904            return (OS_ERR_TASK_NOT_EXIST);
0006c2  2043              MOVS     r0,#0x43
                  |L1.1732|
;;;905        }
;;;906        if (ptcb == OS_TCB_RESERVED) {
;;;907            OS_EXIT_CRITICAL();
;;;908            return (OS_ERR_TASK_NOT_EXIST);
;;;909        }
;;;910        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
;;;911            OS_EXIT_CRITICAL();
;;;912            return (OS_ERR_TASK_OPT);
;;;913        }
;;;914        nfree = 0u;
;;;915        size  = ptcb->OSTCBStkSize;
;;;916        pchk  = ptcb->OSTCBStkBottom;
;;;917        OS_EXIT_CRITICAL();
;;;918    #if OS_STK_GROWTH == 1u
;;;919        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
;;;920            nfree++;
;;;921        }
;;;922    #else
;;;923        while (*pchk-- == (OS_STK)0) {
;;;924            nfree++;
;;;925        }
;;;926    #endif
;;;927        p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
;;;928        p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
;;;929        return (OS_ERR_NONE);
;;;930    }
0006c4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1736|
0006c8  2c01              CMP      r4,#1                 ;906
0006ca  d104              BNE      |L1.1750|
0006cc  4650              MOV      r0,r10                ;907
0006ce  f7fffffe          BL       OS_CPU_SR_Restore
0006d2  2043              MOVS     r0,#0x43              ;908
0006d4  e7f6              B        |L1.1732|
                  |L1.1750|
0006d6  8a20              LDRH     r0,[r4,#0x10]         ;910
0006d8  f0100f01          TST      r0,#1                 ;910
0006dc  d104              BNE      |L1.1768|
0006de  4650              MOV      r0,r10                ;911
0006e0  f7fffffe          BL       OS_CPU_SR_Restore
0006e4  2045              MOVS     r0,#0x45              ;912
0006e6  e7ed              B        |L1.1732|
                  |L1.1768|
0006e8  f04f0600          MOV      r6,#0                 ;914
0006ec  f8d4900c          LDR      r9,[r4,#0xc]          ;915
0006f0  f8d48008          LDR      r8,[r4,#8]            ;916
0006f4  4650              MOV      r0,r10                ;917
0006f6  f7fffffe          BL       OS_CPU_SR_Restore
0006fa  e001              B        |L1.1792|
                  |L1.1788|
0006fc  f1060601          ADD      r6,r6,#1              ;920
                  |L1.1792|
000700  f8581b04          LDR      r1,[r8],#4            ;919
000704  2900              CMP      r1,#0                 ;919
000706  d0f9              BEQ      |L1.1788|
000708  602e              STR      r6,[r5,#0]            ;927
00070a  eba90006          SUB      r0,r9,r6              ;928
00070e  6068              STR      r0,[r5,#4]            ;928
000710  f04f0000          MOV      r0,#0                 ;929
000714  e7d6              B        |L1.1732|
;;;931    #endif
                          ENDP

                  OSTaskSuspend PROC
;;;956    #if OS_TASK_SUSPEND_EN > 0u
;;;957    INT8U  OSTaskSuspend (INT8U prio)
000716  e92d41f0          PUSH     {r4-r8,lr}
;;;958    {
00071a  4605              MOV      r5,r0
;;;959        BOOLEAN    self;
;;;960        OS_TCB    *ptcb;
;;;961        INT8U      y;
;;;962    #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;963        OS_CPU_SR  cpu_sr = 0u;
00071c  f04f0800          MOV      r8,#0
;;;964    #endif
;;;965    
;;;966    
;;;967    
;;;968    #if OS_ARG_CHK_EN > 0u
;;;969        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
;;;970            return (OS_ERR_TASK_SUSPEND_IDLE);
;;;971        }
;;;972        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;973            if (prio != OS_PRIO_SELF) {
;;;974                return (OS_ERR_PRIO_INVALID);
;;;975            }
;;;976        }
;;;977    #endif
;;;978        OS_ENTER_CRITICAL();
000720  f7fffffe          BL       OS_CPU_SR_Save
000724  4680              MOV      r8,r0
;;;979        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
000726  2dff              CMP      r5,#0xff
000728  d106              BNE      |L1.1848|
;;;980            prio = OSTCBCur->OSTCBPrio;
00072a  4842              LDR      r0,|L1.2100|
00072c  6800              LDR      r0,[r0,#0]  ; OSTCBCur
00072e  f8905036          LDRB     r5,[r0,#0x36]
;;;981            self = OS_TRUE;
000732  f04f0601          MOV      r6,#1
000736  e00a              B        |L1.1870|
                  |L1.1848|
;;;982        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
000738  483e              LDR      r0,|L1.2100|
00073a  6800              LDR      r0,[r0,#0]  ; OSTCBCur
00073c  f8900036          LDRB     r0,[r0,#0x36]
000740  42a8              CMP      r0,r5
000742  d102              BNE      |L1.1866|
;;;983            self = OS_TRUE;
000744  f04f0601          MOV      r6,#1
000748  e001              B        |L1.1870|
                  |L1.1866|
;;;984        } else {
;;;985            self = OS_FALSE;                                        /* No suspending another task          */
00074a  f04f0600          MOV      r6,#0
                  |L1.1870|
;;;986        }
;;;987        ptcb = OSTCBPrioTbl[prio];
00074e  4834              LDR      r0,|L1.2080|
000750  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;988        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
000754  b92c              CBNZ     r4,|L1.1890|
;;;989            OS_EXIT_CRITICAL();
000756  4640              MOV      r0,r8
000758  f7fffffe          BL       OS_CPU_SR_Restore
;;;990            return (OS_ERR_TASK_SUSPEND_PRIO);
00075c  2048              MOVS     r0,#0x48
                  |L1.1886|
;;;991        }
;;;992        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;993            OS_EXIT_CRITICAL();
;;;994            return (OS_ERR_TASK_NOT_EXIST);
;;;995        }
;;;996        y            = ptcb->OSTCBY;
;;;997        OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
;;;998        if (OSRdyTbl[y] == 0u) {
;;;999            OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
;;;1000       }
;;;1001       ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;1002       OS_EXIT_CRITICAL();
;;;1003       if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;1004           OS_Sched();                                             /* Find new highest priority task      */
;;;1005       }
;;;1006       return (OS_ERR_NONE);
;;;1007   }
00075e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1890|
000762  2c01              CMP      r4,#1                 ;992
000764  d104              BNE      |L1.1904|
000766  4640              MOV      r0,r8                 ;993
000768  f7fffffe          BL       OS_CPU_SR_Restore
00076c  2043              MOVS     r0,#0x43              ;994
00076e  e7f6              B        |L1.1886|
                  |L1.1904|
000770  f8947038          LDRB     r7,[r4,#0x38]         ;996
000774  4832              LDR      r0,|L1.2112|
000776  5dc0              LDRB     r0,[r0,r7]            ;997
000778  f8941039          LDRB     r1,[r4,#0x39]         ;997
00077c  ea6f0101          MVN      r1,r1                 ;997
000780  b2c9              UXTB     r1,r1                 ;997
000782  ea000001          AND      r0,r0,r1              ;997
000786  492e              LDR      r1,|L1.2112|
000788  55c8              STRB     r0,[r1,r7]            ;997
00078a  4608              MOV      r0,r1                 ;998
00078c  5dc0              LDRB     r0,[r0,r7]            ;998
00078e  b950              CBNZ     r0,|L1.1958|
000790  f894003a          LDRB     r0,[r4,#0x3a]         ;999
000794  ea6f0000          MVN      r0,r0                 ;999
000798  b2c0              UXTB     r0,r0                 ;999
00079a  4928              LDR      r1,|L1.2108|
00079c  7809              LDRB     r1,[r1,#0]            ;999  ; OSRdyGrp
00079e  ea000001          AND      r0,r0,r1              ;999
0007a2  4926              LDR      r1,|L1.2108|
0007a4  7008              STRB     r0,[r1,#0]            ;999
                  |L1.1958|
0007a6  f8940034          LDRB     r0,[r4,#0x34]         ;1001
0007aa  f0400008          ORR      r0,r0,#8              ;1001
0007ae  f8840034          STRB     r0,[r4,#0x34]         ;1001
0007b2  4640              MOV      r0,r8                 ;1002
0007b4  f7fffffe          BL       OS_CPU_SR_Restore
0007b8  2e01              CMP      r6,#1                 ;1003
0007ba  d101              BNE      |L1.1984|
0007bc  f7fffffe          BL       OS_Sched
                  |L1.1984|
0007c0  2000              MOVS     r0,#0                 ;1006
0007c2  e7cc              B        |L1.1886|
;;;1008   #endif
                          ENDP

                  OSTaskQuery PROC
;;;1029   #if OS_TASK_QUERY_EN > 0u
;;;1030   INT8U  OSTaskQuery (INT8U    prio,
0007c4  e92d41f0          PUSH     {r4-r8,lr}
;;;1031                       OS_TCB  *p_task_data)
;;;1032   {
0007c8  4605              MOV      r5,r0
0007ca  460e              MOV      r6,r1
;;;1033       OS_TCB    *ptcb;
;;;1034   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1035       OS_CPU_SR  cpu_sr = 0u;
0007cc  f04f0700          MOV      r7,#0
;;;1036   #endif
;;;1037   
;;;1038   
;;;1039   
;;;1040   #if OS_ARG_CHK_EN > 0u
;;;1041       if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
;;;1042           if (prio != OS_PRIO_SELF) {
;;;1043               return (OS_ERR_PRIO_INVALID);
;;;1044           }
;;;1045       }
;;;1046       if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
;;;1047           return (OS_ERR_PDATA_NULL);
;;;1048       }
;;;1049   #endif
;;;1050       OS_ENTER_CRITICAL();
0007d0  f7fffffe          BL       OS_CPU_SR_Save
0007d4  4607              MOV      r7,r0
;;;1051       if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
0007d6  2dff              CMP      r5,#0xff
0007d8  d103              BNE      |L1.2018|
;;;1052           prio = OSTCBCur->OSTCBPrio;
0007da  4816              LDR      r0,|L1.2100|
0007dc  6800              LDR      r0,[r0,#0]  ; OSTCBCur
0007de  f8905036          LDRB     r5,[r0,#0x36]
                  |L1.2018|
;;;1053       }
;;;1054       ptcb = OSTCBPrioTbl[prio];
0007e2  480f              LDR      r0,|L1.2080|
0007e4  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;1055       if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
0007e8  b92c              CBNZ     r4,|L1.2038|
;;;1056           OS_EXIT_CRITICAL();
0007ea  4638              MOV      r0,r7
0007ec  f7fffffe          BL       OS_CPU_SR_Restore
;;;1057           return (OS_ERR_PRIO);
0007f0  2029              MOVS     r0,#0x29
                  |L1.2034|
;;;1058       }
;;;1059       if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
;;;1060           OS_EXIT_CRITICAL();
;;;1061           return (OS_ERR_TASK_NOT_EXIST);
;;;1062       }
;;;1063                                                    /* Copy TCB into user storage area                    */
;;;1064       OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
;;;1065       OS_EXIT_CRITICAL();
;;;1066       return (OS_ERR_NONE);
;;;1067   }
0007f2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2038|
0007f6  2c01              CMP      r4,#1                 ;1059
0007f8  d104              BNE      |L1.2052|
0007fa  4638              MOV      r0,r7                 ;1060
0007fc  f7fffffe          BL       OS_CPU_SR_Restore
000800  2043              MOVS     r0,#0x43              ;1061
000802  e7f6              B        |L1.2034|
                  |L1.2052|
000804  2258              MOVS     r2,#0x58              ;1064
000806  4621              MOV      r1,r4                 ;1064
000808  4630              MOV      r0,r6                 ;1064
00080a  f7fffffe          BL       OS_MemCopy
00080e  4638              MOV      r0,r7                 ;1065
000810  f7fffffe          BL       OS_CPU_SR_Restore
000814  2000              MOVS     r0,#0                 ;1066
000816  e7ec              B        |L1.2034|
                  |L1.2072|
                          DCD      OSLockNesting
                  |L1.2076|
                          DCD      OSTaskCtr
                  |L1.2080|
                          DCD      OSTCBPrioTbl
                  |L1.2084|
                          DCD      OSTCBList
                  |L1.2088|
                          DCD      OSTCBFreeList
                  |L1.2092|
00082c  3f00              DCB      "?",0
00082e  00                DCB      0
00082f  00                DCB      0
                  |L1.2096|
                          DCD      OSRunning
                  |L1.2100|
                          DCD      OSTCBCur
                  |L1.2104|
                          DCD      OSIntNesting
                  |L1.2108|
                          DCD      OSRdyGrp
                  |L1.2112|
                          DCD      OSRdyTbl
                          ENDP

                  OSTaskRegGet PROC
;;;1096   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1097   INT32U  OSTaskRegGet (INT8U   prio,
000844  e92d47f0          PUSH     {r4-r10,lr}
;;;1098                         INT8U   id,
;;;1099                         INT8U  *perr)
;;;1100   {
000848  4604              MOV      r4,r0
00084a  460e              MOV      r6,r1
00084c  4617              MOV      r7,r2
;;;1101   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1102       OS_CPU_SR  cpu_sr = 0u;
00084e  f04f0900          MOV      r9,#0
;;;1103   #endif
;;;1104       INT32U     value;
;;;1105       OS_TCB    *ptcb;
;;;1106   
;;;1107   
;;;1108   
;;;1109   #ifdef OS_SAFETY_CRITICAL
;;;1110       if (perr == (INT8U *)0) {
;;;1111           OS_SAFETY_CRITICAL_EXCEPTION();
;;;1112           return (0u);
;;;1113       }
;;;1114   #endif
;;;1115   
;;;1116   #if OS_ARG_CHK_EN > 0u
;;;1117       if (prio >= OS_LOWEST_PRIO) {
;;;1118           if (prio != OS_PRIO_SELF) {
;;;1119               *perr = OS_ERR_PRIO_INVALID;
;;;1120               return (0u);
;;;1121           }
;;;1122       }
;;;1123       if (id >= OS_TASK_REG_TBL_SIZE) {
;;;1124           *perr = OS_ERR_ID_INVALID;
;;;1125           return (0u);
;;;1126       }
;;;1127   #endif
;;;1128       OS_ENTER_CRITICAL();
000852  f7fffffe          BL       OS_CPU_SR_Save
000856  4681              MOV      r9,r0
;;;1129       if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
000858  2cff              CMP      r4,#0xff
00085a  d102              BNE      |L1.2146|
;;;1130           ptcb = OSTCBCur;
00085c  482e              LDR      r0,|L1.2328|
00085e  6805              LDR      r5,[r0,#0]  ; OSTCBCur
000860  e002              B        |L1.2152|
                  |L1.2146|
;;;1131       } else {
;;;1132           ptcb = OSTCBPrioTbl[prio];
000862  482e              LDR      r0,|L1.2332|
000864  f8505024          LDR      r5,[r0,r4,LSL #2]
                  |L1.2152|
;;;1133       }
;;;1134       value = ptcb->OSTCBRegTbl[id];
000868  f1050054          ADD      r0,r5,#0x54
00086c  f8508026          LDR      r8,[r0,r6,LSL #2]
;;;1135       OS_EXIT_CRITICAL();
000870  4648              MOV      r0,r9
000872  f7fffffe          BL       OS_CPU_SR_Restore
;;;1136       *perr = OS_ERR_NONE;
000876  f04f0000          MOV      r0,#0
00087a  7038              STRB     r0,[r7,#0]
;;;1137       return (value);
00087c  4640              MOV      r0,r8
;;;1138   }
00087e  e8bd87f0          POP      {r4-r10,pc}
;;;1139   #endif
                          ENDP

                  OSTaskRegGetID PROC
;;;1159   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1160   INT8U  OSTaskRegGetID (INT8U  *perr)
000882  b570              PUSH     {r4-r6,lr}
;;;1161   {
000884  4604              MOV      r4,r0
;;;1162   #if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register           */
;;;1163       OS_CPU_SR  cpu_sr = 0u;
000886  f04f0600          MOV      r6,#0
;;;1164   #endif
;;;1165       INT8U      id;
;;;1166   
;;;1167   
;;;1168   #ifdef OS_SAFETY_CRITICAL
;;;1169       if (perr == (INT8U *)0) {
;;;1170           OS_SAFETY_CRITICAL_EXCEPTION();
;;;1171           return ((INT8U)OS_TASK_REG_TBL_SIZE);
;;;1172       }
;;;1173   #endif
;;;1174   
;;;1175       OS_ENTER_CRITICAL();
00088a  f7fffffe          BL       OS_CPU_SR_Save
00088e  4606              MOV      r6,r0
;;;1176       if (OSTaskRegNextAvailID >= OS_TASK_REG_TBL_SIZE) {         /* See if we exceeded the number of IDs available     */
000890  4823              LDR      r0,|L1.2336|
000892  7800              LDRB     r0,[r0,#0]  ; OSTaskRegNextAvailID
000894  b138              CBZ      r0,|L1.2214|
;;;1177          *perr = OS_ERR_NO_MORE_ID_AVAIL;                         /* Yes, cannot allocate more task register IDs        */
000896  f04f0096          MOV      r0,#0x96
00089a  7020              STRB     r0,[r4,#0]
;;;1178           OS_EXIT_CRITICAL();
00089c  4630              MOV      r0,r6
00089e  f7fffffe          BL       OS_CPU_SR_Restore
;;;1179           return ((INT8U)OS_TASK_REG_TBL_SIZE);
0008a2  2001              MOVS     r0,#1
                  |L1.2212|
;;;1180       }
;;;1181        
;;;1182       id   = OSTaskRegNextAvailID;                                /* Assign the next available ID                       */
;;;1183       OSTaskRegNextAvailID++;                                     /* Increment available ID for next request            */
;;;1184       OS_EXIT_CRITICAL();
;;;1185      *perr = OS_ERR_NONE;
;;;1186       return (id);
;;;1187   }
0008a4  bd70              POP      {r4-r6,pc}
                  |L1.2214|
0008a6  481e              LDR      r0,|L1.2336|
0008a8  7805              LDRB     r5,[r0,#0]            ;1182  ; OSTaskRegNextAvailID
0008aa  7800              LDRB     r0,[r0,#0]            ;1183  ; OSTaskRegNextAvailID
0008ac  f1000001          ADD      r0,r0,#1              ;1183
0008b0  491b              LDR      r1,|L1.2336|
0008b2  7008              STRB     r0,[r1,#0]            ;1183
0008b4  4630              MOV      r0,r6                 ;1184
0008b6  f7fffffe          BL       OS_CPU_SR_Restore
0008ba  f04f0000          MOV      r0,#0                 ;1185
0008be  7020              STRB     r0,[r4,#0]            ;1185
0008c0  4628              MOV      r0,r5                 ;1186
0008c2  e7ef              B        |L1.2212|
;;;1188   #endif
                          ENDP

                  OSTaskRegSet PROC
;;;1219   #if OS_TASK_REG_TBL_SIZE > 0u
;;;1220   void  OSTaskRegSet (INT8U    prio,
0008c4  e92d47f0          PUSH     {r4-r10,lr}
;;;1221                       INT8U    id,
;;;1222                       INT32U   value,
;;;1223                       INT8U   *perr)
;;;1224   {
0008c8  4604              MOV      r4,r0
0008ca  460e              MOV      r6,r1
0008cc  4617              MOV      r7,r2
0008ce  4698              MOV      r8,r3
;;;1225   #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
;;;1226       OS_CPU_SR  cpu_sr = 0u;
0008d0  f04f0900          MOV      r9,#0
;;;1227   #endif
;;;1228       OS_TCB    *ptcb;
;;;1229   
;;;1230   
;;;1231   #ifdef OS_SAFETY_CRITICAL
;;;1232       if (perr == (INT8U *)0) {
;;;1233           OS_SAFETY_CRITICAL_EXCEPTION();
;;;1234           return;
;;;1235       }
;;;1236   #endif
;;;1237   
;;;1238   #if OS_ARG_CHK_EN > 0u
;;;1239       if (prio >= OS_LOWEST_PRIO) {
;;;1240           if (prio != OS_PRIO_SELF) {
;;;1241               *perr = OS_ERR_PRIO_INVALID;
;;;1242               return;
;;;1243           }
;;;1244       }
;;;1245       if (id >= OS_TASK_REG_TBL_SIZE) {
;;;1246           *perr = OS_ERR_ID_INVALID;
;;;1247           return;
;;;1248       }
;;;1249   #endif
;;;1250       OS_ENTER_CRITICAL();
0008d4  f7fffffe          BL       OS_CPU_SR_Save
0008d8  4681              MOV      r9,r0
;;;1251       if (prio == OS_PRIO_SELF) {                  /* See if need to get register from current task      */
0008da  2cff              CMP      r4,#0xff
0008dc  d102              BNE      |L1.2276|
;;;1252           ptcb = OSTCBCur;
0008de  480e              LDR      r0,|L1.2328|
0008e0  6805              LDR      r5,[r0,#0]  ; OSTCBCur
0008e2  e002              B        |L1.2282|
                  |L1.2276|
;;;1253       } else {
;;;1254           ptcb = OSTCBPrioTbl[prio];
0008e4  480d              LDR      r0,|L1.2332|
0008e6  f8505024          LDR      r5,[r0,r4,LSL #2]
                  |L1.2282|
;;;1255       }
;;;1256       ptcb->OSTCBRegTbl[id] = value;
0008ea  f1050054          ADD      r0,r5,#0x54
0008ee  f8407026          STR      r7,[r0,r6,LSL #2]
;;;1257       OS_EXIT_CRITICAL();
0008f2  4648              MOV      r0,r9
0008f4  f7fffffe          BL       OS_CPU_SR_Restore
;;;1258       *perr                 = OS_ERR_NONE;
0008f8  f04f0000          MOV      r0,#0
0008fc  f8880000          STRB     r0,[r8,#0]
;;;1259   }
000900  e8bd87f0          POP      {r4-r10,pc}
;;;1260   #endif
                          ENDP

                  OS_TaskReturn PROC
;;;1277   
;;;1278   void  OS_TaskReturn (void)
000904  b510              PUSH     {r4,lr}
;;;1279   {
;;;1280       OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
000906  4804              LDR      r0,|L1.2328|
000908  6800              LDR      r0,[r0,#0]  ; OSTCBCur
00090a  f7fffffe          BL       OSTaskReturnHook
;;;1281   
;;;1282   #if OS_TASK_DEL_EN > 0u
;;;1283       (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
00090e  20ff              MOVS     r0,#0xff
000910  f7fffffe          BL       OSTaskDel
;;;1284   #else
;;;1285       for (;;) {
;;;1286           OSTimeDly(OS_TICKS_PER_SEC);
;;;1287       }
;;;1288   #endif
;;;1289   }
000914  bd10              POP      {r4,pc}
;;;1290   
                          ENDP

000916  0000              DCW      0x0000
                  |L1.2328|
                          DCD      OSTCBCur
                  |L1.2332|
                          DCD      OSTCBPrioTbl
                  |L1.2336|
                          DCD      OSTaskRegNextAvailID
