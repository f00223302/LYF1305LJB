; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\output\system_stm32f2xx.o --asm_dir=..\listing\ --list_dir=..\listing\ --depend=..\output\system_stm32f2xx.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\src -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\STM32F2xx -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32_EVAL -I..\src\SYSTICK -I..\src\LED -I..\src\GPIO -I..\src\USART -I..\src\FLASH -I..\src\HexFile -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DUSE_CPU_F205RC -DLJB_CPU -W --omf_browse=..\output\system_stm32f2xx.crf ..\..\Libraries\CMSIS\CM3\DeviceSupport\STM32F2xx\system_stm32f2xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;330      */
;;;331    static void SetSysClock(void)
000000  f04f0100          MOV      r1,#0
;;;332    {
;;;333    /******************************************************************************/
;;;334    /*            PLL (clocked by HSE) used as System clock source                */
;;;335    /******************************************************************************/
;;;336      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000004  4608              MOV      r0,r1
;;;337      
;;;338      /* Enable HSE */
;;;339      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000006  4a67              LDR      r2,|L1.420|
000008  6812              LDR      r2,[r2,#0]
00000a  f4423280          ORR      r2,r2,#0x10000
00000e  4b65              LDR      r3,|L1.420|
000010  601a              STR      r2,[r3,#0]
;;;340     
;;;341      /* Wait till HSE is ready and if Time out is reached exit */
;;;342      do
000012  bf00              NOP      
                  |L1.20|
;;;343      {
;;;344        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000014  4a63              LDR      r2,|L1.420|
000016  6812              LDR      r2,[r2,#0]
000018  f4023000          AND      r0,r2,#0x20000
;;;345        StartUpCounter++;
00001c  f1010101          ADD      r1,r1,#1
;;;346      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000020  b910              CBNZ     r0,|L1.40|
000022  f5b16fa0          CMP      r1,#0x500
000026  d1f5              BNE      |L1.20|
                  |L1.40|
;;;347    
;;;348      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000028  4a5e              LDR      r2,|L1.420|
00002a  6812              LDR      r2,[r2,#0]
00002c  f4123f00          TST      r2,#0x20000
000030  d002              BEQ      |L1.56|
;;;349      {
;;;350        HSEStatus = (uint32_t)0x01;
000032  f04f0001          MOV      r0,#1
000036  e001              B        |L1.60|
                  |L1.56|
;;;351      }
;;;352      else
;;;353      {
;;;354        HSEStatus = (uint32_t)0x00;
000038  f04f0000          MOV      r0,#0
                  |L1.60|
;;;355      }
;;;356    
;;;357      if (HSEStatus == (uint32_t)0x01)
00003c  2801              CMP      r0,#1
00003e  d133              BNE      |L1.168|
;;;358      {
;;;359        /* HCLK = SYSCLK / 1*/
;;;360        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000040  4a59              LDR      r2,|L1.424|
000042  6812              LDR      r2,[r2,#0]
000044  4b58              LDR      r3,|L1.424|
000046  601a              STR      r2,[r3,#0]
;;;361          
;;;362        /* PCLK2 = HCLK / 2*/
;;;363        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000048  461a              MOV      r2,r3
00004a  6812              LDR      r2,[r2,#0]
00004c  f4424200          ORR      r2,r2,#0x8000
000050  601a              STR      r2,[r3,#0]
;;;364        
;;;365        /* PCLK1 = HCLK / 4*/
;;;366        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
000052  461a              MOV      r2,r3
000054  6812              LDR      r2,[r2,#0]
000056  f44252a0          ORR      r2,r2,#0x1400
00005a  601a              STR      r2,[r3,#0]
;;;367    
;;;368        /* Configure the main PLL */
;;;369        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
00005c  4a53              LDR      r2,|L1.428|
00005e  f1a30304          SUB      r3,r3,#4
000062  601a              STR      r2,[r3,#0]
;;;370                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;371    
;;;372        /* Enable the main PLL */
;;;373        RCC->CR |= RCC_CR_PLLON;
000064  4a4f              LDR      r2,|L1.420|
000066  6812              LDR      r2,[r2,#0]
000068  f0427280          ORR      r2,r2,#0x1000000
00006c  4b4d              LDR      r3,|L1.420|
00006e  601a              STR      r2,[r3,#0]
;;;374    
;;;375        /* Wait till the main PLL is ready */
;;;376        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000070  bf00              NOP      
                  |L1.114|
000072  4a4c              LDR      r2,|L1.420|
000074  6812              LDR      r2,[r2,#0]
000076  f0127f00          TST      r2,#0x2000000
00007a  d0fa              BEQ      |L1.114|
;;;377        {
;;;378        }
;;;379       
;;;380        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;381        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;// 原来为 FLASH_ACR_LATENCY_7WS   根据张工的要求降频 120M->60M
00007c  f2407203          MOV      r2,#0x703
000080  4b4b              LDR      r3,|L1.432|
000082  601a              STR      r2,[r3,#0]
;;;382    
;;;383        /* Select the main PLL as system clock source */
;;;384        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000084  4a48              LDR      r2,|L1.424|
000086  6812              LDR      r2,[r2,#0]
000088  f0220203          BIC      r2,r2,#3
00008c  4b46              LDR      r3,|L1.424|
00008e  601a              STR      r2,[r3,#0]
;;;385        RCC->CFGR |= RCC_CFGR_SW_PLL;
000090  461a              MOV      r2,r3
000092  6812              LDR      r2,[r2,#0]
000094  f0420202          ORR      r2,r2,#2
000098  601a              STR      r2,[r3,#0]
;;;386    
;;;387        /* Wait till the main PLL is used as system clock source */
;;;388        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
00009a  bf00              NOP      
                  |L1.156|
00009c  4a42              LDR      r2,|L1.424|
00009e  6812              LDR      r2,[r2,#0]
0000a0  f002020c          AND      r2,r2,#0xc
0000a4  2a08              CMP      r2,#8
0000a6  d1f9              BNE      |L1.156|
                  |L1.168|
;;;389        {
;;;390        }
;;;391      }
;;;392      else
;;;393      { /* If HSE fails to start-up, the application will have wrong clock
;;;394             configuration. User can add here some code to deal with this error */
;;;395      }
;;;396    
;;;397    }
0000a8  4770              BX       lr
;;;398    
                          ENDP

                  SystemInit PROC
;;;201      */
;;;202    void SystemInit(void)
0000aa  b510              PUSH     {r4,lr}
;;;203    {
;;;204      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;205      /* Set HSION bit */
;;;206      RCC->CR |= (uint32_t)0x00000001;
0000ac  483d              LDR      r0,|L1.420|
0000ae  6800              LDR      r0,[r0,#0]
0000b0  f0400001          ORR      r0,r0,#1
0000b4  493b              LDR      r1,|L1.420|
0000b6  6008              STR      r0,[r1,#0]
;;;207    
;;;208      /* Reset CFGR register */
;;;209      RCC->CFGR = 0x00000000;
0000b8  f04f0000          MOV      r0,#0
0000bc  493a              LDR      r1,|L1.424|
0000be  6008              STR      r0,[r1,#0]
;;;210    
;;;211      /* Reset HSEON, CSSON and PLLON bits */
;;;212      RCC->CR &= (uint32_t)0xFEF6FFFF;
0000c0  4838              LDR      r0,|L1.420|
0000c2  6800              LDR      r0,[r0,#0]
0000c4  493b              LDR      r1,|L1.436|
0000c6  ea000001          AND      r0,r0,r1
0000ca  4936              LDR      r1,|L1.420|
0000cc  6008              STR      r0,[r1,#0]
;;;213    
;;;214      /* Reset PLLCFGR register */
;;;215      RCC->PLLCFGR = 0x24003010;
0000ce  483a              LDR      r0,|L1.440|
0000d0  f1010104          ADD      r1,r1,#4
0000d4  6008              STR      r0,[r1,#0]
;;;216    
;;;217      /* Reset HSEBYP bit */
;;;218      RCC->CR &= (uint32_t)0xFFFBFFFF;
0000d6  4833              LDR      r0,|L1.420|
0000d8  6800              LDR      r0,[r0,#0]
0000da  f4202080          BIC      r0,r0,#0x40000
0000de  4931              LDR      r1,|L1.420|
0000e0  6008              STR      r0,[r1,#0]
;;;219    
;;;220      /* Disable all interrupts */
;;;221      RCC->CIR = 0x00000000;
0000e2  f04f0000          MOV      r0,#0
0000e6  4935              LDR      r1,|L1.444|
0000e8  6008              STR      r0,[r1,#0]
;;;222    
;;;223    #ifdef DATA_IN_ExtSRAM
;;;224      SystemInit_ExtMemCtl(); 
;;;225    #endif /* DATA_IN_ExtSRAM */
;;;226             
;;;227      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;228         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;229      SetSysClock();
0000ea  f7fffffe          BL       SetSysClock
;;;230    
;;;231      /* Configure the Vector Table location add offset address ------------------*/
;;;232    #ifdef VECT_TAB_SRAM
;;;233      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;234    #else
;;;235      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
0000ee  f04f6000          MOV      r0,#0x8000000
0000f2  4933              LDR      r1,|L1.448|
0000f4  6008              STR      r0,[r1,#0]
;;;236    #endif
;;;237    }
0000f6  bd10              POP      {r4,pc}
;;;238    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;274      */
;;;275    void SystemCoreClockUpdate(void)
0000f8  b570              PUSH     {r4-r6,lr}
;;;276    {
;;;277      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
0000fa  f04f0000          MOV      r0,#0
0000fe  4602              MOV      r2,r0
000100  f04f0302          MOV      r3,#2
000104  4604              MOV      r4,r0
000106  f04f0102          MOV      r1,#2
;;;278      
;;;279      /* Get SYSCLK source -------------------------------------------------------*/
;;;280      tmp = RCC->CFGR & RCC_CFGR_SWS;
00010a  4d27              LDR      r5,|L1.424|
00010c  682d              LDR      r5,[r5,#0]
00010e  f005000c          AND      r0,r5,#0xc
;;;281    
;;;282      switch (tmp)
000112  b120              CBZ      r0,|L1.286|
000114  2804              CMP      r0,#4
000116  d006              BEQ      |L1.294|
000118  2808              CMP      r0,#8
00011a  d131              BNE      |L1.384|
00011c  e007              B        |L1.302|
                  |L1.286|
;;;283      {
;;;284        case 0x00:  /* HSI used as system clock source */
;;;285          SystemCoreClock = HSI_VALUE;
00011e  4d29              LDR      r5,|L1.452|
000120  4e29              LDR      r6,|L1.456|
000122  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;286          break;
000124  e030              B        |L1.392|
                  |L1.294|
;;;287        case 0x04:  /* HSE used as system clock source */
;;;288          SystemCoreClock = HSE_VALUE;
000126  4d29              LDR      r5,|L1.460|
000128  4e27              LDR      r6,|L1.456|
00012a  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;289          break;
00012c  e02c              B        |L1.392|
                  |L1.302|
;;;290        case 0x08:  /* PLL used as system clock source */
;;;291    
;;;292          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;293             SYSCLK = PLL_VCO / PLL_P
;;;294             */    
;;;295          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
00012e  4d28              LDR      r5,|L1.464|
000130  682d              LDR      r5,[r5,#0]
000132  f3c55480          UBFX     r4,r5,#22,#1
;;;296          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000136  4d26              LDR      r5,|L1.464|
000138  682d              LDR      r5,[r5,#0]
00013a  f005013f          AND      r1,r5,#0x3f
;;;297          
;;;298          if (pllsource != 0)
00013e  b14c              CBZ      r4,|L1.340|
;;;299          {
;;;300            /* HSE used as PLL clock source */
;;;301            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000140  4d22              LDR      r5,|L1.460|
000142  fbb5f5f1          UDIV     r5,r5,r1
000146  4e22              LDR      r6,|L1.464|
000148  6836              LDR      r6,[r6,#0]
00014a  f3c61688          UBFX     r6,r6,#6,#9
00014e  fb05f206          MUL      r2,r5,r6
000152  e008              B        |L1.358|
                  |L1.340|
;;;302          }
;;;303          else
;;;304          {
;;;305            /* HSI used as PLL clock source */
;;;306            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
000154  4d1b              LDR      r5,|L1.452|
000156  fbb5f5f1          UDIV     r5,r5,r1
00015a  4e1d              LDR      r6,|L1.464|
00015c  6836              LDR      r6,[r6,#0]
00015e  f3c61688          UBFX     r6,r6,#6,#9
000162  fb05f206          MUL      r2,r5,r6
                  |L1.358|
;;;307          }
;;;308    
;;;309          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000166  4d1a              LDR      r5,|L1.464|
000168  682d              LDR      r5,[r5,#0]
00016a  f3c54501          UBFX     r5,r5,#16,#2
00016e  f1050501          ADD      r5,r5,#1
000172  ea4f0345          LSL      r3,r5,#1
;;;310          SystemCoreClock = pllvco/pllp;
000176  fbb2f5f3          UDIV     r5,r2,r3
00017a  4e13              LDR      r6,|L1.456|
00017c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;311          break;
00017e  e003              B        |L1.392|
                  |L1.384|
;;;312        default:
;;;313          SystemCoreClock = HSI_VALUE;
000180  4d10              LDR      r5,|L1.452|
000182  4e11              LDR      r6,|L1.456|
000184  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;314          break;
000186  bf00              NOP      
                  |L1.392|
000188  bf00              NOP                            ;286
;;;315      }
;;;316      /* Compute HCLK frequency --------------------------------------------------*/
;;;317      /* Get HCLK prescaler */
;;;318      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00018a  4d07              LDR      r5,|L1.424|
00018c  682d              LDR      r5,[r5,#0]
00018e  f3c51503          UBFX     r5,r5,#4,#4
000192  4e10              LDR      r6,|L1.468|
000194  5d70              LDRB     r0,[r6,r5]
;;;319      /* HCLK frequency */
;;;320      SystemCoreClock >>= tmp;
000196  4d0c              LDR      r5,|L1.456|
000198  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
00019a  fa25f500          LSR      r5,r5,r0
00019e  4e0a              LDR      r6,|L1.456|
0001a0  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;321    }
0001a2  bd70              POP      {r4-r6,pc}
;;;322    
                          ENDP

                  |L1.420|
                          DCD      0x40023800
                  |L1.424|
                          DCD      0x40023808
                  |L1.428|
                          DCD      0x05403c19
                  |L1.432|
                          DCD      0x40023c00
                  |L1.436|
                          DCD      0xfef6ffff
                  |L1.440|
                          DCD      0x24003010
                  |L1.444|
                          DCD      0x4002380c
                  |L1.448|
                          DCD      0xe000ed08
                  |L1.452|
                          DCD      0x00f42400
                  |L1.456|
                          DCD      SystemCoreClock
                  |L1.460|
                          DCD      0x017d7840
                  |L1.464|
                          DCD      0x40023804
                  |L1.468|
                          DCD      AHBPrescTable

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x07270e00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09
