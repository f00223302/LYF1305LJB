; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\output\f205_flash.o --asm_dir=..\listing\ --list_dir=..\listing\ --depend=..\output\f205_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\src -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\STM32F2xx -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32_EVAL -I..\src\SYSTICK -I..\src\LED -I..\src\GPIO -I..\src\USART -I..\src\FLASH -I..\src\HexFile -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DUSE_CPU_F205RC -DLJB_CPU -W --omf_browse=..\output\f205_flash.crf ..\src\FLASH\F205_Flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  F205_EraseSectors PROC
;;;22     
;;;23     uint8_t F205_EraseSectors(uint32_t StartSec, uint32_t EndSec)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;24     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;25     	uint8_t try = 3;
000008  f04f0803          MOV      r8,#3
;;;26     	uint8_t err;
;;;27     	uint32_t i;
;;;28     
;;;29     	while (try--){
00000c  e015              B        |L1.58|
                  |L1.14|
;;;30     
;;;31     		err = 0;
00000e  f04f0700          MOV      r7,#0
;;;32     		/* Unlock the Flash to enable the flash control register access *************/ 
;;;33       		FLASH_Unlock();
000012  f7fffffe          BL       FLASH_Unlock
;;;34     
;;;35       		for (i = StartSec; i <= EndSec; i += 8)
000016  462c              MOV      r4,r5
000018  e00a              B        |L1.48|
                  |L1.26|
;;;36       		{
;;;37         		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
;;;38            			be done by word */ 
;;;39         		if (FLASH_EraseSector(i, VoltageRange_3) != FLASH_COMPLETE)
00001a  2102              MOVS     r1,#2
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       FLASH_EraseSector
000022  2808              CMP      r0,#8
000024  d002              BEQ      |L1.44|
;;;40         		{ 
;;;41           			/* Error occurred while sector erase. 
;;;42              			User can add here some code to deal with this error  */
;;;43           			err = 1;
000026  f04f0701          MOV      r7,#1
;;;44     				break;
00002a  e003              B        |L1.52|
                  |L1.44|
00002c  f1040408          ADD      r4,r4,#8              ;35
                  |L1.48|
000030  42b4              CMP      r4,r6                 ;35
000032  d9f2              BLS      |L1.26|
                  |L1.52|
000034  bf00              NOP      
;;;45     			}
;;;46         	}
;;;47     		if (!err)
000036  b907              CBNZ     r7,|L1.58|
;;;48     			break;
000038  e006              B        |L1.72|
                  |L1.58|
00003a  ea5f0008          MOVS     r0,r8                 ;29
00003e  f1a80101          SUB      r1,r8,#1              ;29
000042  f00108ff          AND      r8,r1,#0xff           ;29
000046  d1e2              BNE      |L1.14|
                  |L1.72|
000048  bf00              NOP      
;;;49       	}
;;;50     	return err;
00004a  4638              MOV      r0,r7
;;;51     }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;52     
                          ENDP

                  F205_ProgramFlash PROC
;;;53     uint8_t F205_ProgramFlash(uint32_t addr, uint32_t data)
000050  b570              PUSH     {r4-r6,lr}
;;;54     {
000052  4604              MOV      r4,r0
000054  460d              MOV      r5,r1
;;;55     	uint32_t data32;
;;;56     
;;;57     	if (FLASH_ProgramWord(addr, data) == FLASH_COMPLETE){
000056  4629              MOV      r1,r5
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       FLASH_ProgramWord
00005e  2808              CMP      r0,#8
000060  d106              BNE      |L1.112|
;;;58     
;;;59     		data32 = *(__IO uint32_t*)addr;
000062  6826              LDR      r6,[r4,#0]
;;;60     
;;;61         	if (data32 != data)
000064  42ae              CMP      r6,r5
000066  d001              BEQ      |L1.108|
;;;62           		return 1;
000068  2001              MOVS     r0,#1
                  |L1.106|
;;;63     		else
;;;64     			return 0;
;;;65         }
;;;66         else
;;;67     		return 1;
;;;68     }
00006a  bd70              POP      {r4-r6,pc}
                  |L1.108|
00006c  2000              MOVS     r0,#0                 ;64
00006e  e7fc              B        |L1.106|
                  |L1.112|
000070  2001              MOVS     r0,#1                 ;67
000072  e7fa              B        |L1.106|
;;;69     
                          ENDP

                  F205_WriteProtection PROC
;;;70     
;;;71     uint8_t F205_WriteProtection(uint32_t WRPSec, uint8_t Enable)
000074  e92d41f0          PUSH     {r4-r8,lr}
;;;72     {
000078  4604              MOV      r4,r0
00007a  460e              MOV      r6,r1
;;;73     	uint32_t SectorsWRPStatus;
;;;74     	uint8_t err, try = 3;
00007c  f04f0803          MOV      r8,#3
;;;75     
;;;76     	if (WRPSec > 0x3f)
000080  2c3f              CMP      r4,#0x3f
000082  d902              BLS      |L1.138|
;;;77     		return 5;
000084  2005              MOVS     r0,#5
                  |L1.134|
;;;78     
;;;79     	while (try--){
;;;80     
;;;81     		err = 0;
;;;82     
;;;83     		FLASH_Unlock();
;;;84     		FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
;;;85     	
;;;86     		/* Get FLASH_WRP_SECTORS write protection status */
;;;87         	SectorsWRPStatus = FLASH_OB_GetWRP() & WRPSec;
;;;88     
;;;89     		if (Enable){///Enable write protection
;;;90     
;;;91     #if (FLASH_USE_PROTECTION>0)
;;;92     			/* If FLASH_WRP_SECTORS are not write protected, enable the write protection */
;;;93     			if (SectorsWRPStatus != 0){///至少一个SEC不是写保护
;;;94     
;;;95           			/* Enable the Flash option control register access */
;;;96           			FLASH_OB_Unlock();
;;;97     
;;;98           			/* Enable FLASH_WRP_SECTORS write protection */
;;;99           			FLASH_OB_WRPConfig(WRPSec, ENABLE); 
;;;100    
;;;101          			/* Start the Option Bytes programming process */  
;;;102          			if (FLASH_OB_Launch() != FLASH_COMPLETE)
;;;103            			err = 1;
;;;104    
;;;105          			/* Disable the Flash option control register access (recommended to protect 
;;;106            			the option Bytes against possible unwanted operations) */
;;;107          			FLASH_OB_Lock();
;;;108    
;;;109          			/* Get FLASH_WRP_SECTORS write protection status */
;;;110          			SectorsWRPStatus = FLASH_OB_GetWRP() & WRPSec;
;;;111    
;;;112          			/* Check if FLASH_WRP_SECTORS are write protected */
;;;113          			if (SectorsWRPStatus != 0x00)
;;;114    					err = 1;
;;;115    			}
;;;116    #endif
;;;117    		}
;;;118    
;;;119    		else{
;;;120    
;;;121        		if (SectorsWRPStatus != WRPSec){///至少一个SEC是写保护
;;;122    
;;;123         			/* If FLASH_WRP_SECTORS are write protected, disable the write protection */
;;;124    
;;;125          			/* Enable the Flash option control register access */
;;;126          			FLASH_OB_Unlock();
;;;127    
;;;128          			/* Disable FLASH_WRP_SECTORS write protection */
;;;129          			FLASH_OB_WRPConfig(WRPSec, DISABLE); 
;;;130    
;;;131          			/* Start the Option Bytes programming process */  
;;;132          			if (FLASH_OB_Launch() != FLASH_COMPLETE)
;;;133            			err = 1;
;;;134    
;;;135          			/* Disable the Flash option control register access (recommended to protect 
;;;136            			the option Bytes against possible unwanted operations) */
;;;137          			FLASH_OB_Lock();
;;;138    
;;;139          			/* Get FLASH_WRP_SECTORS write protection status */
;;;140          			SectorsWRPStatus = FLASH_OB_GetWRP() & WRPSec;
;;;141      
;;;142          			/* Check if FLASH_WRP_SECTORS write protection is disabled */
;;;143          			if (SectorsWRPStatus != WRPSec)
;;;144    					err = 1;
;;;145    			}
;;;146    		}
;;;147    		if (!err)
;;;148    			break;
;;;149    	}
;;;150    	return err;
;;;151    }
000086  e8bd81f0          POP      {r4-r8,pc}
                  |L1.138|
00008a  e03c              B        |L1.262|
                  |L1.140|
00008c  f04f0700          MOV      r7,#0                 ;81
000090  f7fffffe          BL       FLASH_Unlock
000094  20b3              MOVS     r0,#0xb3              ;84
000096  f7fffffe          BL       FLASH_ClearFlag
00009a  f7fffffe          BL       FLASH_OB_GetWRP
00009e  ea000504          AND      r5,r0,r4              ;87
0000a2  b1b6              CBZ      r6,|L1.210|
0000a4  b36d              CBZ      r5,|L1.258|
0000a6  f7fffffe          BL       FLASH_OB_Unlock
0000aa  2101              MOVS     r1,#1                 ;99
0000ac  4620              MOV      r0,r4                 ;99
0000ae  f7fffffe          BL       FLASH_OB_WRPConfig
0000b2  f7fffffe          BL       FLASH_OB_Launch
0000b6  2808              CMP      r0,#8                 ;102
0000b8  d001              BEQ      |L1.190|
0000ba  f04f0701          MOV      r7,#1                 ;103
                  |L1.190|
0000be  f7fffffe          BL       FLASH_OB_Lock
0000c2  f7fffffe          BL       FLASH_OB_GetWRP
0000c6  ea000504          AND      r5,r0,r4              ;110
0000ca  b1d5              CBZ      r5,|L1.258|
0000cc  f04f0701          MOV      r7,#1                 ;114
0000d0  e017              B        |L1.258|
                  |L1.210|
0000d2  42a5              CMP      r5,r4                 ;121
0000d4  d015              BEQ      |L1.258|
0000d6  f7fffffe          BL       FLASH_OB_Unlock
0000da  2100              MOVS     r1,#0                 ;129
0000dc  4620              MOV      r0,r4                 ;129
0000de  f7fffffe          BL       FLASH_OB_WRPConfig
0000e2  f7fffffe          BL       FLASH_OB_Launch
0000e6  2808              CMP      r0,#8                 ;132
0000e8  d001              BEQ      |L1.238|
0000ea  f04f0701          MOV      r7,#1                 ;133
                  |L1.238|
0000ee  f7fffffe          BL       FLASH_OB_Lock
0000f2  f7fffffe          BL       FLASH_OB_GetWRP
0000f6  ea000504          AND      r5,r0,r4              ;140
0000fa  42a5              CMP      r5,r4                 ;143
0000fc  d001              BEQ      |L1.258|
0000fe  f04f0701          MOV      r7,#1                 ;144
                  |L1.258|
000102  b907              CBNZ     r7,|L1.262|
000104  e006              B        |L1.276|
                  |L1.262|
000106  ea5f0008          MOVS     r0,r8                 ;79
00010a  f1a80101          SUB      r1,r8,#1              ;79
00010e  f00108ff          AND      r8,r1,#0xff           ;79
000112  d1bb              BNE      |L1.140|
                  |L1.276|
000114  bf00              NOP                            ;148
000116  4638              MOV      r0,r7                 ;150
000118  e7b5              B        |L1.134|
;;;152    
                          ENDP

                  F205_WriteParams PROC
;;;155    
;;;156    uint8_t F205_WriteParams(uint32_t addr, uint8_t *data, uint16_t len)
00011a  e92d5ff0          PUSH     {r4-r12,lr}
;;;157    {
00011e  4607              MOV      r7,r0
000120  468b              MOV      r11,r1
000122  4690              MOV      r8,r2
;;;158    	uint32_t tmpAddr, data32, *buf;
;;;159    	uint16_t i;
;;;160    	FLASH_Status status;
;;;161    	
;;;162    	///解除信息扇区写保护：
;;;163    	if (F205_WriteProtection(PARAM_FLASH_SECTORS, DISABLE))
000124  f04f0100          MOV      r1,#0
000128  f04f0004          MOV      r0,#4
00012c  f7fffffe          BL       F205_WriteProtection
000130  b110              CBZ      r0,|L1.312|
;;;164    		return 2;
000132  2002              MOVS     r0,#2
                  |L1.308|
;;;165    	///擦除信息扇区：
;;;166    	if (F205_EraseSectors(PARAMS_START_SECTOR, PARAMS_END_SECTOR))
;;;167    		return 3;
;;;168    	
;;;169    	buf = (uint32_t *)&(data[0]);
;;;170    	tmpAddr = addr;
;;;171    
;;;172    	for (i = 0; i < (len >> 2); i++){
;;;173    
;;;174    		status = FLASH_ProgramWord(tmpAddr, buf[i]);
;;;175    		if (status == FLASH_COMPLETE){
;;;176    
;;;177    			data32 = *(__IO uint32_t*)tmpAddr;
;;;178    
;;;179        		if (data32 != buf[i])
;;;180          			return 5;
;;;181        	}
;;;182        	else
;;;183    			return 4;
;;;184    
;;;185    		tmpAddr += 4;
;;;186    	}
;;;187    
;;;188    	///校验
;;;189    	tmpAddr = addr;
;;;190    	for (i = 0; i < (len >> 2); i++){
;;;191    
;;;192    		data32 = *(__IO uint32_t*)tmpAddr;
;;;193    
;;;194        	if (data32 != buf[i])
;;;195          		return 5;
;;;196    
;;;197    		tmpAddr += 4;
;;;198    	}
;;;199    
;;;200    	///写保护：
;;;201    	if (F205_WriteProtection(PARAM_FLASH_SECTORS, ENABLE))
;;;202    		return 6;
;;;203    
;;;204    	F205_WriteProtection(PARAM_FLASH_SECTORS, ENABLE);
;;;205    
;;;206    	FLASH_Lock();
;;;207    
;;;208    	return 0;
;;;209    }
000134  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.312|
000138  2110              MOVS     r1,#0x10              ;166
00013a  4608              MOV      r0,r1                 ;166
00013c  f7fffffe          BL       F205_EraseSectors
000140  b108              CBZ      r0,|L1.326|
000142  2003              MOVS     r0,#3                 ;167
000144  e7f6              B        |L1.308|
                  |L1.326|
000146  465e              MOV      r6,r11                ;169
000148  463d              MOV      r5,r7                 ;170
00014a  f04f0400          MOV      r4,#0                 ;172
00014e  e017              B        |L1.384|
                  |L1.336|
000150  f8561024          LDR      r1,[r6,r4,LSL #2]     ;174
000154  4628              MOV      r0,r5                 ;174
000156  f7fffffe          BL       FLASH_ProgramWord
00015a  4682              MOV      r10,r0                ;174
00015c  f1ba0f08          CMP      r10,#8                ;175
000160  d107              BNE      |L1.370|
000162  f8d59000          LDR      r9,[r5,#0]            ;177
000166  f8560024          LDR      r0,[r6,r4,LSL #2]     ;179
00016a  4548              CMP      r0,r9                 ;179
00016c  d003              BEQ      |L1.374|
00016e  2005              MOVS     r0,#5                 ;180
000170  e7e0              B        |L1.308|
                  |L1.370|
000172  2004              MOVS     r0,#4                 ;183
000174  e7de              B        |L1.308|
                  |L1.374|
000176  f1050504          ADD      r5,r5,#4              ;185
00017a  f1040001          ADD      r0,r4,#1              ;172
00017e  b284              UXTH     r4,r0                 ;172
                  |L1.384|
000180  ebb40fa8          CMP      r4,r8,ASR #2          ;172
000184  dbe4              BLT      |L1.336|
000186  463d              MOV      r5,r7                 ;189
000188  f04f0400          MOV      r4,#0                 ;190
00018c  e00c              B        |L1.424|
                  |L1.398|
00018e  f8d59000          LDR      r9,[r5,#0]            ;192
000192  f8560024          LDR      r0,[r6,r4,LSL #2]     ;194
000196  4548              CMP      r0,r9                 ;194
000198  d001              BEQ      |L1.414|
00019a  2005              MOVS     r0,#5                 ;195
00019c  e7ca              B        |L1.308|
                  |L1.414|
00019e  f1050504          ADD      r5,r5,#4              ;197
0001a2  f1040001          ADD      r0,r4,#1              ;190
0001a6  b284              UXTH     r4,r0                 ;190
                  |L1.424|
0001a8  ebb40fa8          CMP      r4,r8,ASR #2          ;190
0001ac  dbef              BLT      |L1.398|
0001ae  2101              MOVS     r1,#1                 ;201
0001b0  2004              MOVS     r0,#4                 ;201
0001b2  f7fffffe          BL       F205_WriteProtection
0001b6  b108              CBZ      r0,|L1.444|
0001b8  2006              MOVS     r0,#6                 ;202
0001ba  e7bb              B        |L1.308|
                  |L1.444|
0001bc  2101              MOVS     r1,#1                 ;204
0001be  2004              MOVS     r0,#4                 ;204
0001c0  f7fffffe          BL       F205_WriteProtection
0001c4  f7fffffe          BL       FLASH_Lock
0001c8  2000              MOVS     r0,#0                 ;208
0001ca  e7b3              B        |L1.308|
;;;210    
                          ENDP

                  F205_ReadParams PROC
;;;211    
;;;212    void F205_ReadParams(uint32_t addr, uint8_t *data, uint16_t len)
0001cc  b530              PUSH     {r4,r5,lr}
;;;213    {
0001ce  460b              MOV      r3,r1
;;;214    	uint32_t *buf;
;;;215    	uint16_t i;
;;;216    
;;;217    	buf = (uint32_t *)data;
0001d0  461c              MOV      r4,r3
;;;218    
;;;219    	for (i = 0; i < (len >> 2); i++){
0001d2  f04f0100          MOV      r1,#0
0001d6  e007              B        |L1.488|
                  |L1.472|
;;;220    		
;;;221    		buf[i] = *(__IO uint32_t*)addr;
0001d8  6805              LDR      r5,[r0,#0]
0001da  f8445021          STR      r5,[r4,r1,LSL #2]
;;;222    		addr += 4;
0001de  f1000004          ADD      r0,r0,#4
0001e2  f1010501          ADD      r5,r1,#1              ;219
0001e6  b2a9              UXTH     r1,r5                 ;219
                  |L1.488|
0001e8  ebb10fa2          CMP      r1,r2,ASR #2          ;219
0001ec  dbf4              BLT      |L1.472|
;;;223    	}
;;;224    }
0001ee  bd30              POP      {r4,r5,pc}
;;;225    
                          ENDP

