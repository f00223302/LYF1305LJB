; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\output\stm322xg_eval.o --asm_dir=..\listing\ --list_dir=..\listing\ --depend=..\output\stm322xg_eval.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\src -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\STM32F2xx -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32_EVAL -I..\src\SYSTICK -I..\src\LED -I..\src\GPIO -I..\src\USART -I..\src\FLASH -I..\src\HexFile -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DUSE_CPU_F205RC -DLJB_CPU -W --omf_browse=..\output\stm322xg_eval.crf ..\..\Utilities\STM32_EVAL\stm322xg_eval.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  STM_EVAL_LEDInit PROC
;;;121      */
;;;122    void STM_EVAL_LEDInit(Led_TypeDef Led)
000000  b51c              PUSH     {r2-r4,lr}
;;;123    {
000002  4604              MOV      r4,r0
;;;124      	GPIO_InitTypeDef  GPIO_InitStructure;
;;;125      
;;;126      	/* Enable the GPIO_LED Clock */
;;;127      	RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
000004  49d1              LDR      r1,|L1.844|
000006  f8510024          LDR      r0,[r1,r4,LSL #2]
00000a  f04f0101          MOV      r1,#1
00000e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;128    
;;;129    
;;;130      	/* Configure the GPIO_LED pin */
;;;131      	GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
000012  48cf              LDR      r0,|L1.848|
000014  f8300014          LDRH     r0,[r0,r4,LSL #1]
000018  9000              STR      r0,[sp,#0]
;;;132      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00001a  f04f0001          MOV      r0,#1
00001e  f88d0004          STRB     r0,[sp,#4]
;;;133      	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000022  f04f0000          MOV      r0,#0
000026  f88d0006          STRB     r0,[sp,#6]
;;;134      	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00002a  f04f0001          MOV      r0,#1
00002e  f88d0007          STRB     r0,[sp,#7]
;;;135      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000032  f04f0002          MOV      r0,#2
000036  f88d0005          STRB     r0,[sp,#5]
;;;136      	GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
00003a  49c6              LDR      r1,|L1.852|
00003c  f8510024          LDR      r0,[r1,r4,LSL #2]
000040  4669              MOV      r1,sp
000042  f7fffffe          BL       GPIO_Init
;;;137    }
000046  bd1c              POP      {r2-r4,pc}
;;;138    
                          ENDP

                  STM_EVAL_LEDOff PROC
;;;147      */
;;;148    void STM_EVAL_LEDOff(Led_TypeDef Led)
000048  49c1              LDR      r1,|L1.848|
;;;149    {
;;;150      	GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];
00004a  f8311010          LDRH     r1,[r1,r0,LSL #1]
00004e  4ac1              LDR      r2,|L1.852|
000050  f8522020          LDR      r2,[r2,r0,LSL #2]
000054  8351              STRH     r1,[r2,#0x1a]
;;;151    }
000056  4770              BX       lr
;;;152    
                          ENDP

                  STM_EVAL_LEDOn PROC
;;;161      */
;;;162    void STM_EVAL_LEDOn(Led_TypeDef Led)
000058  49bd              LDR      r1,|L1.848|
;;;163    {
;;;164      	GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led]; 
00005a  f8311010          LDRH     r1,[r1,r0,LSL #1]
00005e  4abd              LDR      r2,|L1.852|
000060  f8522020          LDR      r2,[r2,r0,LSL #2]
000064  8311              STRH     r1,[r2,#0x18]
;;;165    }
000066  4770              BX       lr
;;;166    
                          ENDP

                  STM_EVAL_LEDToggle PROC
;;;175      */
;;;176    void STM_EVAL_LEDToggle(Led_TypeDef Led)
000068  49ba              LDR      r1,|L1.852|
;;;177    {
;;;178      	GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
00006a  f8511020          LDR      r1,[r1,r0,LSL #2]
00006e  6949              LDR      r1,[r1,#0x14]
000070  4ab7              LDR      r2,|L1.848|
000072  f8322010          LDRH     r2,[r2,r0,LSL #1]
000076  ea810102          EOR      r1,r1,r2
00007a  4ab6              LDR      r2,|L1.852|
00007c  f8522020          LDR      r2,[r2,r0,LSL #2]
000080  6151              STR      r1,[r2,#0x14]
;;;179    }
000082  4770              BX       lr
;;;180    
                          ENDP

                  F205_UsartDMAConfig PROC
;;;279    #if (USART_TX_USE_DMA)
;;;280    void F205_UsartDMAConfig(COM_TypeDef COM, USART_BufDef *USART_BufStruct)
000084  b570              PUSH     {r4-r6,lr}
;;;281    {
000086  b090              SUB      sp,sp,#0x40
000088  4604              MOV      r4,r0
00008a  460d              MOV      r5,r1
;;;282    	//	NVIC_InitTypeDef NVIC_InitStructure;
;;;283    	DMA_InitTypeDef DMA_InitStructure;
;;;284    	__IO uint32_t    Timeout = TIMEOUT_MAX;
00008c  f2427610          MOV      r6,#0x2710
;;;285    
;;;286    	/* Enable DMA clock */
;;;287      	RCC_AHB1PeriphClockCmd(DMA_Periph, ENABLE); 	
000090  f04f0101          MOV      r1,#1
000094  f44f0080          MOV      r0,#0x400000
000098  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;288    
;;;289    	///接收数据：由于不知道数据长度，不采用 DMA 方式
;;;290    
;;;291    	/// Reset DMA Stream registers (for debug purpose)
;;;292      	DMA_DeInit(DMA_Stream);
00009c  48ae              LDR      r0,|L1.856|
00009e  f7fffffe          BL       DMA_DeInit
;;;293    
;;;294      	/* Check if the DMA Stream is disabled before enabling it.
;;;295         	Note that this step is useful when the same Stream is used multiple times:
;;;296         	enabled, then disabled then re-enabled... In this case, the DMA Stream disable
;;;297         	will be effective only at the end of the ongoing data transfer and it will 
;;;298         	not be possible to re-configure it before making sure that the Enable bit 
;;;299         	has been cleared by hardware. If the Stream is used only once, this step might 
;;;300         	be bypassed. */
;;;301      	
;;;302    	while (DMA_GetCmdStatus(DMA_Stream) != DISABLE){}
0000a2  bf00              NOP      
                  |L1.164|
0000a4  48ac              LDR      r0,|L1.856|
0000a6  f7fffffe          BL       DMA_GetCmdStatus
0000aa  2800              CMP      r0,#0
0000ac  d1fa              BNE      |L1.164|
;;;303    
;;;304    
;;;305    	///USART6 TX : DMA2 Channel 5, stream 7
;;;306    	DMA_InitStructure.DMA_Channel = DMA_Ch;
0000ae  f04f6020          MOV      r0,#0xa000000
0000b2  9001              STR      r0,[sp,#4]
;;;307    
;;;308    	///USART1 TX : DMA2 Channel 4, stream 7
;;;309    //	DMA_InitStructure.DMA_Channel = USART1_DMA_CHANNEL;
;;;310    
;;;311    	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&(USART_BufStruct->TxBuf[0]);
0000b4  6828              LDR      r0,[r5,#0]
0000b6  9003              STR      r0,[sp,#0xc]
;;;312      	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)USART_DATA_REG_ADDR[COM];
0000b8  48a8              LDR      r0,|L1.860|
0000ba  f8500024          LDR      r0,[r0,r4,LSL #2]
0000be  9002              STR      r0,[sp,#8]
;;;313      	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
0000c0  f04f0040          MOV      r0,#0x40
0000c4  9004              STR      r0,[sp,#0x10]
;;;314      	DMA_InitStructure.DMA_BufferSize = 0;
0000c6  f04f0000          MOV      r0,#0
0000ca  9005              STR      r0,[sp,#0x14]
;;;315      	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
0000cc  9006              STR      r0,[sp,#0x18]
;;;316      	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000ce  f44f6080          MOV      r0,#0x400
0000d2  9007              STR      r0,[sp,#0x1c]
;;;317      	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
0000d4  f04f0000          MOV      r0,#0
0000d8  9008              STR      r0,[sp,#0x20]
;;;318      	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
0000da  9009              STR      r0,[sp,#0x24]
;;;319      	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;///DMA_Mode_Circular;
0000dc  900a              STR      r0,[sp,#0x28]
;;;320      	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
0000de  f44f3000          MOV      r0,#0x20000
0000e2  900b              STR      r0,[sp,#0x2c]
;;;321      	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
0000e4  f04f0000          MOV      r0,#0
0000e8  900c              STR      r0,[sp,#0x30]
;;;322      	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
0000ea  f04f0003          MOV      r0,#3
0000ee  900d              STR      r0,[sp,#0x34]
;;;323      	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
0000f0  f04f0000          MOV      r0,#0
0000f4  900e              STR      r0,[sp,#0x38]
;;;324      	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
0000f6  900f              STR      r0,[sp,#0x3c]
;;;325      	DMA_Init(DMA_Stream, &DMA_InitStructure);
0000f8  a901              ADD      r1,sp,#4
0000fa  4897              LDR      r0,|L1.856|
0000fc  f7fffffe          BL       DMA_Init
;;;326    
;;;327    	///允许USART_TX_DMA：
;;;328    	USART_DMACmd(COM_USART[COM], USART_DMAReq_Tx, ENABLE);
000100  4997              LDR      r1,|L1.864|
000102  f8510024          LDR      r0,[r1,r4,LSL #2]
000106  2201              MOVS     r2,#1
000108  2180              MOVS     r1,#0x80
00010a  f7fffffe          BL       USART_DMACmd
;;;329    	 
;;;330    	///此时不允许 USART6 TX DMA
;;;331      	DMA_Cmd(DMA_Stream, DISABLE);
00010e  2100              MOVS     r1,#0
000110  4891              LDR      r0,|L1.856|
000112  f7fffffe          BL       DMA_Cmd
;;;332    }
000116  b010              ADD      sp,sp,#0x40
000118  bd70              POP      {r4-r6,pc}
;;;333    #endif
                          ENDP

                  STM_EVAL_COMInit PROC
;;;193      */
;;;194    void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct, USART_BufDef *USART_BufStruct)
00011a  b5fe              PUSH     {r1-r7,lr}
;;;195    {
00011c  4604              MOV      r4,r0
00011e  460e              MOV      r6,r1
000120  4615              MOV      r5,r2
;;;196      	GPIO_InitTypeDef GPIO_InitStructure;
;;;197      	NVIC_InitTypeDef NVIC_InitStructure;
;;;198    
;;;199      	/* Enable GPIO clock */
;;;200      	RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
000122  4990              LDR      r1,|L1.868|
000124  f8511024          LDR      r1,[r1,r4,LSL #2]
000128  4a8f              LDR      r2,|L1.872|
00012a  f8522024          LDR      r2,[r2,r4,LSL #2]
00012e  ea410002          ORR      r0,r1,r2
000132  f04f0101          MOV      r1,#1
000136  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;201    
;;;202    	if ((COM == COM1) || (COM == COM2))
00013a  b10c              CBZ      r4,|L1.320|
00013c  2c01              CMP      r4,#1
00013e  d105              BNE      |L1.332|
                  |L1.320|
;;;203      	{
;;;204        	/* Enable UART clock */
;;;205        	RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
000140  498a              LDR      r1,|L1.876|
000142  f8510024          LDR      r0,[r1,r4,LSL #2]
000146  2101              MOVS     r1,#1
000148  f7fffffe          BL       RCC_APB2PeriphClockCmd
                  |L1.332|
;;;206      	}
;;;207    
;;;208      	/* Connect PXx to USARTx_Tx*/
;;;209      	GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
00014c  4b88              LDR      r3,|L1.880|
00014e  5d1a              LDRB     r2,[r3,r4]
000150  4b88              LDR      r3,|L1.884|
000152  5d19              LDRB     r1,[r3,r4]
000154  4b88              LDR      r3,|L1.888|
000156  f8530024          LDR      r0,[r3,r4,LSL #2]
00015a  f7fffffe          BL       GPIO_PinAFConfig
;;;210    
;;;211      	/* Connect PXx to USARTx_Rx*/
;;;212      	GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
00015e  4b87              LDR      r3,|L1.892|
000160  5d1a              LDRB     r2,[r3,r4]
000162  4b87              LDR      r3,|L1.896|
000164  5d19              LDRB     r1,[r3,r4]
000166  4b87              LDR      r3,|L1.900|
000168  f8530024          LDR      r0,[r3,r4,LSL #2]
00016c  f7fffffe          BL       GPIO_PinAFConfig
;;;213    
;;;214      	/* Configure USART Tx as alternate function  */
;;;215      	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000170  f04f0000          MOV      r0,#0
000174  f88d000a          STRB     r0,[sp,#0xa]
;;;216      	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000178  f04f0001          MOV      r0,#1
00017c  f88d000b          STRB     r0,[sp,#0xb]
;;;217      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000180  f04f0002          MOV      r0,#2
000184  f88d0008          STRB     r0,[sp,#8]
;;;218    
;;;219      	GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000188  487f              LDR      r0,|L1.904|
00018a  f8300014          LDRH     r0,[r0,r4,LSL #1]
00018e  9001              STR      r0,[sp,#4]
;;;220      	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000190  f04f0002          MOV      r0,#2
000194  f88d0009          STRB     r0,[sp,#9]
;;;221      	GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
000198  4977              LDR      r1,|L1.888|
00019a  f8510024          LDR      r0,[r1,r4,LSL #2]
00019e  a901              ADD      r1,sp,#4
0001a0  f7fffffe          BL       GPIO_Init
;;;222    
;;;223      	/* Configure USART Rx as alternate function  */
;;;224      	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0001a4  f04f0002          MOV      r0,#2
0001a8  f88d0008          STRB     r0,[sp,#8]
;;;225      	GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
0001ac  4877              LDR      r0,|L1.908|
0001ae  f8300014          LDRH     r0,[r0,r4,LSL #1]
0001b2  9001              STR      r0,[sp,#4]
;;;226      	GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
0001b4  4973              LDR      r1,|L1.900|
0001b6  f8510024          LDR      r0,[r1,r4,LSL #2]
0001ba  a901              ADD      r1,sp,#4
0001bc  f7fffffe          BL       GPIO_Init
;;;227    
;;;228    
;;;229      	///F205: 为得到高速率，需要8x采样：
;;;230      	USART_OverSampling8Cmd(COM_USART[COM], DISABLE);
0001c0  4967              LDR      r1,|L1.864|
0001c2  f8510024          LDR      r0,[r1,r4,LSL #2]
0001c6  2100              MOVS     r1,#0
0001c8  f7fffffe          BL       USART_OverSampling8Cmd
;;;231    
;;;232      	/* USART configuration */
;;;233      	USART_Init(COM_USART[COM], USART_InitStruct);
0001cc  4964              LDR      r1,|L1.864|
0001ce  f8510024          LDR      r0,[r1,r4,LSL #2]
0001d2  4631              MOV      r1,r6
0001d4  f7fffffe          BL       USART_Init
;;;234    
;;;235    
;;;236      	///允许NVIC：	
;;;237      	/* Configure the preemption priority and subpriority:
;;;238         	- 1 bits for pre-emption priority: possible value are 0 or 1 
;;;239         	- 3 bits for subpriority: possible value are 0..7
;;;240         	- Lower values gives higher priority  
;;;241       	*/
;;;242      	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  
0001d8  f44f60e0          MOV      r0,#0x700
0001dc  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;243      	/* Enable the WAKEUP_BUTTON_EXTI_IRQn Interrupt */
;;;244      	NVIC_InitStructure.NVIC_IRQChannel = COM_IRQn[COM];//EVAL_COM1_IRQn
0001e0  486b              LDR      r0,|L1.912|
0001e2  5d00              LDRB     r0,[r0,r4]
0001e4  f88d0000          STRB     r0,[sp,#0]
;;;245      	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
0001e8  f04f0000          MOV      r0,#0
0001ec  f88d0001          STRB     r0,[sp,#1]
;;;246      	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
0001f0  f88d0002          STRB     r0,[sp,#2]
;;;247      	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0001f4  f04f0001          MOV      r0,#1
0001f8  f88d0003          STRB     r0,[sp,#3]
;;;248      	NVIC_Init(&NVIC_InitStructure);
0001fc  4668              MOV      r0,sp
0001fe  f7fffffe          BL       NVIC_Init
;;;249    
;;;250      	///F205: 允许发送完成中断和接收中断
;;;251      	USART_ITConfig(COM_USART[COM], USART_IT_TC, 	ENABLE);
000202  4957              LDR      r1,|L1.864|
000204  f8510024          LDR      r0,[r1,r4,LSL #2]
000208  2201              MOVS     r2,#1
00020a  f2406126          MOV      r1,#0x626
00020e  f7fffffe          BL       USART_ITConfig
;;;252    	USART_ClearITPendingBit(COM_USART[COM], USART_IT_TC);
000212  4953              LDR      r1,|L1.864|
000214  f8510024          LDR      r0,[r1,r4,LSL #2]
000218  f2406126          MOV      r1,#0x626
00021c  f7fffffe          BL       USART_ClearITPendingBit
;;;253    	USART_ITConfig(COM_USART[COM], USART_IT_RXNE, 	ENABLE);
000220  494f              LDR      r1,|L1.864|
000222  f8510024          LDR      r0,[r1,r4,LSL #2]
000226  2201              MOVS     r2,#1
000228  f2405125          MOV      r1,#0x525
00022c  f7fffffe          BL       USART_ITConfig
;;;254    	USART_ITConfig(COM_USART[COM], USART_IT_ORE,	ENABLE);
000230  494b              LDR      r1,|L1.864|
000232  f8510024          LDR      r0,[r1,r4,LSL #2]
000236  2201              MOVS     r2,#1
000238  f44f7158          MOV      r1,#0x360
00023c  f7fffffe          BL       USART_ITConfig
;;;255    
;;;256      
;;;257    
;;;258      	///F205: 配置 DMA
;;;259    #if (USART_TX_USE_DMA)
;;;260      	F205_UsartDMAConfig(COM, USART_BufStruct);
000240  4629              MOV      r1,r5
000242  4620              MOV      r0,r4
000244  f7fffffe          BL       F205_UsartDMAConfig
;;;261    #if (USART_TX_DMA_INTERRUPT_EN)
;;;262    	///NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
;;;263      	NVIC_InitStructure.NVIC_IRQChannel = DMA_IRQn;
000248  f04f0046          MOV      r0,#0x46
00024c  f88d0000          STRB     r0,[sp,#0]
;;;264      	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000250  f04f0000          MOV      r0,#0
000254  f88d0001          STRB     r0,[sp,#1]
;;;265      	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000258  f04f0001          MOV      r0,#1
00025c  f88d0002          STRB     r0,[sp,#2]
;;;266      	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000260  f88d0003          STRB     r0,[sp,#3]
;;;267      	NVIC_Init(&NVIC_InitStructure);	
000264  4668              MOV      r0,sp
000266  f7fffffe          BL       NVIC_Init
;;;268      	///允许发送DMA中断
;;;269    	//DMA_ITConfig(DMA_Stream, DMA_IT_FE, ENABLE);
;;;270    	DMA_ITConfig(DMA_Stream, DMA_IT_TC, ENABLE);
00026a  2201              MOVS     r2,#1
00026c  2110              MOVS     r1,#0x10
00026e  483a              LDR      r0,|L1.856|
000270  f7fffffe          BL       DMA_ITConfig
;;;271    	DMA_ClearFlag(DMA_Stream, DMA_FLAG_TCIF);
000274  f04f5120          MOV      r1,#0x28000000
000278  4837              LDR      r0,|L1.856|
00027a  f7fffffe          BL       DMA_ClearFlag
;;;272    #endif
;;;273    #endif
;;;274        
;;;275      	/* Enable USART */
;;;276      	USART_Cmd(COM_USART[COM], ENABLE);
00027e  4938              LDR      r1,|L1.864|
000280  f8510024          LDR      r0,[r1,r4,LSL #2]
000284  2101              MOVS     r1,#1
000286  f7fffffe          BL       USART_Cmd
;;;277    }
00028a  bdfe              POP      {r1-r7,pc}
;;;278    
                          ENDP

                  F205_DisablePeripherals PROC
;;;335    
;;;336    void F205_DisablePeripherals(COM_TypeDef COM)
00028c  b538              PUSH     {r3-r5,lr}
;;;337    {
00028e  4604              MOV      r4,r0
;;;338    	NVIC_InitTypeDef NVIC_InitStructure;
;;;339    
;;;340    	///F205: 禁止接收中断
;;;341      	USART_ITConfig(COM_USART[COM], USART_IT_TC, 	DISABLE);
000290  4933              LDR      r1,|L1.864|
000292  f8510024          LDR      r0,[r1,r4,LSL #2]
000296  f04f0200          MOV      r2,#0
00029a  f2406126          MOV      r1,#0x626
00029e  f7fffffe          BL       USART_ITConfig
;;;342    	USART_ITConfig(COM_USART[COM], USART_IT_RXNE, 	DISABLE);
0002a2  492f              LDR      r1,|L1.864|
0002a4  f8510024          LDR      r0,[r1,r4,LSL #2]
0002a8  2200              MOVS     r2,#0
0002aa  f2405125          MOV      r1,#0x525
0002ae  f7fffffe          BL       USART_ITConfig
;;;343    	USART_ITConfig(COM_USART[COM], USART_IT_ORE,	DISABLE);
0002b2  492b              LDR      r1,|L1.864|
0002b4  f8510024          LDR      r0,[r1,r4,LSL #2]
0002b8  2200              MOVS     r2,#0
0002ba  f44f7158          MOV      r1,#0x360
0002be  f7fffffe          BL       USART_ITConfig
;;;344    
;;;345    	///禁止DMA 中断
;;;346    	DMA_ITConfig(DMA_Stream, DMA_IT_FE, DISABLE);
0002c2  2200              MOVS     r2,#0
0002c4  2180              MOVS     r1,#0x80
0002c6  4824              LDR      r0,|L1.856|
0002c8  f7fffffe          BL       DMA_ITConfig
;;;347    	DMA_ITConfig(DMA_Stream, DMA_IT_TC, DISABLE);
0002cc  2200              MOVS     r2,#0
0002ce  2110              MOVS     r1,#0x10
0002d0  4821              LDR      r0,|L1.856|
0002d2  f7fffffe          BL       DMA_ITConfig
;;;348    
;;;349    	NVIC_InitStructure.NVIC_IRQChannel = DMA_IRQn;
0002d6  f04f0046          MOV      r0,#0x46
0002da  f88d0000          STRB     r0,[sp,#0]
;;;350      	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
0002de  f04f0000          MOV      r0,#0
0002e2  f88d0003          STRB     r0,[sp,#3]
;;;351      	NVIC_Init(&NVIC_InitStructure);	
0002e6  4668              MOV      r0,sp
0002e8  f7fffffe          BL       NVIC_Init
;;;352    
;;;353    	NVIC_InitStructure.NVIC_IRQChannel = COM_IRQn[COM]; //EVAL_COM1_IRQn
0002ec  4828              LDR      r0,|L1.912|
0002ee  5d00              LDRB     r0,[r0,r4]
0002f0  f88d0000          STRB     r0,[sp,#0]
;;;354      	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
0002f4  f04f0000          MOV      r0,#0
0002f8  f88d0003          STRB     r0,[sp,#3]
;;;355      	NVIC_Init(&NVIC_InitStructure);
0002fc  4668              MOV      r0,sp
0002fe  f7fffffe          BL       NVIC_Init
;;;356      
;;;357      	/* Disable USART */
;;;358      	USART_Cmd(COM_USART[COM], DISABLE);
000302  4917              LDR      r1,|L1.864|
000304  f8510024          LDR      r0,[r1,r4,LSL #2]
000308  2100              MOVS     r1,#0
00030a  f7fffffe          BL       USART_Cmd
;;;359    		 
;;;360    	///禁止 USART6 TX DMA
;;;361      	DMA_Cmd(DMA_Stream, DISABLE);
00030e  2100              MOVS     r1,#0
000310  4811              LDR      r0,|L1.856|
000312  f7fffffe          BL       DMA_Cmd
;;;362    
;;;363    	/* Disable DMA clock */
;;;364      	RCC_AHB1PeriphClockCmd(DMA_Periph, DISABLE);
000316  2100              MOVS     r1,#0
000318  f44f0080          MOV      r0,#0x400000
00031c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;365    	///Disable USART6 clock
;;;366    	RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], DISABLE);
000320  4912              LDR      r1,|L1.876|
000322  f8510024          LDR      r0,[r1,r4,LSL #2]
000326  2100              MOVS     r1,#0
000328  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;367    
;;;368    	///关闭 SysTick
;;;369    	SysTick->CTRL  = 0;                    /* Disable SysTick IRQ and SysTick Timer */
00032c  f04f0000          MOV      r0,#0
000330  f04f21e0          MOV      r1,#0xe000e000
000334  6108              STR      r0,[r1,#0x10]
;;;370    
;;;371    }
000336  bd38              POP      {r3-r5,pc}
;;;372    
                          ENDP

                  Delay PROC
;;;373    void Delay(uint32_t dlyTm)
000338  f04f0100          MOV      r1,#0
;;;374    {
;;;375    	uint32_t i;
;;;376    
;;;377    	for (i = 0; i < dlyTm; i++){
00033c  e002              B        |L1.836|
                  |L1.830|
;;;378    		__NOP();
00033e  bf00              NOP      
000340  f1010101          ADD      r1,r1,#1              ;377
                  |L1.836|
000344  4281              CMP      r1,r0                 ;377
000346  d3fa              BCC      |L1.830|
;;;379    	}
;;;380    }
000348  4770              BX       lr
;;;381    
                          ENDP

00034a  0000              DCW      0x0000
                  |L1.844|
                          DCD      GPIO_CLK
                  |L1.848|
                          DCD      GPIO_PIN
                  |L1.852|
                          DCD      GPIO_PORT
                  |L1.856|
                          DCD      0x400264b8
                  |L1.860|
                          DCD      USART_DATA_REG_ADDR
                  |L1.864|
                          DCD      COM_USART
                  |L1.868|
                          DCD      COM_TX_PORT_CLK
                  |L1.872|
                          DCD      COM_RX_PORT_CLK
                  |L1.876|
                          DCD      COM_USART_CLK
                  |L1.880|
                          DCD      COM_TX_AF
                  |L1.884|
                          DCD      COM_TX_PIN_SOURCE
                  |L1.888|
                          DCD      COM_TX_PORT
                  |L1.892|
                          DCD      COM_RX_AF
                  |L1.896|
                          DCD      COM_RX_PIN_SOURCE
                  |L1.900|
                          DCD      COM_RX_PORT
                  |L1.904|
                          DCD      COM_TX_PIN
                  |L1.908|
                          DCD      COM_RX_PIN
                  |L1.912|
                          DCD      COM_IRQn

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GPIO_PIN
000000  01000080          DCW      0x0100,0x0080
000004  00400080          DCW      0x0040,0x0080
000008  01000200          DCW      0x0100,0x0200
00000c  04000800          DCW      0x0400,0x0800
000010  00800400          DCW      0x0080,0x0400
000014  08001000          DCW      0x0800,0x1000
                  GPIO_CLK
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000020
                          DCD      0x00000020
                          DCD      0x00000020
                          DCD      0x00000020
                          DCD      0x00000020
                          DCD      0x00000001
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000004
                  COM_USART_CLK
                          DCD      0x00000020
                          DCD      0x00000010
                  COM_TX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000001
                  COM_RX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000001
                  COM_TX_PIN
000060  00400200          DCW      0x0040,0x0200
                  COM_RX_PIN
000064  00800400          DCW      0x0080,0x0400
                  COM_TX_PIN_SOURCE
000068  0609              DCB      0x06,0x09
                  COM_RX_PIN_SOURCE
00006a  070a              DCB      0x07,0x0a
                  COM_TX_AF
00006c  0807              DCB      0x08,0x07
                  COM_RX_AF
00006e  0807              DCB      0x08,0x07
                  COM_IRQn
000070  47250000          DCB      0x47,0x25,0x00,0x00
                  USART_DATA_REG_ADDR
                          DCD      0x40011404
                          DCD      0x40011004

                          AREA ||.data||, DATA, ALIGN=2

                  GPIO_PORT
                          DCD      0x40020000
                          DCD      0x40020000
                          DCD      0x40020000
                          DCD      0x40021400
                          DCD      0x40021400
                          DCD      0x40021400
                          DCD      0x40021400
                          DCD      0x40021400
                          DCD      0x40020000
                          DCD      0x40020800
                          DCD      0x40020800
                          DCD      0x40020800
                  COM_USART
                          DCD      0x40011400
                          DCD      0x40011000
                  COM_TX_PORT
                          DCD      0x40020800
                          DCD      0x40020000
                  COM_RX_PORT
                          DCD      0x40020800
                          DCD      0x40020000
