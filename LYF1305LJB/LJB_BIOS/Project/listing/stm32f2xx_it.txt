; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\output\stm32f2xx_it.o --asm_dir=..\listing\ --list_dir=..\listing\ --depend=..\output\stm32f2xx_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\src -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\STM32F2xx -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32_EVAL -I..\src\SYSTICK -I..\src\LED -I..\src\GPIO -I..\src\USART -I..\src\FLASH -I..\src\HexFile -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DUSE_CPU_F205RC -DLJB_CPU -W --omf_browse=..\output\stm32f2xx_it.crf ..\src\stm32f2xx_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMI_Handler PROC
;;;72       */
;;;73     void NMI_Handler(void)
000000  4770              BX       lr
;;;74     {
;;;75     }
;;;76     
                          ENDP

                  HardFault_Handler PROC
;;;81       */
;;;82     void HardFault_Handler(void)
000002  bf00              NOP      
                  |L1.4|
;;;83     {
;;;84       /* Go to infinite loop when Hard Fault exception occurs */
;;;85       while (1)
000004  e7fe              B        |L1.4|
;;;86       {
;;;87       }
;;;88     }
;;;89     
                          ENDP

                  MemManage_Handler PROC
;;;94       */
;;;95     void MemManage_Handler(void)
000006  bf00              NOP      
                  |L1.8|
;;;96     {
;;;97       /* Go to infinite loop when Memory Manage exception occurs */
;;;98       while (1)
000008  e7fe              B        |L1.8|
;;;99       {
;;;100      }
;;;101    }
;;;102    
                          ENDP

                  BusFault_Handler PROC
;;;107      */
;;;108    void BusFault_Handler(void)
00000a  bf00              NOP      
                  |L1.12|
;;;109    {
;;;110      /* Go to infinite loop when Bus Fault exception occurs */
;;;111      while (1)
00000c  e7fe              B        |L1.12|
;;;112      {
;;;113      }
;;;114    }
;;;115    
                          ENDP

                  UsageFault_Handler PROC
;;;120      */
;;;121    void UsageFault_Handler(void)
00000e  bf00              NOP      
                  |L1.16|
;;;122    {
;;;123      /* Go to infinite loop when Usage Fault exception occurs */
;;;124      while (1)
000010  e7fe              B        |L1.16|
;;;125      {
;;;126      }
;;;127    }
;;;128    
                          ENDP

                  SVC_Handler PROC
;;;133      */
;;;134    void SVC_Handler(void)
000012  4770              BX       lr
;;;135    {
;;;136    }
;;;137    
                          ENDP

                  DebugMon_Handler PROC
;;;142      */
;;;143    void DebugMon_Handler(void)
000014  4770              BX       lr
;;;144    {
;;;145    }
;;;146    
                          ENDP

                  PendSV_Handler PROC
;;;151      */
;;;152    void PendSV_Handler(void)
000016  4770              BX       lr
;;;153    {
;;;154    }
;;;155    
                          ENDP

                  SysTick_Handler PROC
;;;160      */
;;;161    void SysTick_Handler(void)
000018  b510              PUSH     {r4,lr}
;;;162    {
;;;163    	F205_SysTickFunc();
00001a  f7fffffe          BL       F205_SysTickFunc
;;;164    }
00001e  bd10              POP      {r4,pc}
;;;165    
                          ENDP

                  USART6_IRQHandler PROC
;;;231    ///USART6 只使用 RX 中断，TX 由 DMA 管理
;;;232    void USART6_IRQHandler(void)
000020  b510              PUSH     {r4,lr}
;;;233    {
;;;234    	uint32_t status;
;;;235    
;;;236    	status = USART6->SR;
000022  4825              LDR      r0,|L1.184|
000024  8804              LDRH     r4,[r0,#0]
;;;237    
;;;238    	if (status & 0x28){
000026  f0140f28          TST      r4,#0x28
00002a  d018              BEQ      |L1.94|
;;;239    
;;;240    		///RXNE
;;;241    		//if (status & 0x20) 
;;;242    		//	USART_ClearITPendingBit(USART1, USART_IT_RXNE);   
;;;243    		///ORE
;;;244    		if (status & 0x08)
00002c  f0140f08          TST      r4,#8
000030  d003              BEQ      |L1.58|
;;;245    			USART_ClearITPendingBit(USART6, USART_IT_ORE); 
000032  f44f7158          MOV      r1,#0x360
000036  f7fffffe          BL       USART_ClearITPendingBit
                  |L1.58|
;;;246    
;;;247    		///if (status & 0x20)
;;;248    		{
;;;249    
;;;250    			///数据放入缓冲区：
;;;251    			USART_tmpRxBuf[USART_RxIndex] = USART_ReceiveData(USART6) & 0xff;
00003a  481f              LDR      r0,|L1.184|
00003c  f7fffffe          BL       USART_ReceiveData
000040  491e              LDR      r1,|L1.188|
000042  4a1f              LDR      r2,|L1.192|
000044  8812              LDRH     r2,[r2,#0]  ; USART_RxIndex
000046  5488              STRB     r0,[r1,r2]
;;;252    			USART_RxIndex++;
000048  481d              LDR      r0,|L1.192|
00004a  8800              LDRH     r0,[r0,#0]  ; USART_RxIndex
00004c  f1000001          ADD      r0,r0,#1
000050  491b              LDR      r1,|L1.192|
000052  8008              STRH     r0,[r1,#0]
;;;253    			USART_RxIndex &= USART_RX_BUF_MASK;
000054  4608              MOV      r0,r1
000056  8800              LDRH     r0,[r0,#0]  ; USART_RxIndex
000058  f3c0000e          UBFX     r0,r0,#0,#15
00005c  8008              STRH     r0,[r1,#0]
                  |L1.94|
;;;254    		}
;;;255    	}
;;;256    
;;;257    	///TXC
;;;258    	if (status & 0x40){
00005e  f0140f40          TST      r4,#0x40
000062  d00a              BEQ      |L1.122|
;;;259    
;;;260    		USART_ClearITPendingBit(USART6, USART_IT_TC);         /* Clear the USART1 Transmit interrupt.                */
000064  f2406126          MOV      r1,#0x626
000068  4813              LDR      r0,|L1.184|
00006a  f7fffffe          BL       USART_ClearITPendingBit
;;;261    #if (USART_TX_USE_DMA)
;;;262    		///关闭发送控制
;;;263    		F205_DisableUsartTx();
00006e  f7fffffe          BL       F205_DisableUsartTx
;;;264    #endif
;;;265    		//设置完成标志：
;;;266    		MyInfo.TxRdy = 1;
000072  f04f0001          MOV      r0,#1
000076  4913              LDR      r1,|L1.196|
000078  7208              STRB     r0,[r1,#8]
                  |L1.122|
;;;267    	}
;;;268    }
00007a  bd10              POP      {r4,pc}
;;;269    
                          ENDP

                  DMA2_Stream7_IRQHandler PROC
;;;274    ///DMA2 Stream7 中断服务程序：
;;;275    void DMA2_Stream7_IRQHandler(void)
00007c  b510              PUSH     {r4,lr}
;;;276    {
;;;277    	uint32_t  status;
;;;278    
;;;279    	status = DMA2->HISR;
00007e  4812              LDR      r0,|L1.200|
000080  6804              LDR      r4,[r0,#0]
;;;280    
;;;281    	///DMA 传送完成
;;;282    	if (status & 0x08000000){
000082  f0146f00          TST      r4,#0x8000000
000086  d004              BEQ      |L1.146|
;;;283    
;;;284    		DMA_ClearITPendingBit(DMA2_Stream7, DMA_IT_TCIF7);
000088  4910              LDR      r1,|L1.204|
00008a  480f              LDR      r0,|L1.200|
00008c  30b4              ADDS     r0,r0,#0xb4
00008e  f7fffffe          BL       DMA_ClearITPendingBit
                  |L1.146|
;;;285    		
;;;286    	}
;;;287    
;;;288    	///DMA 传送错误
;;;289    	if (status & 0x02000000)
000092  f0147f00          TST      r4,#0x2000000
000096  d005              BEQ      |L1.164|
;;;290    		DMA_ClearITPendingBit(DMA2_Stream7, DMA_FLAG_TEIF7);	
000098  f04f5108          MOV      r1,#0x22000000
00009c  480a              LDR      r0,|L1.200|
00009e  30b4              ADDS     r0,r0,#0xb4
0000a0  f7fffffe          BL       DMA_ClearITPendingBit
                  |L1.164|
;;;291    
;;;292    	///DMA FIFO 错误
;;;293    	if (status & 0x00400000)
0000a4  f4140f80          TST      r4,#0x400000
0000a8  d005              BEQ      |L1.182|
;;;294    		DMA_ClearITPendingBit(DMA2_Stream7, DMA_FLAG_FEIF7);
0000aa  f04f5101          MOV      r1,#0x20400000
0000ae  4806              LDR      r0,|L1.200|
0000b0  30b4              ADDS     r0,r0,#0xb4
0000b2  f7fffffe          BL       DMA_ClearITPendingBit
                  |L1.182|
;;;295    }
0000b6  bd10              POP      {r4,pc}
;;;296    #endif
                          ENDP

                  |L1.184|
                          DCD      0x40011400
                  |L1.188|
                          DCD      USART_tmpRxBuf
                  |L1.192|
                          DCD      USART_RxIndex
                  |L1.196|
                          DCD      MyInfo
                  |L1.200|
                          DCD      0x40026404
                  |L1.204|
                          DCD      0x28008000

                          AREA ||.data||, DATA, ALIGN=1

                  USART_RxIndex
000000  0000              DCW      0x0000
