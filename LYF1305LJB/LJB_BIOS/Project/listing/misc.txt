; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\output\misc.o --asm_dir=..\listing\ --list_dir=..\listing\ --depend=..\output\misc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\src -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\STM32F2xx -I..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\Utilities\STM32_EVAL -I..\src\SYSTICK -I..\src\LED -I..\src\GPIO -I..\src\USART -I..\src\FLASH -I..\src\HexFile -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\ST\STM32F2xx -DUSE_STDPERIPH_DRIVER -DUSE_CPU_F205RC -DLJB_CPU -W --omf_browse=..\output\misc.crf ..\..\Libraries\STM32F2xx_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;111      */
;;;112    void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  493a              LDR      r1,|L1.236|
;;;113    {
;;;114      /* Check the parameters */
;;;115      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;116      
;;;117      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;118      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  ea400101          ORR      r1,r0,r1
000006  4a3a              LDR      r2,|L1.240|
000008  6011              STR      r1,[r2,#0]
;;;119    }
00000a  4770              BX       lr
;;;120    
                          ENDP

                  NVIC_Init PROC
;;;129      */
;;;130    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
00000c  b570              PUSH     {r4-r6,lr}
;;;131    {
;;;132      uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
00000e  f04f0100          MOV      r1,#0
000012  460b              MOV      r3,r1
000014  f04f020f          MOV      r2,#0xf
;;;133      
;;;134      /* Check the parameters */
;;;135      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;136      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;137      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;138        
;;;139      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000018  78c4              LDRB     r4,[r0,#3]
00001a  b36c              CBZ      r4,|L1.120|
;;;140      {
;;;141        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;142        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
00001c  4c34              LDR      r4,|L1.240|
00001e  6824              LDR      r4,[r4,#0]
000020  f40464e0          AND      r4,r4,#0x700
000024  f5c464e0          RSB      r4,r4,#0x700
000028  f3c42107          UBFX     r1,r4,#8,#8
;;;143        tmppre = (0x4 - tmppriority);
00002c  f1c10404          RSB      r4,r1,#4
000030  b2e3              UXTB     r3,r4
;;;144        tmpsub = tmpsub >> tmppriority;
000032  fa42f201          ASR      r2,r2,r1
;;;145    
;;;146        tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
000036  7844              LDRB     r4,[r0,#1]
000038  fa04f403          LSL      r4,r4,r3
00003c  b2e1              UXTB     r1,r4
;;;147        tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
00003e  7884              LDRB     r4,[r0,#2]
000040  ea040402          AND      r4,r4,r2
000044  ea440101          ORR      r1,r4,r1
;;;148            
;;;149        tmppriority = tmppriority << 0x04;
000048  ea4f7401          LSL      r4,r1,#28
00004c  ea4f6114          LSR      r1,r4,#24
;;;150            
;;;151        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
000050  4c28              LDR      r4,|L1.244|
000052  7805              LDRB     r5,[r0,#0]
000054  5561              STRB     r1,[r4,r5]
;;;152        
;;;153        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;154        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000056  7804              LDRB     r4,[r0,#0]
000058  f004051f          AND      r5,r4,#0x1f
00005c  f04f0401          MOV      r4,#1
000060  fa04f405          LSL      r4,r4,r5
000064  7805              LDRB     r5,[r0,#0]
000066  ea4f1565          ASR      r5,r5,#5
00006a  f04f26e0          MOV      r6,#0xe000e000
00006e  eb060585          ADD      r5,r6,r5,LSL #2
000072  f8c54100          STR      r4,[r5,#0x100]
000076  e00c              B        |L1.146|
                  |L1.120|
;;;155          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;156      }
;;;157      else
;;;158      {
;;;159        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;160        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000078  7804              LDRB     r4,[r0,#0]
00007a  f004051f          AND      r5,r4,#0x1f
00007e  f04f0401          MOV      r4,#1
000082  fa04f405          LSL      r4,r4,r5
000086  4d1c              LDR      r5,|L1.248|
000088  7806              LDRB     r6,[r0,#0]
00008a  ea4f1666          ASR      r6,r6,#5
00008e  f8454026          STR      r4,[r5,r6,LSL #2]
                  |L1.146|
;;;161          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;162      }
;;;163    }
000092  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;173      */
;;;174    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000094  4a19              LDR      r2,|L1.252|
;;;175    { 
;;;176      /* Check the parameters */
;;;177      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;178      assert_param(IS_NVIC_OFFSET(Offset));  
;;;179       
;;;180      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000096  ea010202          AND      r2,r1,r2
00009a  ea420200          ORR      r2,r2,r0
00009e  4b18              LDR      r3,|L1.256|
0000a0  601a              STR      r2,[r3,#0]
;;;181    }
0000a2  4770              BX       lr
;;;182    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;192      */
;;;193    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
0000a4  b131              CBZ      r1,|L1.180|
;;;194    {
;;;195      /* Check the parameters */
;;;196      assert_param(IS_NVIC_LP(LowPowerMode));
;;;197      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;198      
;;;199      if (NewState != DISABLE)
;;;200      {
;;;201        SCB->SCR |= LowPowerMode;
0000a6  4a17              LDR      r2,|L1.260|
0000a8  6812              LDR      r2,[r2,#0]
0000aa  ea420200          ORR      r2,r2,r0
0000ae  4b15              LDR      r3,|L1.260|
0000b0  601a              STR      r2,[r3,#0]
0000b2  e005              B        |L1.192|
                  |L1.180|
;;;202      }
;;;203      else
;;;204      {
;;;205        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
0000b4  4a13              LDR      r2,|L1.260|
0000b6  6812              LDR      r2,[r2,#0]
0000b8  ea220200          BIC      r2,r2,r0
0000bc  4b11              LDR      r3,|L1.260|
0000be  601a              STR      r2,[r3,#0]
                  |L1.192|
;;;206      }
;;;207    }
0000c0  4770              BX       lr
;;;208    
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;216      */
;;;217    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
0000c2  2804              CMP      r0,#4
;;;218    {
;;;219      /* Check the parameters */
;;;220      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;221      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
0000c4  d108              BNE      |L1.216|
;;;222      {
;;;223        SysTick->CTRL |= SysTick_CLKSource_HCLK;
0000c6  f04f21e0          MOV      r1,#0xe000e000
0000ca  6909              LDR      r1,[r1,#0x10]
0000cc  f0410104          ORR      r1,r1,#4
0000d0  f04f22e0          MOV      r2,#0xe000e000
0000d4  6111              STR      r1,[r2,#0x10]
0000d6  e007              B        |L1.232|
                  |L1.216|
;;;224      }
;;;225      else
;;;226      {
;;;227        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
0000d8  f04f21e0          MOV      r1,#0xe000e000
0000dc  6909              LDR      r1,[r1,#0x10]
0000de  f0210104          BIC      r1,r1,#4
0000e2  f04f22e0          MOV      r2,#0xe000e000
0000e6  6111              STR      r1,[r2,#0x10]
                  |L1.232|
;;;228      }
;;;229    }
0000e8  4770              BX       lr
;;;230    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L1.236|
                          DCD      0x05fa0000
                  |L1.240|
                          DCD      0xe000ed0c
                  |L1.244|
                          DCD      0xe000e400
                  |L1.248|
                          DCD      0xe000e180
                  |L1.252|
                          DCD      0x1fffff80
                  |L1.256|
                          DCD      0xe000ed08
                  |L1.260|
                          DCD      0xe000ed10
